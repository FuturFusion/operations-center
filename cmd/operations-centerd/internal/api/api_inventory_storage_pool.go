// Code generated by generate-inventory; DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/response"
	"github.com/FuturFusion/operations-center/shared/api"
)

type storagePoolHandler struct {
	service inventory.StoragePoolService
}

func registerInventoryStoragePoolHandler(router *http.ServeMux, service inventory.StoragePoolService) {
	handler := &storagePoolHandler{
		service: service,
	}

	router.HandleFunc("GET /{$}", response.With(handler.storagePoolsGet))
	router.HandleFunc("GET /{id}", response.With(handler.storagePoolGet))
	router.HandleFunc("POST /{id}/resync", response.With(handler.storagePoolResyncPost))
	router.HandleFunc("POST /force-sync", response.With(handler.forceSyncPost))
}

// swagger:operation GET /1.0/inventory/storage_pools storage_pools storage_pools_get
//
//		Get the storage_pool
//
//		Returns a list of storage_pool (list of relative URLs).
//
//		---
//		produces:
//		  - application/json
//		parameters:
//		  - in: query
//		    name: cluster
//		    description: Cluster name
//		    type: string
//		    example: cluster
//		responses:
//		  "200":
//		    description: API storage_pool
//		    schema:
//		      type: object
//		      description: Sync response
//		      properties:
//		        type:
//		          type: string
//		          description: Response type
//		          example: sync
//		        status:
//		          type: string
//		          description: Status description
//		          example: Success
//		        status_code:
//		          type: integer
//		          description: Status code
//		          example: 200
//		        metadata:
//		          type: array
//		          description: List of storage_pool
//	               items:
//	                 type: string
//	               example: |-
//	                 [
//	                   "/1.0/inventory/storage_pools/1",
//	                   "/1.0/inventory/storage_pools/2"
//	                 ]
//		  "403":
//		    $ref: "#/responses/Forbidden"
//		  "500":
//		    $ref: "#/responses/InternalServerError"
func (i *storagePoolHandler) storagePoolsGet(r *http.Request) response.Response {
	var filter inventory.StoragePoolFilter

	if r.URL.Query().Get("cluster") != "" {
		filter.Cluster = ptr.To(r.URL.Query().Get("cluster"))
	}

	storagePoolIDs, err := i.service.GetAllIDsWithFilter(r.Context(), filter)
	if err != nil {
		return response.SmartError(err)
	}

	result := make([]string, 0, len(storagePoolIDs))
	for _, id := range storagePoolIDs {
		result = append(result, fmt.Sprintf("/%s/storage_pool/%d", api.APIVersion, id))
	}

	return response.SyncResponse(true, result)
}

// swagger:operation GET /1.0/inventory/storage_pools/{id} storage_pools storage_pool_get
//
//	Get the storage_pool
//
//	Gets a specific storage_pool.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: StoragePool
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          $ref: "#/definitions/StoragePool"
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *storagePoolHandler) storagePoolGet(r *http.Request) response.Response {
	id, err := strconv.Atoi(r.PathValue("id"))
	if err != nil {
		return response.SmartError(err)
	}

	storagePool, err := i.service.GetByID(r.Context(), id)
	if err != nil {
		return response.SmartError(err)
	}

	return response.SyncResponse(
		true,
		api.StoragePool{
			ID:          storagePool.ID,
			ClusterID:   storagePool.ClusterID,
			Name:        storagePool.Name,
			Object:      storagePool.Object,
			LastUpdated: storagePool.LastUpdated,
		},
	)
}

// swagger:operation POST /1.0/inventory/storage_pools/{id}/resync storage_pools storage_pool_get_resync_post
//
//	Resync the storage_pool
//
//	Resync a specific storage_pool.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: Empty response
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *storagePoolHandler) storagePoolResyncPost(r *http.Request) response.Response {
	id, err := strconv.Atoi(r.PathValue("id"))
	if err != nil {
		return response.SmartError(err)
	}

	err = i.service.ResyncByID(r.Context(), id)
	if err != nil {
		return response.SmartError(fmt.Errorf("Failed to resync storage_pool: %w", err))
	}

	return response.EmptySyncResponse
}

// swagger:operation POST /1.0/inventory/storage_pools/force-sync storage_pools storage_pools_force_sync_post
//
//	Force sync all
//
//	Force sync of storage_pools for all servers in all clusters.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: Empty response
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *storagePoolHandler) forceSyncPost(r *http.Request) response.Response {
	err := i.service.SyncAll(r.Context())
	if err != nil {
		return response.SmartError(fmt.Errorf("Failed to sync storage_pools: %w", err))
	}

	return response.EmptySyncResponse
}
