// Code generated by generate-inventory; DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/response"
	"github.com/FuturFusion/operations-center/shared/api"
)

type networkACLHandler struct {
	service inventory.NetworkACLService
}

func registerInventoryNetworkACLHandler(router *http.ServeMux, service inventory.NetworkACLService) {
	handler := &networkACLHandler{
		service: service,
	}

	router.HandleFunc("GET /{$}", response.With(handler.networkACLsGet))
	router.HandleFunc("GET /{id}", response.With(handler.networkACLGet))
	router.HandleFunc("POST /force-sync", response.With(handler.forceSyncPost))
}

// swagger:operation GET /1.0/inventory/network_acls network_acls network_acls_get
//
//		Get the network_acl
//
//		Returns a list of network_acl (list of relative URLs).
//
//		---
//		produces:
//		  - application/json
//		parameters:
//		  - in: query
//		    name: cluster
//		    description: Cluster name
//		    type: string
//		    example: cluster
//		  - in: query
//		    name: server
//		    description: Server name
//		    type: string
//		    example: localhost
//		  - in: query
//		    name: project
//		    description: Project name
//		    type: string
//		    example: default
//		responses:
//		  "200":
//		    description: API network_acl
//		    schema:
//		      type: object
//		      description: Sync response
//		      properties:
//		        type:
//		          type: string
//		          description: Response type
//		          example: sync
//		        status:
//		          type: string
//		          description: Status description
//		          example: Success
//		        status_code:
//		          type: integer
//		          description: Status code
//		          example: 200
//		        metadata:
//		          type: array
//		          description: List of network_acl
//	               items:
//	                 type: string
//	               example: |-
//	                 [
//	                   "/1.0/inventory/network_acls/1",
//	                   "/1.0/inventory/network_acls/2"
//	                 ]
//		  "403":
//		    $ref: "#/responses/Forbidden"
//		  "500":
//		    $ref: "#/responses/InternalServerError"
func (i *networkACLHandler) networkACLsGet(r *http.Request) response.Response {
	var filter inventory.NetworkACLFilter

	if r.URL.Query().Get("cluster") != "" {
		filter.Cluster = ptr.To(r.URL.Query().Get("cluster"))
	}

	if r.URL.Query().Get("server") != "" {
		filter.Server = ptr.To(r.URL.Query().Get("server"))
	}

	if r.URL.Query().Get("project") != "" {
		filter.Project = ptr.To(r.URL.Query().Get("project"))
	}

	networkACLIDs, err := i.service.GetAllIDsWithFilter(r.Context(), filter)
	if err != nil {
		return response.SmartError(err)
	}

	result := make([]string, 0, len(networkACLIDs))
	for _, id := range networkACLIDs {
		result = append(result, fmt.Sprintf("/%s/network_acl/%d", api.APIVersion, id))
	}

	return response.SyncResponse(true, result)
}

// swagger:operation GET /1.0/inventory/network_acls/{id} network_acls network_acl_get
//
//	Get the network_acl
//
//	Gets a specific network_acl.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: NetworkACL
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          $ref: "#/definitions/NetworkACL"
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *networkACLHandler) networkACLGet(r *http.Request) response.Response {
	id, err := strconv.Atoi(r.PathValue("id"))
	if err != nil {
		return response.SmartError(err)
	}

	networkACL, err := i.service.GetByID(r.Context(), id)
	if err != nil {
		return response.SmartError(err)
	}

	return response.SyncResponse(
		true,
		api.NetworkACL{
			ID:          networkACL.ID,
			ClusterID:   networkACL.ClusterID,
			ServerID:    networkACL.ServerID,
			ProjectName: networkACL.ProjectName,
			Name:        networkACL.Name,
			Object:      networkACL.Object,
			LastUpdated: networkACL.LastUpdated,
		},
	)
}

// swagger:operation POST /1.0/inventory/network_acls/force-sync network_acls network_acls_force_sync_post
//
//	Force sync all
//
//	Force sync of network_acls for all servers in all clusters.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: Empty response
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *networkACLHandler) forceSyncPost(r *http.Request) response.Response {
	err := i.service.SyncAll(r.Context())
	if err != nil {
		return response.SmartError(fmt.Errorf("Failed to sync network_acls: %w", err))
	}

	return response.EmptySyncResponse
}
