// Code generated by generate-inventory; DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/authz"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/response"
	"github.com/FuturFusion/operations-center/shared/api"
)

type networkZoneHandler struct {
	service inventory.NetworkZoneService
}

func registerInventoryNetworkZoneHandler(router Router, authorizer authz.Authorizer, service inventory.NetworkZoneService) {
	handler := &networkZoneHandler{
		service: service,
	}

	router.HandleFunc("GET /{$}", response.With(handler.networkZonesGet, assertPermission(authorizer, authz.ObjectTypeServer, authz.EntitlementCanView)))
	router.HandleFunc("GET /{uuid}", response.With(handler.networkZoneGet, assertPermission(authorizer, authz.ObjectTypeServer, authz.EntitlementCanView)))
	router.HandleFunc("POST /{uuid}/resync", response.With(handler.networkZoneResyncPost, assertPermission(authorizer, authz.ObjectTypeServer, authz.EntitlementCanEdit)))
}

// swagger:operation GET /1.0/inventory/network_zones network_zones network_zones_get
//
//	Get the network_zones
//
//	Returns a list of network zones (list of relative URLs).
//
//	---
//	produces:
//	  - application/json
//	parameters:
//	  - in: query
//	    name: cluster
//	    description: Cluster name
//	    type: string
//	    example: cluster
//	  - in: query
//	    name: project
//	    description: Project name
//	    type: string
//	    example: default
//	  - in: query
//	    name: filter
//	    description: Filter expression
//	    type: string
//	    example: name == "value"
//	responses:
//	  "200":
//	    description: API network zones
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          type: array
//	          description: List of network zones
//	               items:
//	                 type: string
//	               example: |-
//	                 [
//	                   "/1.0/inventory/network_zones/1",
//	                   "/1.0/inventory/network_zones/2"
//	                 ]
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"

// swagger:operation GET /1.0/inventory/network_zones?recursion=1 network_zones network_zones_get_recursion
//
//	Get the network zones
//
//	Returns a list of network zones (structs).
//
//	---
//	produces:
//	  - application/json
//	parameters:
//	  - in: query
//	    name: cluster
//	    description: Cluster name
//	    type: string
//	    example: cluster
//	  - in: query
//	    name: project
//	    description: Project name
//	    type: string
//	    example: default
//	  - in: query
//	    name: filter
//	    description: Filter expression
//	    type: string
//	    example: name == "value"
//	responses:
//	  "200":
//	    description: API network zones
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          type: array
//	          description: List of network zones
//	          items:
//	            $ref: "#/definitions/networkZone"
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *networkZoneHandler) networkZonesGet(r *http.Request) response.Response {
	// Parse the recursion field.
	recursion, err := strconv.Atoi(r.FormValue("recursion"))
	if err != nil {
		recursion = 0
	}

	var filter inventory.NetworkZoneFilter

	if r.URL.Query().Get("cluster") != "" {
		filter.Cluster = ptr.To(r.URL.Query().Get("cluster"))
	}

	if r.URL.Query().Get("project") != "" {
		filter.Project = ptr.To(r.URL.Query().Get("project"))
	}

	if r.URL.Query().Get("filter") != "" {
		filter.Expression = ptr.To(r.URL.Query().Get("filter"))
	}

	if recursion == 1 {
		// FIXME: Should we require a non empty filter with recursion?
		networkZones, err := i.service.GetAllWithFilter(r.Context(), filter)
		if err != nil {
			return response.SmartError(err)
		}

		result := make([]api.NetworkZone, 0, len(networkZones))
		for _, networkZone := range networkZones {
			result = append(result, api.NetworkZone{
				UUID:        networkZone.UUID,
				Cluster:     networkZone.Cluster,
				ProjectName: networkZone.ProjectName,
				Name:        networkZone.Name,
				Object:      networkZone.Object,
				LastUpdated: networkZone.LastUpdated,
			})
		}

		return response.SyncResponse(true, result)
	}

	networkZoneUUIDs, err := i.service.GetAllUUIDsWithFilter(r.Context(), filter)
	if err != nil {
		return response.SmartError(err)
	}

	result := make([]string, 0, len(networkZoneUUIDs))
	for _, id := range networkZoneUUIDs {
		result = append(result, fmt.Sprintf("/%s/inventory/network_zone/%d", api.APIVersion, id))
	}

	return response.SyncResponse(true, result)
}

// swagger:operation GET /1.0/inventory/network_zones/{uuid} network_zones network_zone_get
//
//	Get the network zone
//
//	Gets a specific network zone.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: network zone
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          $ref: "#/definitions/NetworkZone"
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *networkZoneHandler) networkZoneGet(r *http.Request) response.Response {
	id, err := uuid.Parse(r.PathValue("uuid"))
	if err != nil {
		return response.SmartError(err)
	}

	networkZone, err := i.service.GetByUUID(r.Context(), id)
	if err != nil {
		return response.SmartError(err)
	}

	return response.SyncResponse(
		true,
		api.NetworkZone{
			UUID:        networkZone.UUID,
			Cluster:     networkZone.Cluster,
			ProjectName: networkZone.ProjectName,
			Name:        networkZone.Name,
			Object:      networkZone.Object,
			LastUpdated: networkZone.LastUpdated,
		},
	)
}

// swagger:operation POST /1.0/inventory/network_zones/{uuid}/resync network_zones network_zone_get_resync_post
//
//	Resync the network zone
//
//	Resync a specific network zone.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: Empty response
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *networkZoneHandler) networkZoneResyncPost(r *http.Request) response.Response {
	id, err := uuid.Parse(r.PathValue("uuid"))
	if err != nil {
		return response.SmartError(err)
	}

	err = i.service.ResyncByUUID(r.Context(), id)
	if err != nil {
		return response.SmartError(fmt.Errorf("Failed to resync network_zone: %w", err))
	}

	return response.EmptySyncResponse
}
