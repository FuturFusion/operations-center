// Code generated by generate-inventory; DO NOT EDIT.

package api

import (
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/authz"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventoryServiceMiddleware "github.com/FuturFusion/operations-center/internal/inventory/middleware"
	inventoryRepoMiddleware "github.com/FuturFusion/operations-center/internal/inventory/repo/middleware"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
)

func registerInventoryRoutes(db dbdriver.DBTX, clusterSvc provisioning.ClusterService, serverClient inventory.ServerClient, authorizer authz.Authorizer, inventoryRouter Router) []provisioning.InventorySyncer {
	// Service
	inventoryInventoryAggregateSvc := inventoryServiceMiddleware.NewInventoryAggregateServiceWithSlog(
		inventory.NewInventoryAggregateService(
			inventoryRepoMiddleware.NewInventoryAggregateRepoWithSlog(
				inventorySqlite.NewInventoryAggregate(db),
				slog.Default(),
			),
		),
		slog.Default(),
	)

	inventoryImageSvc := inventoryServiceMiddleware.NewImageServiceWithSlog(
		inventory.NewImageService(
			inventoryRepoMiddleware.NewImageRepoWithSlog(
				inventorySqlite.NewImage(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryInstanceSvc := inventoryServiceMiddleware.NewInstanceServiceWithSlog(
		inventory.NewInstanceService(
			inventoryRepoMiddleware.NewInstanceRepoWithSlog(
				inventorySqlite.NewInstance(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryNetworkSvc := inventoryServiceMiddleware.NewNetworkServiceWithSlog(
		inventory.NewNetworkService(
			inventoryRepoMiddleware.NewNetworkRepoWithSlog(
				inventorySqlite.NewNetwork(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
			inventory.NetworkWithSyncFilter(networkWithSyncFilter),
		),
		slog.Default(),
	)

	inventoryNetworkACLSvc := inventoryServiceMiddleware.NewNetworkACLServiceWithSlog(
		inventory.NewNetworkACLService(
			inventoryRepoMiddleware.NewNetworkACLRepoWithSlog(
				inventorySqlite.NewNetworkACL(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryNetworkAddressSetSvc := inventoryServiceMiddleware.NewNetworkAddressSetServiceWithSlog(
		inventory.NewNetworkAddressSetService(
			inventoryRepoMiddleware.NewNetworkAddressSetRepoWithSlog(
				inventorySqlite.NewNetworkAddressSet(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryNetworkForwardSvc := inventoryServiceMiddleware.NewNetworkForwardServiceWithSlog(
		inventory.NewNetworkForwardService(
			inventoryRepoMiddleware.NewNetworkForwardRepoWithSlog(
				inventorySqlite.NewNetworkForward(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
			serverClient,
			inventory.NetworkForwardWithParentFilter(networkForwardWithParentFilter),
		),
		slog.Default(),
	)

	inventoryNetworkIntegrationSvc := inventoryServiceMiddleware.NewNetworkIntegrationServiceWithSlog(
		inventory.NewNetworkIntegrationService(
			inventoryRepoMiddleware.NewNetworkIntegrationRepoWithSlog(
				inventorySqlite.NewNetworkIntegration(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryNetworkLoadBalancerSvc := inventoryServiceMiddleware.NewNetworkLoadBalancerServiceWithSlog(
		inventory.NewNetworkLoadBalancerService(
			inventoryRepoMiddleware.NewNetworkLoadBalancerRepoWithSlog(
				inventorySqlite.NewNetworkLoadBalancer(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
			serverClient,
			inventory.NetworkLoadBalancerWithParentFilter(networkLoadBalancerWithParentFilter),
		),
		slog.Default(),
	)

	inventoryNetworkPeerSvc := inventoryServiceMiddleware.NewNetworkPeerServiceWithSlog(
		inventory.NewNetworkPeerService(
			inventoryRepoMiddleware.NewNetworkPeerRepoWithSlog(
				inventorySqlite.NewNetworkPeer(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
			serverClient,
			inventory.NetworkPeerWithParentFilter(networkPeerWithParentFilter),
		),
		slog.Default(),
	)

	inventoryNetworkZoneSvc := inventoryServiceMiddleware.NewNetworkZoneServiceWithSlog(
		inventory.NewNetworkZoneService(
			inventoryRepoMiddleware.NewNetworkZoneRepoWithSlog(
				inventorySqlite.NewNetworkZone(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryProfileSvc := inventoryServiceMiddleware.NewProfileServiceWithSlog(
		inventory.NewProfileService(
			inventoryRepoMiddleware.NewProfileRepoWithSlog(
				inventorySqlite.NewProfile(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryProjectSvc := inventoryServiceMiddleware.NewProjectServiceWithSlog(
		inventory.NewProjectService(
			inventoryRepoMiddleware.NewProjectRepoWithSlog(
				inventorySqlite.NewProject(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryStorageBucketSvc := inventoryServiceMiddleware.NewStorageBucketServiceWithSlog(
		inventory.NewStorageBucketService(
			inventoryRepoMiddleware.NewStorageBucketRepoWithSlog(
				inventorySqlite.NewStorageBucket(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
			serverClient,
			inventory.StorageBucketWithParentFilter(storageBucketWithParentFilter),
		),
		slog.Default(),
	)

	inventoryStoragePoolSvc := inventoryServiceMiddleware.NewStoragePoolServiceWithSlog(
		inventory.NewStoragePoolService(
			inventoryRepoMiddleware.NewStoragePoolRepoWithSlog(
				inventorySqlite.NewStoragePool(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
		),
		slog.Default(),
	)

	inventoryStorageVolumeSvc := inventoryServiceMiddleware.NewStorageVolumeServiceWithSlog(
		inventory.NewStorageVolumeService(
			inventoryRepoMiddleware.NewStorageVolumeRepoWithSlog(
				inventorySqlite.NewStorageVolume(db),
				slog.Default(),
			),
			clusterSvc,
			serverClient,
			serverClient,
		),
		slog.Default(),
	)

	// API routes
	inventoryQueryRouter := inventoryRouter.SubGroup("/query")
	registerInventoryQueryHandler(inventoryQueryRouter, authorizer, inventoryInventoryAggregateSvc)

	inventoryImageRouter := inventoryRouter.SubGroup("/images")
	registerInventoryImageHandler(inventoryImageRouter, authorizer, inventoryImageSvc)

	inventoryInstanceRouter := inventoryRouter.SubGroup("/instances")
	registerInventoryInstanceHandler(inventoryInstanceRouter, authorizer, inventoryInstanceSvc)

	inventoryNetworkRouter := inventoryRouter.SubGroup("/networks")
	registerInventoryNetworkHandler(inventoryNetworkRouter, authorizer, inventoryNetworkSvc)

	inventoryNetworkACLRouter := inventoryRouter.SubGroup("/network_acls")
	registerInventoryNetworkACLHandler(inventoryNetworkACLRouter, authorizer, inventoryNetworkACLSvc)

	inventoryNetworkAddressSetRouter := inventoryRouter.SubGroup("/network_address_sets")
	registerInventoryNetworkAddressSetHandler(inventoryNetworkAddressSetRouter, authorizer, inventoryNetworkAddressSetSvc)

	inventoryNetworkForwardRouter := inventoryRouter.SubGroup("/network_forwards")
	registerInventoryNetworkForwardHandler(inventoryNetworkForwardRouter, authorizer, inventoryNetworkForwardSvc)

	inventoryNetworkIntegrationRouter := inventoryRouter.SubGroup("/network_integrations")
	registerInventoryNetworkIntegrationHandler(inventoryNetworkIntegrationRouter, authorizer, inventoryNetworkIntegrationSvc)

	inventoryNetworkLoadBalancerRouter := inventoryRouter.SubGroup("/network_load_balancers")
	registerInventoryNetworkLoadBalancerHandler(inventoryNetworkLoadBalancerRouter, authorizer, inventoryNetworkLoadBalancerSvc)

	inventoryNetworkPeerRouter := inventoryRouter.SubGroup("/network_peers")
	registerInventoryNetworkPeerHandler(inventoryNetworkPeerRouter, authorizer, inventoryNetworkPeerSvc)

	inventoryNetworkZoneRouter := inventoryRouter.SubGroup("/network_zones")
	registerInventoryNetworkZoneHandler(inventoryNetworkZoneRouter, authorizer, inventoryNetworkZoneSvc)

	inventoryProfileRouter := inventoryRouter.SubGroup("/profiles")
	registerInventoryProfileHandler(inventoryProfileRouter, authorizer, inventoryProfileSvc)

	inventoryProjectRouter := inventoryRouter.SubGroup("/projects")
	registerInventoryProjectHandler(inventoryProjectRouter, authorizer, inventoryProjectSvc)

	inventoryStorageBucketRouter := inventoryRouter.SubGroup("/storage_buckets")
	registerInventoryStorageBucketHandler(inventoryStorageBucketRouter, authorizer, inventoryStorageBucketSvc)

	inventoryStoragePoolRouter := inventoryRouter.SubGroup("/storage_pools")
	registerInventoryStoragePoolHandler(inventoryStoragePoolRouter, authorizer, inventoryStoragePoolSvc)

	inventoryStorageVolumeRouter := inventoryRouter.SubGroup("/storage_volumes")
	registerInventoryStorageVolumeHandler(inventoryStorageVolumeRouter, authorizer, inventoryStorageVolumeSvc)

	return []provisioning.InventorySyncer{
		inventoryImageSvc,
		inventoryInstanceSvc,
		inventoryNetworkSvc,
		inventoryNetworkACLSvc,
		inventoryNetworkAddressSetSvc,
		inventoryNetworkForwardSvc,
		inventoryNetworkIntegrationSvc,
		inventoryNetworkLoadBalancerSvc,
		inventoryNetworkPeerSvc,
		inventoryNetworkZoneSvc,
		inventoryProfileSvc,
		inventoryProjectSvc,
		inventoryStorageBucketSvc,
		inventoryStoragePoolSvc,
		inventoryStorageVolumeSvc,
	}
}
