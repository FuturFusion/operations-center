// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/spf13/cobra"

	"github.com/FuturFusion/operations-center/cmd/operations-center/internal/client"
	"github.com/FuturFusion/operations-center/cmd/operations-center/internal/validate"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/render"
	"github.com/FuturFusion/operations-center/internal/sort"
)

type CmdNetworkIntegration struct{}

func (c *CmdNetworkIntegration) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "network_integration"
	cmd.Short = "Interact with network_integrations"
	cmd.Long = `Description:
  Interact with network_integrations

  Configure network_integrations for use by operations center.
`

	// Workaround for subcommand usage errors. See: https://github.com/spf13/cobra/issues/706
	cmd.Args = cobra.NoArgs
	cmd.Run = func(cmd *cobra.Command, args []string) { _ = cmd.Usage() }

	// List
	networkIntegrationListCmd := cmdNetworkIntegrationList{}
	cmd.AddCommand(networkIntegrationListCmd.Command())

	// Show
	networkIntegrationShowCmd := cmdNetworkIntegrationShow{}
	cmd.AddCommand(networkIntegrationShowCmd.Command())

	return cmd
}

// List network_integrations.
type cmdNetworkIntegrationList struct {
	flagFilterCluster    string
	flagFilterExpression string

	flagFormat string
}

func (c *cmdNetworkIntegrationList) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "list"
	cmd.Short = "List available network_integrations"
	cmd.Long = `Description:
  List the available network_integrations
`

	cmd.RunE = c.Run

	cmd.Flags().StringVar(&c.flagFilterCluster, "cluster", "", "cluster name to filter for")
	cmd.Flags().StringVar(&c.flagFilterExpression, "filter", "", "filter expression to apply")

	cmd.Flags().StringVarP(&c.flagFormat, "format", "f", "table", `Format (csv|json|table|yaml|compact), use suffix ",noheader" to disable headers and ",header" to enable if demanded, e.g. csv,header`)
	cmd.PreRunE = func(cmd *cobra.Command, _ []string) error {
		return validate.FormatFlag(cmd.Flag("format").Value.String())
	}

	return cmd
}

func (c *cmdNetworkIntegrationList) Run(cmd *cobra.Command, args []string) error {
	// Quick checks.
	exit, err := validate.Args(cmd, args, 0, 0)
	if exit {
		return err
	}

	var filter inventory.NetworkIntegrationFilter

	if c.flagFilterCluster != "" {
		filter.Cluster = ptr.To(c.flagFilterCluster)
	}

	if c.flagFilterExpression != "" {
		filter.Expression = ptr.To(c.flagFilterExpression)
	}

	// Client call
	ocClient := client.New()

	networkIntegrations, err := ocClient.GetWithFilterNetworkIntegrations(filter)
	if err != nil {
		return err
	}

	// Render the table.
	header := []string{
		"ID",
		"Cluster",
		"Name",
		"Last Updated",
	}

	data := [][]string{}

	for _, networkIntegration := range networkIntegrations {
		data = append(data, []string{
			strconv.FormatInt(int64(networkIntegration.ID), 10),
			networkIntegration.Cluster,
			networkIntegration.Name,
			networkIntegration.LastUpdated.String(),
		})
	}

	sort.ColumnsNaturally(data)

	return render.Table(cmd.OutOrStdout(), c.flagFormat, header, data, networkIntegrations)
}

// Show network_integration.
type cmdNetworkIntegrationShow struct{}

func (c *cmdNetworkIntegrationShow) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "show <name>"
	cmd.Short = "Show information about a network_integration"
	cmd.Long = `Description:
  Show information about a network_integration.
`

	cmd.RunE = c.Run

	return cmd
}

func (c *cmdNetworkIntegrationShow) Run(cmd *cobra.Command, args []string) error {
	// Quick checks.
	exit, err := validate.Args(cmd, args, 1, 1)
	if exit {
		return err
	}

	name := args[0]

	// Client call
	ocClient := client.New()

	networkIntegration, err := ocClient.GetNetworkIntegration(name)
	if err != nil {
		return err
	}

	objectJSON, err := json.MarshalIndent(networkIntegration.Object, "", "  ")
	if err != nil {
		return err
	}

	fmt.Printf("ID: %d\n", networkIntegration.ID)
	fmt.Printf("Cluster: %s\n", networkIntegration.Cluster)
	fmt.Printf("Name: %s\n", networkIntegration.Name)
	fmt.Printf("Last Updated: %s\n", networkIntegration.LastUpdated.String())
	fmt.Printf("Object:\n%s\n", objectJSON)

	return nil
}
