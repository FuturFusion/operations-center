// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"bytes"
	"encoding/json"
	"fmt"
	"strings"
	"text/template"

	"github.com/spf13/cobra"

	"github.com/FuturFusion/operations-center/cmd/operations-center/internal/client"
	"github.com/FuturFusion/operations-center/cmd/operations-center/internal/config"
	"github.com/FuturFusion/operations-center/cmd/operations-center/internal/validate"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/render"
	"github.com/FuturFusion/operations-center/internal/sort"
)

type CmdImage struct {
	Config *config.Config
}

func (c *CmdImage) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "image"
	cmd.Short = "Interact with images"
	cmd.Long = `Description:
  Interact with images
`

	// Workaround for subcommand usage errors. See: https://github.com/spf13/cobra/issues/706
	cmd.Args = cobra.NoArgs
	cmd.Run = func(cmd *cobra.Command, args []string) { _ = cmd.Usage() }

	// List
	imageListCmd := cmdImageList{
		config: c.Config,
	}

	cmd.AddCommand(imageListCmd.Command())

	// Show
	imageShowCmd := cmdImageShow{
		config: c.Config,
	}

	cmd.AddCommand(imageShowCmd.Command())

	return cmd
}

// List images.
type cmdImageList struct {
	config *config.Config

	flagFilterCluster    string
	flagFilterProject    string
	flagFilterExpression string

	flagColumns string
	flagFormat  string
}

const imageDefaultColumns = `{{ .ID }},{{ .Cluster }},{{ .ProjectName }},{{ .Name }},{{ .LastUpdated }}`

func (c *cmdImageList) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "list"
	cmd.Short = "List available images"
	cmd.Long = `Description:
  List the available images
`

	cmd.RunE = c.Run

	cmd.Flags().StringVar(&c.flagFilterCluster, "cluster", "", "cluster name to filter for")
	cmd.Flags().StringVar(&c.flagFilterProject, "project", "", "project name to filter for")
	cmd.Flags().StringVar(&c.flagFilterExpression, "filter", "", "filter expression to apply")

	cmd.Flags().StringVarP(&c.flagColumns, "columns", "c", imageDefaultColumns, `Comma separated list of columns to print with the respective value in Go Template format`)
	cmd.Flags().StringVarP(&c.flagFormat, "format", "f", "table", `Format (csv|json|table|yaml|compact), use suffix ",noheader" to disable headers and ",header" to enable if demanded, e.g. csv,header`)
	cmd.PreRunE = func(cmd *cobra.Command, _ []string) error {
		return validate.FormatFlag(cmd.Flag("format").Value.String())
	}

	return cmd
}

func (c *cmdImageList) Run(cmd *cobra.Command, args []string) error {
	// Quick checks.
	exit, err := validate.Args(cmd, args, 0, 0)
	if exit {
		return err
	}

	var filter inventory.ImageFilter

	if c.flagFilterCluster != "" {
		filter.Cluster = ptr.To(c.flagFilterCluster)
	}

	if c.flagFilterProject != "" {
		filter.Project = ptr.To(c.flagFilterProject)
	}

	if c.flagFilterExpression != "" {
		filter.Expression = ptr.To(c.flagFilterExpression)
	}

	// Client call
	ocClient := client.New(
		c.config.OperationsCenterServer,
		client.WithForceLocal(c.config.ForceLocal),
	)

	images, err := ocClient.GetWithFilterImages(filter)
	if err != nil {
		return err
	}

	// Render the table.
	fields := strings.Split(c.flagColumns, ",")

	header := []string{}
	tmpl := template.New("")

	for _, field := range fields {
		title := strings.Trim(field, "{} .")
		header = append(header, title)
		fieldTmpl := tmpl.New(title)
		_, err := fieldTmpl.Parse(field)
		if err != nil {
			return err
		}
	}

	data := [][]string{}
	wr := &bytes.Buffer{}

	for _, image := range images {
		row := make([]string, len(header))
		for i, field := range header {
			wr.Reset()
			err := tmpl.ExecuteTemplate(wr, field, image)
			if err != nil {
				return err
			}

			row[i] = wr.String()
		}

		data = append(data, row)
	}

	sort.ColumnsNaturally(data)

	return render.Table(cmd.OutOrStdout(), c.flagFormat, header, data, images)
}

// Show image.
type cmdImageShow struct {
	config *config.Config
}

func (c *cmdImageShow) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "show <name>"
	cmd.Short = "Show information about a image"
	cmd.Long = `Description:
  Show information about a image.
`

	cmd.RunE = c.Run

	return cmd
}

func (c *cmdImageShow) Run(cmd *cobra.Command, args []string) error {
	// Quick checks.
	exit, err := validate.Args(cmd, args, 1, 1)
	if exit {
		return err
	}

	name := args[0]

	// Client call
	ocClient := client.New(
		c.config.OperationsCenterServer,
		client.WithForceLocal(c.config.ForceLocal),
	)

	image, err := ocClient.GetImage(name)
	if err != nil {
		return err
	}

	objectJSON, err := json.MarshalIndent(image.Object, "", "  ")
	if err != nil {
		return err
	}

	fmt.Printf("ID: %d\n", image.ID)
	fmt.Printf("Cluster: %s\n", image.Cluster)
	fmt.Printf("Project Name: %s\n", image.ProjectName)
	fmt.Printf("Name: %s\n", image.Name)
	fmt.Printf("Last Updated: %s\n", image.LastUpdated.String())
	fmt.Printf("Object:\n%s\n", objectJSON)

	return nil
}
