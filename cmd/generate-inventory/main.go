package main

import (
	"bytes"
	"embed"
	"go/format"
	"os"
	"strings"
	"text/template"

	"github.com/Masterminds/sprig/v3"
	"github.com/spf13/pflag"
)

//go:embed tmpl
var templateFS embed.FS

const generatedByPreamble = `// Code generated by generate-inventory; DO NOT EDIT.

`

func main() {
	pluralName := pflag.String("plural", "", "plural form of the entity")
	objectNamePropertyName := pflag.String("object-name-property-name", "Name", "Name property of the object")
	objectType := pflag.String("object-type", "", "Go type used for object in model")
	omitProject := pflag.Bool("omit-project", false, "if omit-project is provided, the entity does not have a relation to a project")
	pflag.Parse()

	name := pflag.Args()[0]
	objectEmbedded := false

	if *pluralName == "" {
		*pluralName = name + "s"
	}

	if *objectType != "" {
		objectEmbedded = true
	}

	if *objectType == "" {
		*objectType = name
	}

	targets := []struct {
		TemplateName string
		TargetName   string
	}{
		{
			"api.gotmpl",
			"cmd/operations-centerd/internal/api/api_inventory_{{ .Name }}.go",
		},
		{
			"shared_api.gotmpl",
			"shared/api/inventory_{{ .Name }}.go",
		},
		{
			"ports.gotmpl",
			"internal/inventory/{{ .Name }}_ports.go",
		},
		{
			"model.gotmpl",
			"internal/inventory/{{ .Name }}_model.go",
		},
		{
			"service_internal_test.gotmpl",
			"internal/inventory/{{ .Name }}_service_internal_test.go",
		},
		{
			"service_test.gotmpl",
			"internal/inventory/{{ .Name }}_service_test.go",
		},
		{
			"service.gotmpl",
			"internal/inventory/{{ .Name }}_service.go",
		},
		{
			"repo_sqlite.gotmpl",
			"internal/inventory/repo/sqlite/{{ .Name }}.go",
		},
		{
			"repo_sqlite_test.gotmpl",
			"internal/inventory/repo/sqlite/{{ .Name }}_test.go",
		},
	}

	var err error

	funcsMap := sprig.FuncMap()
	funcsMap["pascalcase"] = PascalCase
	funcsMap["camelcase"] = CamelCase

	t := template.New("")
	t = t.Funcs(funcsMap)
	t, err = t.ParseFS(templateFS, "tmpl/*.gotmpl")
	die(err)

	args := struct {
		Name                   string
		PluralName             string
		ObjectType             string
		ObjectEmbedded         bool
		ObjectNamePropertyName string
		HasProject             bool
	}{
		Name:                   name,
		PluralName:             *pluralName,
		ObjectType:             *objectType,
		ObjectEmbedded:         objectEmbedded,
		ObjectNamePropertyName: *objectNamePropertyName,
		HasProject:             !*omitProject,
	}

	for _, target := range targets {
		func() {
			filename := strings.Builder{}

			filenameTmpl, err := template.New("name").Funcs(funcsMap).Parse(target.TargetName)
			die(err)

			err = filenameTmpl.Execute(&filename, args)
			die(err)

			buf := bytes.Buffer{}

			_, err = buf.WriteString(generatedByPreamble)
			die(err)

			err = t.ExecuteTemplate(&buf, target.TemplateName, args)
			die(err)

			formattedSource, err := format.Source(buf.Bytes())
			die(err)

			err = os.WriteFile(filename.String(), formattedSource, 0o600)
			die(err)
		}()
	}
}

func die(err error) {
	if err != nil {
		panic(err)
	}
}
