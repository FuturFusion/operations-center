package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type {{ .Name | camelcase }} struct {
	db sqlite.DBTX
}

var _ inventory.{{ .Name | pascalcase }}Repo = &{{ .Name | camelcase }}{}

func New{{ .Name | pascalcase }}(db sqlite.DBTX) *{{ .Name | camelcase }} {
	return &{{ .Name | camelcase }}{
		db: db,
	}
}

func (r {{ .Name | camelcase }}) Create(ctx context.Context, in inventory.{{ .Name | pascalcase }}) (inventory.{{ .Name | pascalcase }}, error) {
	const sqlStmt = `
{{- if .IsServerResource }}
WITH _server AS (
  SELECT clusters.name AS cluster_name FROM servers INNER JOIN clusters ON servers.cluster_id = clusters.id WHERE servers.name = :server_name
)
{{- end }}
INSERT INTO {{ .PluralName }} ({{ .ResourceForeignKey }}_name, {{ if .HasProject }}project_name, {{ end -}}{{ if .HasParent }}{{ .ParentName }}_name, {{ end -}} name {{- range .ExtraAttributes }}, {{ .Name }} {{- end}}, object, last_updated)
VALUES(:{{ .ResourceForeignKey }}_name, {{ if .HasProject }}:project_name, {{ end -}}{{ if .HasParent }}:{{ .ParentName }}_name, {{ end -}} :name {{- range .ExtraAttributes }}, :{{ .Name }} {{- end}}, :object, :last_updated)
RETURNING id, {{ if .IsServerResource }}(SELECT cluster_name FROM _server) as cluster_name, {{ end -}} {{ .ResourceForeignKey }}_name, {{ if .HasProject }}project_name, {{ end -}}{{ if .HasParent }}{{ .ParentName }}_name, {{ end -}} name {{- range .ExtraAttributes }}, {{ .Name }} {{- end}}, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.{{ .Name | pascalcase }}{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("{{ .ResourceForeignKey }}_name", in.{{ .ResourceForeignKey | pascalcase }}),
{{- if .HasProject }}
		sql.Named("project_name", in.ProjectName),
{{- end }}
{{- if .HasParent }}
		sql.Named("{{ .ParentName }}_name", in.{{ .ParentName | pascalcase }}Name),
{{- end }}
		sql.Named("name", in.Name),
{{- range .ExtraAttributes }}
		sql.Named("{{ .Name }}", in.{{ .Name | pascalcase }}),
{{- end}}
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.{{ .Name | pascalcase }}{}, sqlite.MapErr(row.Err())
	}

	return scan{{ .Name | pascalcase }}(row)
}

func (r {{ .Name | camelcase }}) GetAllIDsWithFilter(ctx context.Context, filter inventory.{{ .Name | pascalcase }}Filter) ([]int, error) {
	const sqlStmt = `
SELECT {{ .PluralName }}.id
FROM {{ .PluralName }}
  INNER JOIN {{ .ResourceForeignKey }}s ON {{ .PluralName }}.{{ .ResourceForeignKey }}_name = {{ .ResourceForeignKey }}s.name
{{- if .IsServerResource }}
  INNER JOIN clusters ON servers.cluster_id = clusters.id
{{- end }}
WHERE true
%s
ORDER BY {{ .PluralName }}.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster`)
		args = append(args, sql.Named("cluster", filter.Cluster))
	}

{{ if .IsServerResource }}
	if filter.Server != nil {
		whereClause = append(whereClause, ` AND servers.name = :server`)
		args = append(args, sql.Named("server", filter.Server))
	}
{{ end }}

{{ if .HasProject }}
	if filter.Project != nil {
		whereClause = append(whereClause, ` AND {{ .PluralName }}.project_name = :project`)
		args = append(args, sql.Named("project", filter.Project))
	}
{{ end }}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []int
	for rows.Next() {
		var id int
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (r {{ .Name | camelcase }}) GetByID(ctx context.Context, id int) (inventory.{{ .Name | pascalcase }}, error) {
	const sqlStmt = `
SELECT
  {{ .PluralName }}.id, {{ if .IsServerResource }}clusters.name as cluster_name, {{ end -}} {{ .PluralName }}.{{ .ResourceForeignKey }}_name, {{ if .HasProject }}{{ .PluralName }}.project_name, {{ end -}}{{ if .HasParent }}{{ .PluralName }}.{{ .ParentName }}_name, {{ end -}} {{ .PluralName }}.name {{- range .ExtraAttributes }}, {{ $.PluralName }}.{{ .Name }} {{- end}}, {{ .PluralName }}.object, {{ .PluralName }}.last_updated
FROM
  {{ .PluralName }}
{{- if .IsServerResource }}
  INNER JOIN servers ON {{ .PluralName }}.server_name = servers.name
  INNER JOIN clusters ON servers.cluster_id = clusters.id
{{- end }}
WHERE {{ .PluralName }}.id=:id;
`

	row := r.db.QueryRowContext(ctx, sqlStmt, sql.Named("id", id))
	if row.Err() != nil {
		return inventory.{{ .Name | pascalcase }}{}, sqlite.MapErr(row.Err())
	}

	return scan{{ .Name | pascalcase }}(row)
}

func (r {{ .Name | camelcase }}) DeleteByID(ctx context.Context, id int) error {
	const sqlStmt = `DELETE FROM {{ .PluralName }} WHERE id=:id;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("id", id))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r {{ .Name | camelcase }}) DeleteBy{{ .ResourceForeignKey | pascalcase }}(ctx context.Context, {{ .ResourceForeignKey }} string) error {
	const sqlStmt = `DELETE FROM {{ .PluralName }} WHERE {{ .ResourceForeignKey }}_name=:{{ .ResourceForeignKey }};`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("{{ .ResourceForeignKey }}", {{ .ResourceForeignKey }}))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r {{ .Name | camelcase }}) UpdateByID(ctx context.Context, in inventory.{{ .Name | pascalcase }}) (inventory.{{ .Name | pascalcase }}, error) {
	const sqlStmt = `
{{- if .IsServerResource }}
WITH _server AS (
  SELECT clusters.name AS cluster_name FROM servers INNER JOIN clusters ON servers.cluster_id=clusters.id WHERE servers.name=:server_name
)
{{- end }}
UPDATE {{ .PluralName }} SET {{ .ResourceForeignKey }}_name=:{{ .ResourceForeignKey }}_name, {{ if .HasProject }}project_name=:project_name, {{ end -}}{{ if .HasParent }}{{ .ParentName }}_name=:{{ .ParentName }}_name, {{ end -}} name=:name {{- range .ExtraAttributes }}, {{ .Name }}=:{{ .Name }} {{- end}}, object=:object, last_updated=:last_updated
WHERE id=:id
RETURNING id, {{ if .IsServerResource }}(SELECT cluster_name FROM _server) as cluster_name, {{ end -}} {{ .ResourceForeignKey }}_name, {{ if .HasProject }}project_name, {{ end -}}{{ if .HasParent }}{{ .ParentName }}_name, {{ end -}} name {{- range .ExtraAttributes }}, {{ .Name }} {{- end}}, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.{{ .Name | pascalcase }}{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("id", in.ID),
		sql.Named("{{ .ResourceForeignKey }}_name", in.{{ .ResourceForeignKey | pascalcase }}),
{{- if .HasProject }}
		sql.Named("project_name", in.ProjectName),
{{- end }}
{{- if .HasParent }}
		sql.Named("{{ .ParentName }}_name", in.{{ .ParentName | pascalcase }}Name),
{{- end }}
		sql.Named("name", in.Name),
{{- range .ExtraAttributes }}
		sql.Named("{{ .Name }}", in.{{ .Name | pascalcase }}),
{{- end}}
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.{{ .Name | pascalcase }}{}, sqlite.MapErr(row.Err())
	}

	return scan{{ .Name | pascalcase }}(row)
}

func scan{{ .Name | pascalcase }}(row interface{ Scan(dest ...any) error }) (inventory.{{ .Name | pascalcase }}, error) {
	var object []byte
	var {{ .Name | camelcase }} inventory.{{ .Name | pascalcase }}

	err := row.Scan(
		&{{ .Name | camelcase }}.ID,
{{- if .IsServerResource }}
		&{{ .Name | camelcase }}.Cluster,
{{- end }}
		&{{ .Name | camelcase }}.{{ .ResourceForeignKey | pascalcase }},
{{- if .HasProject }}
		&{{ .Name | camelcase }}.ProjectName,
{{- end }}
{{- if .HasParent }}
		&{{ .Name | camelcase }}.{{ .ParentName | pascalcase }}Name,
{{- end }}
		&{{ .Name | camelcase }}.Name,
{{- range .ExtraAttributes }}
		&{{ $.Name | camelcase }}.{{ .Name | pascalcase }},
{{- end}}
		&object,
		&{{ .Name | camelcase }}.LastUpdated,
	)
	if err != nil {
		return inventory.{{ .Name | pascalcase }}{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &{{ .Name | camelcase }}.Object)
	if err != nil {
		return inventory.{{ .Name | pascalcase }}{}, err
	}

	return {{ .Name | camelcase }}, nil
}
