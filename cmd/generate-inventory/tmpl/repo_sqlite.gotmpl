package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type {{ .Name | camelcase }} struct {
	db sqlite.DBTX
}

var _ inventory.{{ .Name | pascalcase }}Repo = &{{ .Name | camelcase }}{}

func New{{ .Name | pascalcase }}(db sqlite.DBTX) *{{ .Name | camelcase }} {
	return &{{ .Name | camelcase }}{
		db: db,
	}
}

func (r {{ .Name | camelcase }}) Create(ctx context.Context, in inventory.{{ .Name | pascalcase }}) (inventory.{{ .Name | pascalcase }}, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id {{ if .ServerIDByLocation -}}, (
    SELECT servers.id FROM clusters
      LEFT JOIN servers ON servers.cluster_id = clusters.id
    WHERE clusters.name = :cluster_name AND servers.name = :server_name
  ) AS server_id {{ end -}}
  FROM clusters WHERE clusters.name = :cluster_name
)
INSERT INTO {{ .PluralName }} (uuid, cluster_id, {{ if .ServerIDByLocation -}} server_id, {{ end -}} {{ if .HasProject }}project_name, {{ end -}}{{ if .HasParent }}{{ .ParentName }}_name, {{ end -}} name {{- range .ExtraAttributes }}, {{ .Name }} {{- end}}, object, last_updated)
VALUES (:uuid, (SELECT cluster_id FROM _lookup), {{ if .ServerIDByLocation -}} (SELECT server_id FROM _lookup), {{ end -}} {{ if .HasProject -}} :project_name, {{ end -}}{{ if .HasParent }}:{{ .ParentName }}_name, {{ end -}} :name {{- range .ExtraAttributes }}, :{{ .Name }} {{- end}}, :object, :last_updated)
RETURNING id, :uuid, :cluster_name, {{ if .ServerIDByLocation -}} :server_name, {{ end -}} {{ if .HasProject }}project_name, {{ end -}}{{ if .HasParent }}{{ .ParentName }}_name, {{ end -}} name {{- range .ExtraAttributes }}, {{ .Name }} {{- end}}, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.{{ .Name | pascalcase }}{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("uuid", in.UUID),
		sql.Named("cluster_name", in.Cluster),
{{- if .ServerIDByLocation }}
		sql.Named("server_name", in.Server),
{{- end }}
{{- if .HasProject }}
		sql.Named("project_name", in.ProjectName),
{{- end }}
{{- if .HasParent }}
		sql.Named("{{ .ParentName }}_name", in.{{ .ParentName | pascalcase }}Name),
{{- end }}
		sql.Named("name", in.Name),
{{- range .ExtraAttributes }}
		sql.Named("{{ .Name }}", in.{{ .Name | pascalcase }}),
{{- end}}
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.{{ .Name | pascalcase }}{}, sqlite.MapErr(row.Err())
	}

	return scan{{ .Name | pascalcase }}(row)
}

func (r {{ .Name | camelcase }}) GetAllWithFilter(ctx context.Context, filter inventory.{{ .Name | pascalcase }}Filter) (inventory.{{ .PluralName | pascalcase }}, error) {
	const sqlStmt = `
SELECT
  {{ .PluralName }}.id, {{ .PluralName }}.uuid, clusters.name, {{ if .ServerIDByLocation -}} servers.name, {{ end -}} {{ if .HasProject -}} {{ .PluralName }}.project_name, {{ end -}}{{ if .HasParent -}} {{ .PluralName }}.{{ .ParentName }}_name, {{ end -}} {{ .PluralName }}.name {{- range .ExtraAttributes }}, {{ $.PluralName }}.{{ .Name }} {{- end}}, {{ .PluralName }}.object, {{ .PluralName }}.last_updated
FROM {{ .PluralName }}
  INNER JOIN clusters ON {{ .PluralName }}.cluster_id = clusters.id
{{- if .ServerIDByLocation }}
  INNER JOIN servers ON {{ .PluralName }}.server_id = servers.id
{{- end }}
WHERE true
%s
ORDER BY clusters.name, {{ if .ServerIDByLocation -}} servers.name, {{ end -}} {{ .PluralName }}.name
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

{{ if .ServerIDByLocation }}
	if filter.Server != nil {
		whereClause = append(whereClause, ` AND servers.name = :server_name`)
		args = append(args, sql.Named("server_name", filter.Server))
	}
{{ end }}

{{ if .HasProject }}
	if filter.Project != nil {
		whereClause = append(whereClause, ` AND {{ .PluralName }}.project_name = :project`)
		args = append(args, sql.Named("project", filter.Project))
	}
{{ end }}

	if filter.Name != nil {
		whereClause = append(whereClause, ` AND {{ .PluralName }}.name = :name`)
		args = append(args, sql.Named("name", filter.Name))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var {{ .PluralName | camelcase }} inventory.{{ .PluralName | pascalcase }}
	for rows.Next() {
		var {{ .Name | camelcase }} inventory.{{ .Name | pascalcase }}
		{{ .Name | camelcase }}, err = scan{{ .Name | pascalcase }}(rows)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		{{ .PluralName | camelcase }} = append({{ .PluralName | camelcase }}, {{ .Name | camelcase }})
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return {{ .PluralName | camelcase }}, nil
}

func (r {{ .Name | camelcase }}) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.{{ .Name | pascalcase }}Filter) ([]uuid.UUID, error) {
	const sqlStmt = `
SELECT {{ .PluralName }}.uuid
FROM {{ .PluralName }}
  INNER JOIN clusters ON {{ .PluralName }}.cluster_id = clusters.id
{{- if .ServerIDByLocation }}
  INNER JOIN servers ON {{ .PluralName }}.server_id = servers.id
{{- end }}
WHERE true
%s
ORDER BY {{ .PluralName }}.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

{{ if .ServerIDByLocation }}
	if filter.Server != nil {
		whereClause = append(whereClause, ` AND servers.name = :server_name`)
		args = append(args, sql.Named("server_name", filter.Server))
	}
{{ end }}

{{ if .HasProject }}
	if filter.Project != nil {
		whereClause = append(whereClause, ` AND {{ .PluralName }}.project_name = :project`)
		args = append(args, sql.Named("project", filter.Project))
	}
{{ end }}

	if filter.Name != nil {
		whereClause = append(whereClause, ` AND {{ .PluralName }}.name = :name`)
		args = append(args, sql.Named("name", filter.Name))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (r {{ .Name | camelcase }}) GetByUUID(ctx context.Context, id uuid.UUID) (inventory.{{ .Name | pascalcase }}, error) {
	const sqlStmt = `
SELECT
  {{ .PluralName }}.id, {{ .PluralName }}.uuid, clusters.name, {{ if .ServerIDByLocation -}} servers.name, {{ end -}} {{ if .HasProject -}} {{ .PluralName }}.project_name, {{ end -}}{{ if .HasParent -}} {{ .PluralName }}.{{ .ParentName }}_name, {{ end -}} {{ .PluralName }}.name {{- range .ExtraAttributes }}, {{ $.PluralName }}.{{ .Name }} {{- end}}, {{ .PluralName }}.object, {{ .PluralName }}.last_updated
FROM
  {{ .PluralName }}
  INNER JOIN clusters ON {{ .PluralName }}.cluster_id = clusters.id
{{- if .ServerIDByLocation }}
  INNER JOIN servers ON {{ .PluralName }}.server_id = servers.id
{{- end }}
WHERE {{ .PluralName }}.uuid=:uuid;
`

	row := r.db.QueryRowContext(ctx, sqlStmt, sql.Named("uuid", id))
	if row.Err() != nil {
		return inventory.{{ .Name | pascalcase }}{}, sqlite.MapErr(row.Err())
	}

	return scan{{ .Name | pascalcase }}(row)
}

func (r {{ .Name | camelcase }}) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	const sqlStmt = `DELETE FROM {{ .PluralName }} WHERE uuid=:uuid;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("uuid", id))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r {{ .Name | camelcase }}) DeleteByClusterName(ctx context.Context, cluster string) error {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id as cluster_id from clusters where name = :cluster_name
)
DELETE FROM {{ .PluralName }} WHERE cluster_id=(SELECT cluster_id FROM _lookup);`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("cluster_name", cluster))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r {{ .Name | camelcase }}) UpdateByUUID(ctx context.Context, in inventory.{{ .Name | pascalcase }}) (inventory.{{ .Name | pascalcase }}, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id {{ if .ServerIDByLocation -}}, (
    SELECT servers.id FROM clusters
      LEFT JOIN servers ON servers.cluster_id = clusters.id
    WHERE clusters.name = :cluster_name AND servers.name = :server_name
  ) AS server_id {{ end -}}
  FROM clusters WHERE clusters.name = :cluster_name
)
UPDATE {{ .PluralName }} SET uuid=:uuid, cluster_id=(SELECT cluster_id FROM _lookup), {{ if .ServerIDByLocation -}} server_id=(SELECT server_id FROM _lookup), {{ end -}} {{ if .HasProject -}} project_name=:project_name, {{ end -}} {{ if .HasParent -}} {{ .ParentName }}_name=:{{ .ParentName }}_name, {{ end -}} name=:name {{- range .ExtraAttributes }}, {{ .Name }}=:{{ .Name }} {{- end}}, object=:object, last_updated=:last_updated
WHERE uuid=:uuid
RETURNING id, :uuid, :cluster_name, {{ if .ServerIDByLocation -}} :server_name, {{ end -}} {{ if .HasProject }}project_name, {{ end -}}{{ if .HasParent }}{{ .ParentName }}_name, {{ end -}} name {{- range .ExtraAttributes }}, {{ .Name }} {{- end}}, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.{{ .Name | pascalcase }}{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("uuid", in.UUID),
		sql.Named("cluster_name", in.Cluster),
{{- if .ServerIDByLocation }}
		sql.Named("server_name", in.Server),
{{- end }}
{{- if .HasProject }}
		sql.Named("project_name", in.ProjectName),
{{- end }}
{{- if .HasParent }}
		sql.Named("{{ .ParentName }}_name", in.{{ .ParentName | pascalcase }}Name),
{{- end }}
		sql.Named("name", in.Name),
{{- range .ExtraAttributes }}
		sql.Named("{{ .Name }}", in.{{ .Name | pascalcase }}),
{{- end}}
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.{{ .Name | pascalcase }}{}, sqlite.MapErr(row.Err())
	}

	return scan{{ .Name | pascalcase }}(row)
}

func scan{{ .Name | pascalcase }}(row interface{ Scan(dest ...any) error }) (inventory.{{ .Name | pascalcase }}, error) {
	var object []byte
	var {{ .Name | camelcase }} inventory.{{ .Name | pascalcase }}

	err := row.Scan(
		&{{ .Name | camelcase }}.ID,
		&{{ .Name | camelcase }}.UUID,
		&{{ .Name | camelcase }}.Cluster,
{{- if .ServerIDByLocation }}
    &{{ .Name | camelcase }}.Server,
{{- end }}
{{- if .HasProject }}
		&{{ .Name | camelcase }}.ProjectName,
{{- end }}
{{- if .HasParent }}
		&{{ .Name | camelcase }}.{{ .ParentName | pascalcase }}Name,
{{- end }}
		&{{ .Name | camelcase }}.Name,
{{- range .ExtraAttributes }}
		&{{ $.Name | camelcase }}.{{ .Name | pascalcase }},
{{- end}}
		&object,
		&{{ .Name | camelcase }}.LastUpdated,
	)
	if err != nil {
		return inventory.{{ .Name | pascalcase }}{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &{{ .Name | camelcase }}.Object)
	if err != nil {
		return inventory.{{ .Name | pascalcase }}{}, err
	}

	return {{ .Name | camelcase }}, nil
}
