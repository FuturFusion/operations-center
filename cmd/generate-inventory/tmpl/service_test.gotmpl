package inventory_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func Test{{ .Name | pascalcase }}Service_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.{{ .PluralName | pascalcase }}
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.{{ .PluralName | pascalcase }}{
				inventory.{{ .Name | pascalcase }}{
					Name: "one",
				},
				inventory.{{ .Name | pascalcase }}{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.{{ .PluralName | pascalcase }}{
				inventory.{{ .Name | pascalcase }}{
					Name: "one",
				},
				inventory.{{ .Name | pascalcase }}{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.{{ .PluralName | pascalcase }}{
				inventory.{{ .Name | pascalcase }}{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.{{ .PluralName | pascalcase }}{
				inventory.{{ .Name | pascalcase }}{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.{{ .PluralName | pascalcase }}{
				inventory.{{ .Name | pascalcase }}{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, i ...interface{}) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:             "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.{{ .Name | pascalcase }}Filter) (inventory.{{ .PluralName | pascalcase }}, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, nil, nil, {{ if .HasParent }}nil, {{ end -}} inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			{{ .Name | camelcase }}, err := {{ .Name | camelcase }}Svc.GetAllWithFilter(context.Background(), inventory.{{ .Name | pascalcase }}Filter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, {{ .Name | camelcase }}, tc.count)
		})
	}
}

func Test{{ .Name | pascalcase }}Service_GetAllUUIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                       string
		filterExpression           *string
		repoGetAllUUIDsWithFilter    []uuid.UUID
		repoGetAllUUIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name: "success - with filter expression",
			filterExpression: ptr.To(`UUID == "6c652183-8d93-4c7d-9510-cd2ae54f31fd"`),
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: func(tt require.TestingT, err error, i ...interface{}) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:             "error - repo",
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.{{ .Name | pascalcase }}Filter) ([]uuid.UUID, error) {
					return tc.repoGetAllUUIDsWithFilter, tc.repoGetAllUUIDsWithFilterErr
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, nil, nil, {{ if .HasParent }}nil, {{ end -}} inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			{{ .Name | camelcase }}UUIDs, err := {{ .Name | camelcase }}Svc.GetAllUUIDsWithFilter(context.Background(), inventory.{{ .Name | pascalcase }}Filter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, {{ .Name | camelcase }}UUIDs, tc.count)
		})
	}
}

func Test{{ .Name | pascalcase }}Service_GetByUUID(t *testing.T) {
	tests := []struct {
		name                string
		idArg               uuid.UUID
		repoGetByUUID{{ .Name | pascalcase }} inventory.{{ .Name | pascalcase }}
		repoGetByUUIDErr      error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				UUID:          uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
{{- if .HasProject }}
				ProjectName: "one",
{{- end }}
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "parent one",
{{- end }}
				Name:        "one",
				Object:      incusapi.{{ .ObjectType | pascalcase }}{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.{{ .Name | pascalcase }}, error) {
					return tc.repoGetByUUID{{ .Name | pascalcase }}, tc.repoGetByUUIDErr
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, nil, nil, {{ if .HasParent }}nil, {{ end -}} inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			{{ .Name | camelcase }}, err := {{ .Name | camelcase }}Svc.GetByUUID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByUUID{{ .Name | pascalcase }}, {{ .Name | camelcase }})
		})
	}
}

func Test{{ .Name | pascalcase }}Service_ResyncByUUID(t *testing.T) {
	tests := []struct {
		name                     string
		clusterSvcGetByIDCluster provisioning.Cluster
		clusterSvcGetByIDErr     error
		{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName    incusapi.{{ .ObjectType | pascalcase }}
		{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByNameErr error
		repoGetByUUID{{ .Name | pascalcase }} inventory.{{ .Name | pascalcase }}
		repoGetByUUIDErr    error
		repoUpdateByUUIDErr error
		repoDeleteByUUIDErr error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByUUID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				UUID:     uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:  "one",
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName: incusapi.{{ .ObjectType | pascalcase }}{
{{- if .ObjectEmbedded }}
				{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
					{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
						{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
					},
{{- end }}
{{- if .ServerIDByLocation }}
					Location:  "one",
{{- end }}
{{- if .HasProject }}
					Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
				},
{{- end }}
			},

			assertErr: require.NoError,
		},
		{
			name: "success - {{ .Name | camelcase }} get by name - not found",
			repoGetByUUID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				UUID:     uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:  "one",
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - {{ .Name | camelcase }} get by UUID",
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByUUID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				UUID:     uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:  "one",
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - {{ .Name | camelcase }} get by name",
			repoGetByUUID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				UUID:     uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:  "one",
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - {{ .Name | camelcase }} get by name - not found - delete by uuid",
			repoGetByUUID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				UUID:     uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:  "one",
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByNameErr: domain.ErrNotFound,
			repoDeleteByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByUUID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				UUID:     uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:  "one",
				Name:     "", // invalid
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName: incusapi.{{ .ObjectType | pascalcase }}{
{{- if .ObjectEmbedded }}
				{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
					{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
						{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
					},
{{- end }}
{{- if .ServerIDByLocation }}
					Location:  "one",
{{- end }}
{{- if .HasProject }}
					Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
				},
{{- end }}
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by UUID",
			repoGetByUUID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				UUID:     uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:  "one",
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName: incusapi.{{ .ObjectType | pascalcase }}{
{{- if .ObjectEmbedded }}
				{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
					{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
						{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
					},
{{- end }}
{{- if .ServerIDByLocation }}
					Location:  "one",
{{- end }}
{{- if .HasProject }}
					Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
				},
{{- end }}
			},
			repoUpdateByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.{{ .Name | pascalcase }}, error) {
					return tc.repoGetByUUID{{ .Name | pascalcase }}, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, {{ .Name | camelcase }} inventory.{{ .Name | pascalcase }}) (inventory.{{ .Name | pascalcase }}, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), {{ .Name | camelcase }}.LastUpdated)
					return inventory.{{ .Name | pascalcase }}{}, tc.repoUpdateByUUIDErr
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error{
					return tc.repoDeleteByUUIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			{{ .Name | camelcase }}Client := &serverMock.{{ .Name | pascalcase }}ServerClientMock{
				Get{{ .Name | pascalcase }}ByNameFunc: func(ctx context.Context, connectionURL string, {{- if .HasParent }}{{ .ParentName | camelcase }}Name string, {{ end -}} {{ .Name | camelcase }}Name string {{- range .ExtraAttributes }}, {{ $.Name | camelcase }}{{ .Name | pascalcase }} {{ .Type }} {{- end}}) (incusapi.{{ .ObjectType | pascalcase }}, error) {
					require.Equal(t, tc.repoGetByUUID{{ .Name | pascalcase }}.Name, {{ .Name | camelcase }}Name)
{{- if .HasParent }}
					require.Equal(t, "{{ .ParentName }}", {{ .ParentName | camelcase }}Name)
{{- end }}
					return tc.{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName, tc.{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByNameErr
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, clusterSvc, {{ .Name | camelcase }}Client, {{ if .HasParent }}nil, {{ end -}} inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := {{ .Name | camelcase }}Svc.ResyncByUUID(context.Background(), uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`))

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func Test{{ .Name | pascalcase }}Service_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                              string
		clusterSvcGetByIDCluster            provisioning.Cluster
		clusterSvcGetByIDErr               error
{{- if .HasParent }}
		{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }} []incusapi.{{ .ParentObjectType | pascalcase }}
		{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}Err error
{{- end }}
		{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}        []incusapi.{{ .ObjectType | pascalcase }}
		{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}Err     error
		repoDeleteByClusterNameErr        error
		repoCreateErr                     error
		serviceOptions                    []inventory.{{ .Name | pascalcase }}ServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .ServerIDByLocation }}
						Location:  "one",
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},

			assertErr: require.NoError,
		},
{{- if .HasParent }}
		{
			name: "success - with parent filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
				{
					Name: "filtered",
				},
			},
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .ServerIDByLocation }}
						Location:  "one",
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},
			serviceOptions: []inventory.{{ .Name | pascalcase }}ServiceOption{
				inventory.{{ .Name | pascalcase }}WithParentFilter(func(parent incusapi.{{ .ParentObjectType | pascalcase }}) bool {
					return parent.Name == "filtered"
				}),
			},

			assertErr: require.NoError,
		},
{{- end }}
		{
			name: "success - with sync filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .ServerIDByLocation }}
						Location:  "one",
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} filtered",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .ServerIDByLocation }}
						Location:  "one",
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},
			serviceOptions: []inventory.{{ .Name | pascalcase }}ServiceOption{
				inventory.{{ .Name | pascalcase }}WithSyncFilter(func({{ .Name | camelcase }} inventory.{{ .Name | pascalcase }}) bool{
					return {{ .Name | camelcase }}.Name == "{{ .Name | camelcase }} filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name: "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
{{- if .HasParent }}
		{
			name: "error - {{ .ParentName | camelcase }} client get {{ .ParentPluralName | pascalcase }}",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}Err: boom.Error,

			assertErr: boom.ErrorIs,
		},
{{- end }}
		{
			name: "error - {{ .Name | camelcase }} client get {{ .PluralName | pascalcase }}",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}Err: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - {{ .PluralName }} delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .ServerIDByLocation }}
						Location:  "one",
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "", // invalid
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .ServerIDByLocation }}
						Location:  "one",
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - {{ .Name | camelcase }} create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name:  "cluster-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .ServerIDByLocation }}
						Location:  "one",
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, {{ .Name | camelcase }} inventory.{{ .Name | pascalcase }}) (inventory.{{ .Name | pascalcase }}, error) {
					return inventory.{{ .Name | pascalcase }}{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}
{{- if .HasParent }}

			{{ .ParentName | camelcase }}Client := &serverMock.{{ .ParentName | pascalcase }}ServerClientMock{
				Get{{ .ParentPluralName | pascalcase }}Func: func(ctx context.Context, connectionURL string) ([]incusapi.{{ .ParentObjectType | pascalcase }}, error) {
					return tc.{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}, tc.{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}Err
				},
			}
{{- end }}

			{{ .Name | camelcase }}Client := &serverMock.{{ .Name | pascalcase }}ServerClientMock{
				Get{{ .PluralName | pascalcase }}Func: func(ctx context.Context, connectionURL string {{- if .HasParent }}, {{ .ParentName | camelcase }}Name string {{ end }}) ([]incusapi.{{ .ObjectType | pascalcase }}, error) {
					return tc.{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}, tc.{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}Err
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, clusterSvc, {{ .Name | camelcase }}Client, {{- if .HasParent }}{{ .ParentName | camelcase }}Client, {{- end }}
				append(
					tc.serviceOptions,
					inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...
			)

			// Run test
			err := {{ .Name | camelcase }}Svc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
