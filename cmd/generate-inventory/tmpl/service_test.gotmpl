package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func Test{{ .Name | pascalcase }}Service_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.{{ .Name | pascalcase }}Filter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, nil, nil, nil, {{ if .HasParent }}nil, {{ end -}} inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			{{ .Name | camelcase }}Hostnames, err := {{ .Name | camelcase }}Svc.GetAllIDsWithFilter(context.Background(), inventory.{{ .Name | pascalcase }}Filter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, {{ .Name | camelcase }}Hostnames, tc.count)
		})
	}
}

func Test{{ .Name | pascalcase }}Service_GetByID(t *testing.T) {
	tests := []struct {
		name                string
		idArg               int
		repoGetByID{{ .Name | pascalcase }} inventory.{{ .Name | pascalcase }}
		repoGetByIDErr      error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				ID:          1,
				ServerID:    1,
{{- if .HasProject }}
				ProjectName: "one",
{{- end }}
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "parent one",
{{- end }}
				Name:        "one",
				Object:      incusapi.{{ .ObjectType | pascalcase }}{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.{{ .Name | pascalcase }}, error) {
					return tc.repoGetByID{{ .Name | pascalcase }}, tc.repoGetByIDErr
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, nil, nil, nil, {{ if .HasParent }}nil, {{ end -}} inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			{{ .Name | camelcase }}, err := {{ .Name | camelcase }}Svc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByID{{ .Name | pascalcase }}, {{ .Name | camelcase }})
		})
	}
}

func Test{{ .Name | pascalcase }}Service_ResyncByID(t *testing.T) {
	tests := []struct {
		name                               string
		serverSvcGetByIDServer             provisioning.Server
		serverSvcGetByIDErr                error
		{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName    incusapi.{{ .ObjectType | pascalcase }}
		{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByNameErr error
		repoGetByID{{ .Name | pascalcase }}                inventory.{{ .Name | pascalcase }}
		repoGetByIDErr                     error
		repoUpdateByIDErr                  error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				ID:       1,
				ServerID: 1,
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName: incusapi.{{ .ObjectType | pascalcase }}{
{{- if .ObjectEmbedded }}
				{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
					{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
						{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
					},
{{- end }}
{{- if .HasProject }}
					Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
				},
{{- end }}
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - {{ .Name | camelcase }} get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server get by ID",
			repoGetByID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				ID:       1,
				ServerID: 1,
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			serverSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - {{ .Name | camelcase }} get by name",
			repoGetByID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				ID:       1,
				ServerID: 1,
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				ID:       1,
				ServerID: 1,
				Name:     "", // invalid
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName: incusapi.{{ .ObjectType | pascalcase }}{
{{- if .ObjectEmbedded }}
				{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
					{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
						{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
					},
{{- end }}
{{- if .HasProject }}
					Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
				},
{{- end }}
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByID{{ .Name | pascalcase }}: inventory.{{ .Name | pascalcase }}{
				ID:       1,
				ServerID: 1,
				Name:     "one",
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name: "{{ .ParentName }}",
{{- end }}
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName: incusapi.{{ .ObjectType | pascalcase }}{
{{- if .ObjectEmbedded }}
				{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
					{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
						{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
					},
{{- end }}
{{- if .HasProject }}
					Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
				},
{{- end }}
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.{{ .Name | pascalcase }}, error) {
					return tc.repoGetByID{{ .Name | pascalcase }}, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, {{ .Name | camelcase }} inventory.{{ .Name | pascalcase }}) (inventory.{{ .Name | pascalcase }}, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), {{ .Name | camelcase }}.LastUpdated)
					return inventory.{{ .Name | pascalcase }}{}, tc.repoUpdateByIDErr
				},
			}

			serverSvc := &serviceMock.ServerServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
					require.Equal(t, 1, id)
					return tc.serverSvcGetByIDServer, tc.serverSvcGetByIDErr
				},
			}

			{{ .Name | camelcase }}Client := &serviceMock.{{ .Name | pascalcase }}ServerClientMock{
				Get{{ .Name | pascalcase }}ByNameFunc: func(ctx context.Context, connectionURL string, {{- if .HasParent }}{{ .ParentName | camelcase }}Name string, {{ end -}} {{ .Name | camelcase }}Name string) (incusapi.{{ .ObjectType | pascalcase }}, error) {
					require.Equal(t, tc.repoGetByID{{ .Name | pascalcase }}.Name, {{ .Name | camelcase }}Name)
{{- if .HasParent }}
					require.Equal(t, "{{ .ParentName }}", {{ .ParentName | camelcase }}Name)
{{- end }}
					return tc.{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByName, tc.{{ .Name | camelcase }}ClientGet{{ .Name | pascalcase }}ByNameErr
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, nil, serverSvc, {{ .Name | camelcase }}Client, {{ if .HasParent }}nil, {{ end -}} inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := {{ .Name | camelcase }}Svc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func Test{{ .Name | pascalcase }}Service_SyncAll(t *testing.T) {
	// Includes also SyncCluster and SyncServer
	tests := []struct {
		name                              string
		clusterSvcGetAllClusters          provisioning.Clusters
		clusterSvcGetAllErr               error
		serverSvcGetAllByClusterIDServers provisioning.Servers
		serverSvcGetAllByClusterIDErr     error
		serverSvcGetByIDServer            provisioning.Server
		serverSvcGetByIDErr               error
{{- if .HasParent }}
		{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }} []incusapi.{{ .ParentObjectType | pascalcase }}
		{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}Err error
{{- end }}
		{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}        []incusapi.{{ .ObjectType | pascalcase }}
		{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}Err     error
		repoDeleteByServerIDErr           error
		repoCreateErr                     error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                "error - cluster service get all",
			clusterSvcGetAllErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server service get all by cluster ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server service get by ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
{{- if .HasParent }}
		{
			name: "error - {{ .ParentName | camelcase }} client get {{ .ParentPluralName | pascalcase }}",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}Err: boom.Error,

			assertErr: boom.ErrorIs,
		},
{{- end }}
		{
			name: "error - {{ .Name | camelcase }} client get {{ .PluralName | pascalcase }}",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}Err: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - {{ .PluralName }} delete by server ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},
			repoDeleteByServerIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "", // invalid
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - {{ .Name | camelcase }} create",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
{{- if .HasParent }}
			{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}: []incusapi.{{ .ParentObjectType | pascalcase }}{
				{
					Name: "{{ .ParentName | camelcase }} one",
				},
			},
{{- end }}
			{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}: []incusapi.{{ .ObjectType | pascalcase }}{
				{
{{- if .ObjectEmbedded }}
					{{ .Name | pascalcase }}: incusapi.{{ .Name | pascalcase }}{
{{- end }}
{{- if .UsesEmbeddedPostType }}
						{{ .Name | pascalcase }}Post: incusapi.{{ .Name | pascalcase }}Post{
{{- end }}
							{{ .ObjectNamePropertyName | pascalcase }}: "{{ .Name | camelcase }} one",
{{- if .UsesEmbeddedPostType }}
						},
{{- end }}
{{- if .HasProject }}
						Project: "project one",
{{- end }}
{{- if .ObjectEmbedded }}
					},
{{- end }}
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.{{ .Name | pascalcase }}RepoMock{
				DeleteByServerIDFunc: func(ctx context.Context, serverID int) error {
					return tc.repoDeleteByServerIDErr
				},
				CreateFunc: func(ctx context.Context, {{ .Name | camelcase }} inventory.{{ .Name | pascalcase }}) (inventory.{{ .Name | pascalcase }}, error) {
					return inventory.{{ .Name | pascalcase }}{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ClusterServiceMock{
				GetAllFunc: func(ctx context.Context) (provisioning.Clusters, error) {
					return tc.clusterSvcGetAllClusters, tc.clusterSvcGetAllErr
				},
			}

			serverSvc := &serviceMock.ServerServiceMock{
				GetAllByClusterIDFunc: func(ctx context.Context, clusterID int) (provisioning.Servers, error) {
					return tc.serverSvcGetAllByClusterIDServers, tc.serverSvcGetAllByClusterIDErr
				},
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
					return tc.serverSvcGetByIDServer, tc.serverSvcGetByIDErr
				},
			}
{{- if .HasParent }}

			{{ .ParentName | camelcase }}Client := &serviceMock.{{ .ParentName | pascalcase }}ServerClientMock{
				Get{{ .ParentPluralName | pascalcase }}Func: func(ctx context.Context, connectionURL string) ([]incusapi.{{ .ParentObjectType | pascalcase }}, error) {
					return tc.{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}, tc.{{ .ParentName | camelcase }}ClientGet{{ .ParentPluralName | pascalcase }}Err
				},
			}
{{- end }}

			{{ .Name | camelcase }}Client := &serviceMock.{{ .Name | pascalcase }}ServerClientMock{
				Get{{ .PluralName | pascalcase }}Func: func(ctx context.Context, connectionURL string {{- if .HasParent }}, {{ .ParentName | camelcase }}Name string {{ end }}) ([]incusapi.{{ .ObjectType | pascalcase }}, error) {
					return tc.{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}, tc.{{ .Name | camelcase }}ClientGet{{ .PluralName | pascalcase }}Err
				},
			}

			{{ .Name | camelcase }}Svc := inventory.New{{ .Name | pascalcase }}Service(repo, clusterSvc, serverSvc, {{ .Name | camelcase }}Client, {{ if .HasParent }}{{ .ParentName | camelcase }}Client, {{ end -}} inventory.{{ .Name | pascalcase }}WithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := {{ .Name | camelcase }}Svc.SyncAll(context.Background())

			// Assert
			tc.assertErr(t, err)
		})
	}
}
