package inventory

import (
	"bytes"
	"encoding/json"
	"fmt"
	"strings"
	"text/template"

	"github.com/spf13/cobra"

	"github.com/FuturFusion/operations-center/internal/cli/validate"
	"github.com/FuturFusion/operations-center/internal/client"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/render"
	"github.com/FuturFusion/operations-center/internal/sort"
)

type Cmd{{ .Name | pascalcase }} struct{
	OCClient *client.OperationsCenterClient
}

func (c *Cmd{{ .Name | pascalcase }}) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "{{ .Name | kebabcase }}"
	cmd.Short = "Interact with {{ .PluralName | words }}"
	cmd.Long = `Description:
  Interact with {{ .PluralName | words }}
`

	// Workaround for subcommand usage errors. See: https://github.com/spf13/cobra/issues/706
	cmd.Args = cobra.NoArgs
	cmd.Run = func(cmd *cobra.Command, args []string) { _ = cmd.Usage() }

	// List
	{{ .Name | camelcase }}ListCmd := cmd{{ .Name | pascalcase }}List{
		ocClient: c.OCClient,
	}

	cmd.AddCommand({{ .Name | camelcase }}ListCmd.Command())

	// Show
	{{ .Name | camelcase }}ShowCmd := cmd{{ .Name | pascalcase }}Show{
		ocClient: c.OCClient,
	}

	cmd.AddCommand({{ .Name | camelcase }}ShowCmd.Command())

	return cmd
}

// List {{ .PluralName }}.
type cmd{{ .Name | pascalcase }}List struct {
	ocClient *client.OperationsCenterClient

	flagFilterCluster string
{{- if .ServerIDByLocation }}
	flagFilterServer string
{{- end }}
{{- if .HasProject }}
	flagFilterProject string
{{- end }}
	flagFilterExpression string

	flagColumns string
	flagFormat string
}

{{/*
Since we create a template inside of this template, the syntax becomes somewhat complext.
The basic idea is:
- Dynamically create the list $defaultColumns with the necessary column names
  while respecting the optional fields like Server, ProjectName and ParentName.
- Construct the "defaultColumns" template string by ranging over the $defaultColumn variable.
  While doing so, the curly braces are emitted as literal strings.
- Since we do not want to have a final comma at the end of the list, the last column ("LastUpdated")
  is not added to the list, but literaly after the range in the template.
*/ -}}
{{- $defaultColumns := list "UUID" "Cluster" -}}
{{- if .ServerIDByLocation -}}
{{- $defaultColumns = append $defaultColumns "Server" -}}
{{- end -}}
{{- if .HasProject }}
{{- $defaultColumns = append $defaultColumns "ProjectName" -}}
{{- end }}
{{- if .HasParent }}
{{- $defaultColumns = append $defaultColumns "ParentName" -}}
{{- end }}
{{- $defaultColumns = append $defaultColumns "Name" -}}
const {{ .Name | camelcase }}DefaultColumns = `{{- range $item := $defaultColumns -}} {{- "{{" }} .{{ $item }} {{ "}}" -}}, {{- end -}}{{- "{{ .LastUpdated }}" -}}`

var {{ .Name | camelcase }}ColumnSorters = map[string]sort.ColumnSorter{
	"Cluster": {
		Less: sort.NaturalLess,
	},
{{- if .ServerIDByLocation }}
	"Server": {
		Less: sort.NaturalLess,
	},
{{- end }}
{{- if .HasProject }}
	"ProjectName": {
		Less: sort.NaturalLess,
	},
{{- end }}
{{- if .HasParent }}
	"ParentName": {
		Less: sort.NaturalLess,
	},
{{- end }}
	"Name": {
		Less: sort.NaturalLess,
	},
}

func (c *cmd{{ .Name | pascalcase }}List) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "list"
	cmd.Short = "List available {{ .PluralName }}"
	cmd.Long = `Description:
  List the available {{ .PluralName }}
`

	cmd.RunE = c.Run

	cmd.Flags().StringVar(&c.flagFilterCluster, "cluster", "", "cluster name to filter for")
{{- if .ServerIDByLocation }}
	cmd.Flags().StringVar(&c.flagFilterServer, "server", "", "server name to filter for")
{{- end}}
{{- if .HasProject }}
	cmd.Flags().StringVar(&c.flagFilterProject, "project", "", "project name to filter for")
{{- end}}
	cmd.Flags().StringVar(&c.flagFilterExpression, "filter", "", "filter expression to apply")

	cmd.Flags().StringVarP(&c.flagColumns, "columns", "c", {{ .Name | camelcase }}DefaultColumns, `Comma separated list of columns to print with the respective value in Go Template format`)
	cmd.Flags().StringVarP(&c.flagFormat, "format", "f", "table", `Format (csv|json|table|yaml|compact), use suffix ",noheader" to disable headers and ",header" to enable if demanded, e.g. csv,header`)
	cmd.PreRunE = func(cmd *cobra.Command, _ []string) error {
		return validate.FormatFlag(cmd.Flag("format").Value.String())
	}

	return cmd
}

func (c *cmd{{ .Name | pascalcase }}List) Run(cmd *cobra.Command, args []string) error {
	// Quick checks.
	exit, err := validate.Args(cmd, args, 0, 0)
	if exit {
		return err
	}

	var filter inventory.{{ .Name | pascalcase }}Filter

	if c.flagFilterCluster != "" {
		filter.Cluster = ptr.To(c.flagFilterCluster)
	}
{{- if .ServerIDByLocation }}

	if c.flagFilterServer != "" {
		filter.Server = ptr.To(c.flagFilterServer)
	}
{{- end}}
{{- if .HasProject }}

	if c.flagFilterProject != "" {
		filter.Project = ptr.To(c.flagFilterProject)
	}
{{- end}}

	if c.flagFilterExpression != "" {
		filter.Expression = ptr.To(c.flagFilterExpression)
	}

	{{ .PluralName | camelcase }}, err := c.ocClient.GetWithFilter{{ .PluralName | pascalcase }}(cmd.Context(), filter)
	if err != nil {
		return err
	}

	// Render the table.
	fields := strings.Split(c.flagColumns, ",")

	header := []string{}
	columnSorters := []sort.ColumnSorter{}
	tmpl := template.New("")

	for i, field := range fields {
		title := strings.Trim(field, "{} .")

		fieldTmpl := tmpl.New(title)
		_, err := fieldTmpl.Parse(field)
		if err != nil {
			return err
		}

		header = append(header, title)
		sorter, ok := {{ .Name | camelcase }}ColumnSorters[title]
		if ok {
			sorter.Index = i
			columnSorters = append(columnSorters, sorter)
		}
	}

	data := [][]string{}
	wr := &bytes.Buffer{}

	for _, {{ .Name | camelcase }} := range {{ .PluralName | camelcase }} {
		row := make([]string, len(header))
		for i, field := range header {
			wr.Reset()
			err := tmpl.ExecuteTemplate(wr, field, {{ .Name | camelcase }})
			if err != nil {
				return err
			}

			row[i] = wr.String()
		}

		data = append(data, row)
	}

	sort.ColumnsSort(data, columnSorters)

	return render.Table(cmd.OutOrStdout(), c.flagFormat, header, data, {{ .PluralName | camelcase }})
}

// Show {{ .Name }}.
type cmd{{ .Name | pascalcase }}Show struct{
	ocClient *client.OperationsCenterClient
}

func (c *cmd{{ .Name | pascalcase }}Show) Command() *cobra.Command {
	cmd := &cobra.Command{}
	cmd.Use = "show <uuid>"
	cmd.Short = "Show information about a {{ .Name }}"
	cmd.Long = `Description:
  Show information about a {{ .Name }}.
`

	cmd.RunE = c.Run

	return cmd
}

func (c *cmd{{ .Name | pascalcase }}Show) Run(cmd *cobra.Command, args []string) error {
	// Quick checks.
	exit, err := validate.Args(cmd, args, 1, 1)
	if exit {
		return err
	}

	id := args[0]

	{{ .Name | camelcase }}, err := c.ocClient.Get{{ .Name | pascalcase }}(cmd.Context(), id)
	if err != nil {
		return err
	}

	objectJSON, err := json.MarshalIndent({{ .Name | camelcase }}.Object, "", "  ")
	if err != nil {
		return err
	}

	fmt.Printf("UUID: %s\n", {{ .Name | camelcase }}.UUID.String())
	fmt.Printf("Cluster: %s\n", {{ .Name | camelcase }}.Cluster)
{{- if .ServerIDByLocation }}
	fmt.Printf("Server: %s\n", {{ .Name | camelcase }}.Server)
{{- end }}
{{- if .HasProject }}
	fmt.Printf("Project Name: %s\n", {{ .Name | camelcase }}.ProjectName)
{{- end }}
{{- if .HasParent }}
	fmt.Printf("{{ .ParentName | titlecase }} Name: %s\n", {{ .Name | camelcase }}.{{ .ParentName | pascalcase }}Name)
{{- end }}
	fmt.Printf("Name: %s\n", {{ .Name | camelcase }}.Name)
	fmt.Printf("Last Updated: %s\n", {{ .Name | camelcase }}.LastUpdated.String())
	fmt.Printf("Object:\n%s\n", objectJSON)

	return nil
}
