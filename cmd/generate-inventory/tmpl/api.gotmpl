package api

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/response"
	"github.com/FuturFusion/operations-center/shared/api"
)

type {{ .Name | camelcase }}Handler struct {
	service inventory.{{ .Name | pascalcase }}Service
}

func registerInventory{{ .Name | pascalcase }}Handler(router *http.ServeMux, service inventory.{{ .Name | pascalcase }}Service) {
	handler := &{{ .Name | camelcase }}Handler{
		service: service,
	}

	router.HandleFunc("GET /{$}", response.With(handler.{{ .PluralName | camelcase }}Get))
	router.HandleFunc("GET /{id}", response.With(handler.{{ .Name | camelcase }}Get))
	router.HandleFunc("POST /force-sync", response.With(handler.forceSyncPost))
}

// swagger:operation GET /1.0/inventory/{{ .PluralName }} {{ .PluralName }} {{ .PluralName }}_get
//
//		Get the {{ .Name }}
//
//		Returns a list of {{ .Name }} (list of relative URLs).
//
//		---
//		produces:
//		  - application/json
//		responses:
//		  "200":
//		    description: API {{ .Name }}
//		    schema:
//		      type: object
//		      description: Sync response
//		      properties:
//		        type:
//		          type: string
//		          description: Response type
//		          example: sync
//		        status:
//		          type: string
//		          description: Status description
//		          example: Success
//		        status_code:
//		          type: integer
//		          description: Status code
//		          example: 200
//		        metadata:
//		          type: array
//		          description: List of {{ .Name }}
//	               items:
//	                 type: string
//	               example: |-
//	                 [
//	                   "/1.0/inventory/{{ .PluralName }}/1",
//	                   "/1.0/inventory/{{ .PluralName }}/2"
//	                 ]
//		  "403":
//		    $ref: "#/responses/Forbidden"
//		  "500":
//		    $ref: "#/responses/InternalServerError"
func (i *{{ .Name | camelcase | minuscule }}Handler) {{ .PluralName | camelcase | minuscule }}Get(r *http.Request) response.Response {
	{{ .Name | camelcase | minuscule }}IDs, err := i.service.GetAllIDs(r.Context())
	if err != nil {
		return response.SmartError(err)
	}

	result := make([]string, 0, len({{ .Name | camelcase | minuscule }}IDs))
	for _, id := range {{ .Name | camelcase | minuscule }}IDs {
		result = append(result, fmt.Sprintf("/%s/clusters/%d", api.APIVersion, id))
	}

	return response.SyncResponse(true, result)
}

// swagger:operation GET /1.0/inventory/{{ .PluralName }}/{id} {{ .PluralName }} {{ .Name }}_get
//
//	Get the {{ .Name }}
//
//	Gets a specific {{ .Name }}.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: {{ .Name | pascalcase }}
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          $ref: "#/definitions/{{ .Name | pascalcase }}"
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *{{ .Name | camelcase }}Handler) {{ .Name | camelcase }}Get(r *http.Request) response.Response {
	id, err := strconv.Atoi(r.PathValue("id"))
	if err != nil {
		return response.SmartError(err)
	}

	{{ .Name | camelcase }}, err := i.service.GetByID(r.Context(), id)
	if err != nil {
		return response.SmartError(err)
	}

	return response.SyncResponse(
		true,
		api.{{ .Name | pascalcase }}{
			ID:          {{ .Name | camelcase }}.ID,
			ClusterID:   {{ .Name | camelcase }}.ClusterID,
			ServerID:    {{ .Name | camelcase }}.ServerID,
{{- if .HasProject }}
			ProjectName: {{ .Name | camelcase }}.ProjectName,
{{- end }}
{{- if .HasParent }}
			{{ .ParentName | pascalcase }}Name: {{ .Name | camelcase }}.{{ .ParentName | pascalcase }}Name,
{{- end }}
			Name:        {{ .Name | camelcase }}.Name,
			Object:      {{ .Name | camelcase }}.Object,
			LastUpdated: {{ .Name | camelcase }}.LastUpdated,
		},
	)
}

// swagger:operation POST /1.0/inventory/{{ .PluralName }}/force-sync {{ .PluralName }} {{ .PluralName }}_force_sync_post
//
//	Force sync all
//
//	Force sync of {{ .PluralName }} for all servers in all clusters.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: Empty response
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *{{ .Name | camelcase }}Handler) forceSyncPost(r *http.Request) response.Response {
	err := i.service.SyncAll(r.Context())
	if err != nil {
		return response.SmartError(fmt.Errorf("Failed to sync {{ .PluralName }}: %w", err))
	}

	return response.EmptySyncResponse
}
