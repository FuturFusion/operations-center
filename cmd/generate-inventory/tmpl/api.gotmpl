package api

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/authz"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/response"
	"github.com/FuturFusion/operations-center/shared/api"
)

type {{ .Name | camelcase }}Handler struct {
	service inventory.{{ .Name | pascalcase }}Service
}

func registerInventory{{ .Name | pascalcase }}Handler(router Router, authorizer authz.Authorizer, service inventory.{{ .Name | pascalcase }}Service) {
	handler := &{{ .Name | camelcase }}Handler{
		service: service,
	}

	router.HandleFunc("GET /{$}", response.With(handler.{{ .PluralName | camelcase }}Get, assertPermission(authorizer, authz.ObjectTypeServer, authz.EntitlementCanView)))
	router.HandleFunc("GET /{uuid}", response.With(handler.{{ .Name | camelcase }}Get, assertPermission(authorizer, authz.ObjectTypeServer, authz.EntitlementCanView)))
	router.HandleFunc("POST /{uuid}/resync", response.With(handler.{{ .Name | camelcase }}ResyncPost, assertPermission(authorizer, authz.ObjectTypeServer, authz.EntitlementCanEdit)))
}

// swagger:operation GET /1.0/inventory/{{ .PluralName }} {{ .PluralName }} {{ .PluralName }}_get
//
//	Get the {{ .Name }}
//
//	Returns a list of {{ .Name }} (list of relative URLs).
//
//	---
//	produces:
//	  - application/json
//	parameters:
//	  - in: query
//	    name: cluster
//	    description: Cluster name
//	    type: string
//	    example: cluster
{{- if .ServerIDByLocation }}
//	  - in: query
//	    name: server
//	    description: Server name
//	    type: string
//	    example: localhost
{{- end }}
{{- if .HasProject }}
//	  - in: query
//	    name: project
//	    description: Project name
//	    type: string
//	    example: default
{{- end }}
//	  - in: query
//	    name: filter
//	    description: Filter expression
//	    type: string
//	    example: name == "value"
//	responses:
//	  "200":
//	    description: API {{ .Name }}
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          type: array
//	          description: List of {{ .Name }}
//	               items:
//	                 type: string
//	               example: |-
//	                 [
//	                   "/1.0/inventory/{{ .PluralName }}/1",
//	                   "/1.0/inventory/{{ .PluralName }}/2"
//	                 ]
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"

// swagger:operation GET /1.0/inventory/{{ .PluralName }}?recursion=1 {{ .PluralName }} {{ .PluralName }}_get_recursion
//
//	Get the {{ .PluralName }}
//
//	Returns a list of {{ .PluralName }} (structs).
//
//	---
//	produces:
//	  - application/json
//	parameters:
//	  - in: query
//	    name: cluster
//	    description: Cluster name
//	    type: string
//	    example: cluster
{{- if .ServerIDByLocation }}
//	  - in: query
//	    name: server
//	    description: Server name
//	    type: string
//	    example: localhost
{{- end }}
{{- if .HasProject }}
//	  - in: query
//	    name: project
//	    description: Project name
//	    type: string
//	    example: default
{{- end }}
//	  - in: query
//	    name: filter
//	    description: Filter expression
//	    type: string
//	    example: name == "value"
//	responses:
//	  "200":
//	    description: API {{ .PluralName }}
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          type: array
//	          description: List of {{ .PluralName }}
//	          items:
//	            $ref: "#/definitions/{{ .Name | camelcase }}"
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *{{ .Name | camelcase }}Handler) {{ .PluralName | camelcase }}Get(r *http.Request) response.Response {
	// Parse the recursion field.
	recursion, err := strconv.Atoi(r.FormValue("recursion"))
	if err != nil {
		recursion = 0
	}

	var filter inventory.{{ .Name | pascalcase }}Filter

	if r.URL.Query().Get("cluster") != "" {
		filter.Cluster = ptr.To(r.URL.Query().Get("cluster"))
	}

{{ if .ServerIDByLocation }}
	if r.URL.Query().Get("server") != "" {
		filter.Server = ptr.To(r.URL.Query().Get("server"))
	}
{{ end }}

{{ if .HasProject }}
	if r.URL.Query().Get("project") != "" {
		filter.Project = ptr.To(r.URL.Query().Get("project"))
	}
{{ end }}

	if r.URL.Query().Get("filter") != "" {
		filter.Expression = ptr.To(r.URL.Query().Get("filter"))
	}

	if recursion == 1 {
		// FIXME: Should we require a non empty filter with recursion?
		{{ .PluralName | camelcase }}, err := i.service.GetAllWithFilter(r.Context(), filter)
		if err != nil {
			return response.SmartError(err)
		}

		result := make([]api.{{ .Name | pascalcase }}, 0, len({{ .PluralName | camelcase }}))
		for _, {{ .Name | camelcase }} := range {{ .PluralName | camelcase }} {
			result = append(result, api.{{ .Name | pascalcase }}{
					UUID:        {{ .Name | camelcase }}.UUID,
					Cluster:     {{ .Name | camelcase }}.Cluster,
		{{- if .ServerIDByLocation }}
					Server:      {{ .Name | camelcase }}.Server,
		{{- end }}
		{{- if .HasProject }}
					ProjectName: {{ .Name | camelcase }}.ProjectName,
		{{- end }}
		{{- if .HasParent }}
					{{ .ParentName | pascalcase }}Name: {{ .Name | camelcase }}.{{ .ParentName | pascalcase }}Name,
		{{- end }}
					Name:        {{ .Name | camelcase }}.Name,
					Object:      {{ .Name | camelcase }}.Object,
					LastUpdated: {{ .Name | camelcase }}.LastUpdated,
			})
		}

		return response.SyncResponse(true, result)
	}

	{{ .Name | camelcase }}UUIDs, err := i.service.GetAllUUIDsWithFilter(r.Context(), filter)
	if err != nil {
		return response.SmartError(err)
	}

	result := make([]string, 0, len({{ .Name | camelcase }}UUIDs))
	for _, id := range {{ .Name | camelcase }}UUIDs {
		result = append(result, fmt.Sprintf("/%s/inventory/{{ .Name }}/%d", api.APIVersion, id))
	}

	return response.SyncResponse(true, result)
}

// swagger:operation GET /1.0/inventory/{{ .PluralName }}/{uuid} {{ .PluralName }} {{ .Name }}_get
//
//	Get the {{ .Name }}
//
//	Gets a specific {{ .Name }}.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: {{ .Name | pascalcase }}
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	        metadata:
//	          $ref: "#/definitions/{{ .Name | pascalcase }}"
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *{{ .Name | camelcase }}Handler) {{ .Name | camelcase }}Get(r *http.Request) response.Response {
	id, err := uuid.Parse(r.PathValue("uuid"))
	if err != nil {
		return response.SmartError(err)
	}

	{{ .Name | camelcase }}, err := i.service.GetByUUID(r.Context(), id)
	if err != nil {
		return response.SmartError(err)
	}

	return response.SyncResponse(
		true,
		api.{{ .Name | pascalcase }}{
			UUID:        {{ .Name | camelcase }}.UUID,
			Cluster:     {{ .Name | camelcase }}.Cluster,
{{- if .ServerIDByLocation }}
			Server:      {{ .Name | camelcase }}.Server,
{{- end }}
{{- if .HasProject }}
			ProjectName: {{ .Name | camelcase }}.ProjectName,
{{- end }}
{{- if .HasParent }}
			{{ .ParentName | pascalcase }}Name: {{ .Name | camelcase }}.{{ .ParentName | pascalcase }}Name,
{{- end }}
			Name:        {{ .Name | camelcase }}.Name,
			Object:      {{ .Name | camelcase }}.Object,
			LastUpdated: {{ .Name | camelcase }}.LastUpdated,
		},
	)
}

// swagger:operation POST /1.0/inventory/{{ .PluralName }}/{uuid}/resync {{ .PluralName }} {{ .Name }}_get_resync_post
//
//	Resync the {{ .Name }}
//
//	Resync a specific {{ .Name }}.
//
//	---
//	produces:
//	  - application/json
//	responses:
//	  "200":
//	    description: Empty response
//	    schema:
//	      type: object
//	      description: Sync response
//	      properties:
//	        type:
//	          type: string
//	          description: Response type
//	          example: sync
//	        status:
//	          type: string
//	          description: Status description
//	          example: Success
//	        status_code:
//	          type: integer
//	          description: Status code
//	          example: 200
//	  "403":
//	    $ref: "#/responses/Forbidden"
//	  "500":
//	    $ref: "#/responses/InternalServerError"
func (i *{{ .Name | camelcase }}Handler) {{ .Name | camelcase }}ResyncPost(r *http.Request) response.Response {
	id, err := uuid.Parse(r.PathValue("uuid"))
	if err != nil {
		return response.SmartError(err)
	}

	err = i.service.ResyncByUUID(r.Context(), id)
	if err != nil {
		return response.SmartError(fmt.Errorf("Failed to resync {{ .Name }}: %w", err))
	}

	return response.EmptySyncResponse
}
