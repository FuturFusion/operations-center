package inventory

import (
{{- with .ExtraAttributes }}
	"fmt"
{{- end }}
	"net/url"
	"strings"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
)

type {{ .Name | pascalcase }} struct {
	ID          int
	UUID        uuid.UUID
	Cluster     string
{{- if .ServerIDByLocation }}
	Server      string
{{- end }}
{{- if .HasProject }}
	ProjectName string
{{- end }}
{{- if .HasParent }}
	{{ .ParentName | pascalcase }}Name string
{{- end }}
	Name        string
{{- range .ExtraAttributes }}
	{{ .Name | pascalcase }} {{ .Type }}
{{- end }}
	Object      incusapi.{{ .ObjectType | pascalcase }}
	LastUpdated time.Time
}

func (m *{{ .Name | pascalcase }}) DeriveUUID() *{{ .Name | pascalcase }} {
	identifier := strings.Join([]string{
		m.Cluster,
{{- if .ServerIDByLocation }}
		m.Server,
{{- end }}
{{- if .HasProject }}
		m.ProjectName,
{{- end }}
{{- if .HasParent }}
		m.{{ .ParentName | pascalcase }}Name,
{{- end }}
{{- range .ExtraAttributes }}
		fmt.Sprintf("%v", m.{{ .Name | pascalcase }}),
{{- end }}
		m.Name,
	}, ":")

	m.UUID = uuid.NewSHA1(InventorySpaceUUID, []byte(identifier))

	return m
}

func (m {{ .Name | pascalcase }}) Validate() error {
	if m.Cluster == "" {
		return domain.NewValidationErrf("Invalid {{ .Name | pascalcase }}, cluster can not be empty")
	}
{{- if and .ServerIDByLocation ( not .IsServerIDOptional ) }}

	if m.Server == "" {
		return domain.NewValidationErrf("Invalid {{ .Name | pascalcase }}, server can not be empty")
	}
{{- end }}

	if m.Name == "" {
		return domain.NewValidationErrf("Invalid {{ .Name | pascalcase }}, name can not be empty")
	}
{{- if .HasProject }}

	if m.ProjectName == "" {
		return domain.NewValidationErrf("Invalid {{ .Name | pascalcase }}, project name can not be empty")
	}
{{- end }}
{{- if .HasParent }}

	if m.{{ .ParentName | pascalcase }}Name == "" {
		return domain.NewValidationErrf("Invalid {{ .Name | pascalcase }}, parent name ({{ .ParentName | pascalcase}}) can not be empty")
	}
{{- end }}

	clone := m
	clone.DeriveUUID()
	if clone.UUID != m.UUID {
		return domain.NewValidationErrf("Invalid UUID, does not match derived value")
	}

	return nil
}

type {{ .PluralName | pascalcase }} []{{ .Name | pascalcase }}

type {{ .Name | pascalcase }}Filter struct{
	Cluster    *string
{{- if .ServerIDByLocation }}
	Server     *string
{{- end }}
{{- if .HasProject }}
	Project    *string
{{- end }}
	Name       *string
	Expression *string
}

func (f {{ .Name | pascalcase }}Filter) AppendToURLValues(query url.Values) url.Values {
	if f.Cluster != nil {
		query.Add("cluster", *f.Cluster)
	}
{{- if .ServerIDByLocation }}

	if f.Server != nil {
		query.Add("server", *f.Server)
	}
{{- end }}
{{- if .HasProject }}

	if f.Project != nil {
		query.Add("project", *f.Project)
	}
{{- end }}

	if f.Name != nil {
		query.Add("name", *f.Name)
	}

	if f.Expression != nil {
		query.Add("filter", *f.Expression)
	}

	return query
}

func (f {{ .Name | pascalcase }}Filter) String() string {
	return f.AppendToURLValues(url.Values{}).Encode()
}
