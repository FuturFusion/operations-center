package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
{{- if .HasParent }}
	incusapi "github.com/lxc/incus/v6/shared/api"
{{- end }}

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type {{ .Name | camelcase }}Service struct {
	repo                   {{ .Name | pascalcase }}Repo
	clusterSvc             ProvisioningClusterService

{{- if .HasParent }}
	{{ .ParentName | camelcase }}Client {{ .ParentObjectType | pascalcase }}ServerClient
{{- end }}
	{{ .Name | camelcase }}Client {{ .Name | pascalcase }}ServerClient
{{- if .HasParent }}
	isParentFiltered func(incusapi.{{ .ParentObjectType | pascalcase }}) bool
{{- end }}

	clusterSyncFilterFunc func({{ .Name | camelcase }} {{ .Name | pascalcase }}) bool

	now func() time.Time
}

var _ {{ .Name | pascalcase }}Service = &{{ .Name | camelcase }}Service{}

type {{ .Name | pascalcase }}ServiceOption func(s *{{ .Name | camelcase }}Service)

func {{ .Name | pascalcase }}WithSyncFilter(clusterSyncFilterFunc func({{ .Name | camelcase }} {{ .Name | pascalcase }}) bool) {{ .Name | pascalcase }}ServiceOption {
	return func(s *{{ .Name | camelcase }}Service) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}
{{- if .HasParent }}

func {{ .Name | pascalcase }}WithParentFilter(f func(incusapi.{{ .ParentObjectType | pascalcase }}) bool) {{ .Name | pascalcase }}ServiceOption {
	return func(s *{{ .Name | camelcase }}Service) {
		s.isParentFiltered = f
	}
}
{{- end }}

func New{{ .Name | pascalcase }}Service(repo {{ .Name | pascalcase }}Repo, clusterSvc ProvisioningClusterService, client {{ .Name | pascalcase }}ServerClient, {{ if .HasParent }}parentClient {{ .ParentName | pascalcase }}ServerClient, {{ end -}} opts ...{{ .Name | pascalcase }}ServiceOption) {{ .Name | camelcase }}Service {
	{{ .Name | camelcase }}Svc := {{ .Name | camelcase }}Service{
		repo:                   repo,
		clusterSvc:             clusterSvc,

{{- if .HasParent }}
		{{ .ParentName | camelcase }}Client: parentClient,
{{- end }}
		{{ .Name | camelcase }}Client: client,

		clusterSyncFilterFunc: func({{ .Name | camelcase }} {{ .Name | pascalcase }}) bool{
			return false
		},
{{- if .HasParent }}

	isParentFiltered: func(_ incusapi.{{ .ParentObjectType | pascalcase }}) bool {
		return false
	},
{{- end }}

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&{{ .Name | camelcase }}Svc)
	}

	return {{ .Name | camelcase }}Svc
}

func (s {{ .Name | camelcase }}Service) GetAllWithFilter(ctx context.Context, filter {{ .Name | pascalcase }}Filter) ({{ .PluralName | pascalcase }}, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env({{ .Name | pascalcase }}{})}...)
		if err != nil {
			return nil, err
		}
	}

	{{ .PluralName | camelcase }}, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filtered{{ .PluralName | pascalcase }} {{ .PluralName | pascalcase }}
	if filter.Expression != nil {
		for _, {{ .Name | camelcase }} := range {{ .PluralName | camelcase }} {
			output, err := expr.Run(filterExpression, {{ .Name | camelcase }})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filtered{{ .PluralName | pascalcase }} = append(filtered{{ .PluralName | pascalcase }}, {{ .Name | camelcase }})
			}
		}

		return filtered{{ .PluralName | pascalcase }}, nil
	}

	return {{ .PluralName | camelcase }}, nil
}

func (s {{ .Name | camelcase }}Service) GetAllIDsWithFilter(ctx context.Context, filter {{ .Name | pascalcase }}Filter) ([]int, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		ID int
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	{{ .PluralName | camelcase }}IDs, err := s.repo.GetAllIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filtered{{ .PluralName | pascalcase }}IDs []int
	if filter.Expression != nil {
		for _, {{ .Name | camelcase }}ID := range {{ .PluralName | camelcase }}IDs {
			output, err := expr.Run(filterExpression, Env{ {{ .Name | camelcase }}ID })
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filtered{{ .PluralName | pascalcase }}IDs = append(filtered{{ .PluralName | pascalcase }}IDs, {{ .Name | camelcase }}ID)
			}
		}

		return filtered{{ .PluralName | pascalcase }}IDs, nil
	}

	return {{ .PluralName | camelcase }}IDs, nil
}

func (s {{ .Name | camelcase }}Service) GetByID(ctx context.Context, id int) ({{ .Name | pascalcase }}, error) {
	return s.repo.GetByID(ctx, id)
}

func (s {{ .Name | camelcase }}Service) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		{{ .Name | camelcase }}, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, {{ .Name | camelcase }}.Cluster)
		if err != nil {
			return err
		}

		retrieved{{ .Name | pascalcase }}, err := s.{{ .Name | camelcase }}Client.Get{{ .Name | pascalcase }}ByName(ctx, cluster.ConnectionURL, {{ if .HasParent }}{{ .Name | camelcase }}.{{ .ParentName | pascalcase }}Name, {{ end -}} {{ .Name | camelcase }}.Name {{- range .ExtraAttributes }}, {{ $.Name | camelcase }}.{{ .Name | pascalcase }} {{- end}})
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, {{ .Name | camelcase }}.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

{{ if .ServerIDByLocation }}
		{{ .Name | camelcase }}.Server = retrieved{{ .Name | pascalcase }}.Location
{{- end }}
{{- if .HasProject }}
		{{ .Name | camelcase }}.ProjectName = retrieved{{ .Name | pascalcase }}.Project
{{- end }}
{{- range .ExtraAttributes }}
		{{ $.Name | camelcase }}. {{ .Name | pascalcase }} = retrieved{{ $.Name | pascalcase }}.{{ .Name | pascalcase }}
{{- end }}
		{{ .Name | camelcase }}.Object = retrieved{{ .Name | pascalcase }}
		{{ .Name | camelcase }}.LastUpdated = s.now()

		err = {{ .Name | camelcase }}.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, {{ .Name | camelcase }})
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s {{ .Name | camelcase }}Service) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

{{ if .HasParent }}
	retrieved{{ .ParentPluralName | pascalcase }}, err := s.{{ .ParentName | camelcase }}Client.Get{{ .ParentName | pascalcase }}s(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	for _, {{ .ParentName | camelcase }} := range retrieved{{ .ParentPluralName | pascalcase }} {
{{- if .HasParent }}
		if s.isParentFiltered({{ .ParentName | camelcase }}) {
			continue
		}
{{- end }}

		retrieved{{ .PluralName | pascalcase }}, err := s.{{ .Name | camelcase }}Client.Get{{ .PluralName | pascalcase }}(ctx, cluster.ConnectionURL, {{ .ParentName | camelcase }}.Name)
		if err != nil {
			return err
		}

{{ else }}
	retrieved{{ .PluralName | pascalcase }}, err := s.{{ .Name | camelcase }}Client.Get{{ .PluralName | pascalcase }}(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}
{{ end }}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrieved{{ .Name | pascalcase }} := range retrieved{{ .PluralName | pascalcase }} {
			{{ .Name | camelcase }} := {{ .Name | pascalcase }}{
				Cluster:   name,
{{- if .ServerIDByLocation }}
				Server:      retrieved{{ .Name | pascalcase }}.Location,
{{- end }}
{{- if .HasProject }}
				ProjectName: retrieved{{ .Name | pascalcase }}.Project,
{{- end }}
{{- if .HasParent }}
				{{ .ParentName | pascalcase }}Name:  {{ .ParentName | camelcase }}.Name,
{{- end }}
				Name:        retrieved{{ .Name | pascalcase }}.{{ .ObjectNamePropertyName | pascalcase }},
{{- range .ExtraAttributes }}
				{{ .Name | pascalcase }}: retrieved{{ $.Name | pascalcase }}.{{ .Name | pascalcase }},
{{- end}}
				Object:      retrieved{{ .Name | pascalcase }},
				LastUpdated: s.now(),
			}

			if s.clusterSyncFilterFunc({{ .Name | camelcase }}) {
				continue
			}

			err = {{ .Name | camelcase }}.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, {{ .Name | camelcase }})
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}
{{- if .HasParent }}
	}
{{- end }}

	return nil
}
