package sqlite_test

import (
	"context"
{{- if .IsServerResource }}
	"encoding/json"
{{ end }}
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	provisioningSqlite "github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
{{- if .IsServerResource }}
	"github.com/FuturFusion/operations-center/shared/api"
{{- end }}
)

func Test{{ .Name | pascalcase }}DatabaseActions(t *testing.T) {
	testClusterA := provisioning.Cluster{
		ID:              1,
		Name:            "one",
		ConnectionURL:   "https://cluster-one/",
		ServerHostnames: []string{"one", "two"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusterB := provisioning.Cluster{
		ID:              2,
		Name:            "two",
		ConnectionURL:   "https://cluster-two/",
		ServerHostnames: []string{"three", "four"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

{{ if .IsServerResource }}
	testServerA := provisioning.Server{
		ID:            1,
		ClusterID:     1,
		Name:          "one",
		Type:          api.ServerTypeIncus,
		ConnectionURL: "https://one/",
		HardwareData:  incusapi.Resources{},
		VersionData:   json.RawMessage(nil),
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerB := provisioning.Server{
		ID:            2,
		ClusterID:     1,
		Name:          "two",
		Type:          api.ServerTypeIncus,
		ConnectionURL: "https://one/",
		HardwareData:  incusapi.Resources{},
		VersionData:   json.RawMessage(nil),
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}
{{- end }}

	{{ .Name | camelcase }}A := inventory.{{ .Name | pascalcase }}{
		{{ .ResourceForeignKey | pascalcase }}ID: 1,
{{- if .HasProject }}
		ProjectName: "one",
{{- end }}
{{- if .HasParent }}
		{{ .ParentName | pascalcase }}Name:  "parent one",
{{- end }}
		Name:        "one",
{{- range .ExtraAttributes }}
		{{ .Name | pascalcase }}: {{ .TestDummyValue }},
{{- end}}
		Object:      incusapi.{{ .ObjectType | pascalcase }}{},
		LastUpdated: time.Now(),
	}

	{{ .Name | camelcase }}B := inventory.{{ .Name | pascalcase }}{
		{{ .ResourceForeignKey | pascalcase }}ID: 2,
{{- if .HasProject }}
		ProjectName: "two",
{{- end }}
{{- if .HasParent }}
		{{ .ParentName | pascalcase }}Name:  "parent one",
{{- end }}
		Name:        "two",
{{- range .ExtraAttributes }}
		{{ .Name | pascalcase }}: {{ .TestDummyValue }},
{{- end}}
		Object:      incusapi.{{ .ObjectType | pascalcase }}{},
		LastUpdated: time.Now(),
	}

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	clusterSvc := provisioning.NewClusterService(provisioningSqlite.NewCluster(db), nil)
{{- if .IsServerResource }}
	serverSvc := provisioning.NewServerService(provisioningSqlite.NewServer(db))
{{- end }}

	{{ .Name | camelcase }} := inventorySqlite.New{{ .Name | pascalcase }}(db)

	// Cannot add an {{ .Name | camelcase }} with an invalid server.
	_, err = {{ .Name | camelcase }}.Create(ctx, {{ .Name | camelcase }}A)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Add dummy clusters.
	_, err = clusterSvc.Create(ctx, testClusterA)
	require.NoError(t, err)
	_, err = clusterSvc.Create(ctx, testClusterB)
	require.NoError(t, err)

{{ if .IsServerResource }}
	// Add dummy servers.
	_, err = serverSvc.Create(ctx, testServerA)
	require.NoError(t, err)
	_, err = serverSvc.Create(ctx, testServerB)
	require.NoError(t, err)
{{- end }}

	// Add {{ .PluralName }}
	{{ .Name | camelcase }}A, err = {{ .Name | camelcase }}.Create(ctx, {{ .Name | camelcase }}A)
	require.NoError(t, err)
	require.Equal(t, 1, {{ .Name | camelcase }}A.{{ .ResourceForeignKey | pascalcase }}ID)

	{{ .Name | camelcase }}B, err = {{ .Name | camelcase }}.Create(ctx, {{ .Name | camelcase }}B)
	require.NoError(t, err)
	require.Equal(t, 2, {{ .Name | camelcase }}B.{{ .ResourceForeignKey | pascalcase }}ID)

	// Ensure we have two entries without filter
	{{ .Name | camelcase }}IDs, err := {{ .Name | camelcase }}.GetAllIDsWithFilter(ctx, inventory.{{ .Name | pascalcase }}Filter{})
	require.NoError(t, err)
	require.Len(t, {{ .Name | camelcase }}IDs, 2)
	require.ElementsMatch(t, []int{1, 2}, {{ .Name | camelcase }}IDs)

	// Ensure we have one entry with filter for cluster, server and project
	{{ .Name | camelcase }}IDs, err = {{ .Name | camelcase }}.GetAllIDsWithFilter(ctx, inventory.{{ .Name | pascalcase }}Filter{
		Cluster: ptr.To("one"),
{{- if .IsServerResource }}
		Server: ptr.To("one"),
{{- end }}
{{- if .HasProject }}
		Project: ptr.To("one"),
{{- end }}
	})
	require.NoError(t, err)
	require.Len(t, {{ .Name | camelcase }}IDs, 1)
	require.ElementsMatch(t, []int{1}, {{ .Name | camelcase }}IDs)

	// Should get back {{ .Name | camelcase }}A unchanged.
	{{ .Name | camelcase }}A.ClusterID = 1
	db{{ .Name | camelcase | pascalcase }}A, err := {{ .Name | camelcase }}.GetByID(ctx, {{ .Name | camelcase }}A.ID)
	require.NoError(t, err)
	require.Equal(t, {{ .Name | camelcase }}A, db{{ .Name | pascalcase }}A)

	{{ .Name | camelcase }}B.LastUpdated = time.Now().UTC().Truncate(0)
	db{{ .Name | pascalcase }}B, err := {{ .Name | camelcase }}.UpdateByID(ctx, {{ .Name | camelcase }}B)
	require.NoError(t, err)
	require.Equal(t, {{ .Name | camelcase }}B, db{{ .Name | pascalcase }}B)

	// Delete {{ .PluralName }} by ID.
	err = {{ .Name | camelcase }}.DeleteByID(ctx, 1)
	require.NoError(t, err)

	// Delete {{ .PluralName }} by {{ .ResourceForeignKey }} ID.
	err = {{ .Name | camelcase }}.DeleteBy{{ .ResourceForeignKey | pascalcase }}ID(ctx, 2)
	require.NoError(t, err)

	_, err = {{ .Name | camelcase }}.GetByID(ctx, {{ .Name | camelcase }}A.ID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no {{ .PluralName }} remaining.
	{{ .Name | camelcase }}IDs, err = {{ .Name | camelcase }}.GetAllIDsWithFilter(ctx, inventory.{{ .Name | pascalcase }}Filter{})
	require.NoError(t, err)
	require.Zero(t, {{ .Name | camelcase }}IDs)
}
