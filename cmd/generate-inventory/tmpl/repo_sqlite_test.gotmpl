package sqlite_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite/entities"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	adapterMock "github.com/FuturFusion/operations-center/internal/provisioning/adapter/mock"
	provisioningSqlite "github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
	"github.com/FuturFusion/operations-center/shared/api"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

func Test{{ .Name | pascalcase }}DatabaseActions(t *testing.T) {
	testToken := provisioning.Token{
		UsesRemaining: 10,
		ExpireAt: time.Now().Add(1 * time.Minute),
	}

	testClusterA := provisioning.Cluster{
		Name:            "one",
		ConnectionURL:   "https://cluster-one/",
		ServerNames:     []string{"one"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusterB := provisioning.Cluster{
		Name:            "two",
		ConnectionURL:   "https://cluster-two/",
		ServerNames:     []string{"two"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerA := provisioning.Server{
		Name:            "one",
		ConnectionURL:   "https://server-one/",
		Certificate:     `-----BEGIN CERTIFICATE-----
server-one
-----END CERTIFICATE-----
`,
		Type:            api.ServerTypeIncus,
		Status:          api.ServerStatusReady,
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerB := provisioning.Server{
		Name:            "two",
		ConnectionURL:   "https://server-two/",
		Certificate:     `-----BEGIN CERTIFICATE-----
server-one
-----END CERTIFICATE-----
`,
		Type:            api.ServerTypeIncus,
		Status:          api.ServerStatusReady,
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	{{ .Name | camelcase }}A := inventory.{{ .Name | pascalcase }}{
		Cluster:     "one",
{{- if .ServerIDByLocation }}
		Server:      "one",
{{- end }}
{{- if .HasProject }}
		ProjectName: "one",
{{- end }}
{{- if .HasParent }}
		{{ .ParentName | pascalcase }}Name:  "parent one",
{{- end }}
		Name:        "one",
{{- range .ExtraAttributes }}
		{{ .Name | pascalcase }}: {{ .TestDummyValue }},
{{- end}}
		Object:      incusapi.{{ .ObjectType | pascalcase }}{},
		LastUpdated: time.Now(),
	}

	{{ .Name | camelcase }}A.DeriveUUID()

	{{ .Name | camelcase }}B := inventory.{{ .Name | pascalcase }}{
		Cluster:     "two",
{{- if .ServerIDByLocation }}
		Server:      "two",
{{- end }}
{{- if .HasProject }}
		ProjectName: "two",
{{- end }}
{{- if .HasParent }}
		{{ .ParentName | pascalcase }}Name:  "parent one",
{{- end }}
		Name:        "two",
{{- range .ExtraAttributes }}
		{{ .Name | pascalcase }}: {{ .TestDummyValue }},
{{- end}}
		Object:      incusapi.{{ .ObjectType | pascalcase }}{},
		LastUpdated: time.Now(),
	}

	{{ .Name | camelcase }}B.DeriveUUID()

	client := &adapterMock.ServerClientPortMock{
		PingFunc: func(ctx context.Context, server provisioning.Server) error {
			return nil
		},
	}

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	tx := transaction.Enable(db)
	entities.PreparedStmts, err = entities.PrepareStmts(tx, false)
	require.NoError(t, err)

	tokenSvc :=  provisioning.NewTokenService(provisioningSqlite.NewToken(tx))
	serverSvc := provisioning.NewServerService(provisioningSqlite.NewServer(tx), client, tokenSvc)
	clusterSvc := provisioning.NewClusterService(provisioningSqlite.NewCluster(tx), serverSvc, nil)

	{{ .Name | camelcase }} := inventorySqlite.New{{ .Name | pascalcase }}(tx)

	// Cannot add an {{ .Name | camelcase }} with an invalid server.
	_, err = {{ .Name | camelcase }}.Create(ctx, {{ .Name | camelcase }}A)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Add token.
	testToken, err = tokenSvc.Create(ctx, testToken)
	require.NoError(t, err)

	// Add dummy servers.
	_, err = serverSvc.Create(ctx, testToken.UUID, testServerA)
	require.NoError(t, err)
	_, err = serverSvc.Create(ctx, testToken.UUID, testServerB)
	require.NoError(t, err)

	// Add dummy clusters.
	_, err = clusterSvc.Create(ctx, testClusterA)
	require.NoError(t, err)
	_, err = clusterSvc.Create(ctx, testClusterB)
	require.NoError(t, err)

	// Add {{ .PluralName }}
	{{ .Name | camelcase }}A, err = {{ .Name | camelcase }}.Create(ctx, {{ .Name | camelcase }}A)
	require.NoError(t, err)
	require.Equal(t, "one", {{ .Name | camelcase }}A.Cluster)

	{{ .Name | camelcase }}B, err = {{ .Name | camelcase }}.Create(ctx, {{ .Name | camelcase }}B)
	require.NoError(t, err)
	require.Equal(t, "two", {{ .Name | camelcase }}B.Cluster)

	// Ensure we have two entries without filter
	{{ .Name | camelcase }}UUIDs, err := {{ .Name | camelcase }}.GetAllUUIDsWithFilter(ctx, inventory.{{ .Name | pascalcase }}Filter{})
	require.NoError(t, err)
	require.Len(t, {{ .Name | camelcase }}UUIDs, 2)
	require.ElementsMatch(t, []uuid.UUID{ {{ .Name | camelcase }}A.UUID, {{ .Name | camelcase }}B.UUID }, {{ .Name | camelcase }}UUIDs)

	// Ensure we have two entries without filter
	db{{ .Name | pascalcase }}, err := {{ .Name | camelcase }}.GetAllWithFilter(ctx, inventory.{{ .Name | pascalcase }}Filter{})
	require.NoError(t, err)
	require.Len(t, db{{ .Name | pascalcase }}, 2)
	require.Equal(t, {{ .Name | camelcase }}A.Name, db{{ .Name | pascalcase }}[0].Name)
	require.Equal(t, {{ .Name | camelcase }}B.Name, db{{ .Name | pascalcase }}[1].Name)

	// Ensure we have one entry with filter for cluster, server and project
	{{ .Name | camelcase }}UUIDs, err = {{ .Name | camelcase }}.GetAllUUIDsWithFilter(ctx, inventory.{{ .Name | pascalcase }}Filter{
		Cluster: ptr.To("one"),
{{- if .ServerIDByLocation }}
		Server:  ptr.To("one"),
{{- end }}
{{- if .HasProject }}
		Project: ptr.To("one"),
{{- end }}
	})
	require.NoError(t, err)
	require.Len(t, {{ .Name | camelcase }}UUIDs, 1)
	require.ElementsMatch(t, []uuid.UUID{ {{ .Name | camelcase }}A.UUID }, {{ .Name | camelcase }}UUIDs)

	// Ensure we have one entry with filter for cluster, server and project
	db{{ .Name | pascalcase }}, err = {{ .Name | camelcase }}.GetAllWithFilter(ctx, inventory.{{ .Name | pascalcase }}Filter{
		Cluster: ptr.To("one"),
{{- if .ServerIDByLocation }}
		Server:  ptr.To("one"),
{{- end }}
{{- if .HasProject }}
		Project: ptr.To("one"),
{{- end }}
	})
	require.NoError(t, err)
	require.Len(t, db{{ .Name | pascalcase }}, 1)
	require.Equal(t, "one", db{{ .Name | pascalcase }}[0].Name)

	// Should get back {{ .Name | camelcase }}A unchanged.
	{{ .Name | camelcase }}A.Cluster = "one"
	db{{ .Name | camelcase | pascalcase }}A, err := {{ .Name | camelcase }}.GetByUUID(ctx, {{ .Name | camelcase }}A.UUID)
	require.NoError(t, err)
	require.Equal(t, {{ .Name | camelcase }}A, db{{ .Name | pascalcase }}A)

	{{ .Name | camelcase }}B.LastUpdated = time.Now().UTC().Truncate(0)
	db{{ .Name | pascalcase }}B, err := {{ .Name | camelcase }}.UpdateByUUID(ctx, {{ .Name | camelcase }}B)
	require.NoError(t, err)
	require.Equal(t, {{ .Name | camelcase }}B, db{{ .Name | pascalcase }}B)

	// Delete {{ .PluralName }} by ID.
	err = {{ .Name | camelcase }}.DeleteByUUID(ctx, {{ .Name | camelcase }}A.UUID)
	require.NoError(t, err)

	// Delete {{ .PluralName }} by cluster Name.
	err = {{ .Name | camelcase }}.DeleteByClusterName(ctx, "two")
	require.NoError(t, err)

	_, err = {{ .Name | camelcase }}.GetByUUID(ctx, {{ .Name | camelcase }}A.UUID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no {{ .PluralName }} remaining.
	{{ .Name | camelcase }}UUIDs, err = {{ .Name | camelcase }}.GetAllUUIDsWithFilter(ctx, inventory.{{ .Name | pascalcase }}Filter{})
	require.NoError(t, err)
	require.Zero(t, {{ .Name | camelcase }}UUIDs)
}
