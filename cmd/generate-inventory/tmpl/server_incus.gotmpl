package incus

import (
	"context"
	"net/http"

	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
  "github.com/FuturFusion/operations-center/internal/provisioning"
)

func (s serverClient) Get{{ .PluralName | pascalcase }}(ctx context.Context, endpoint provisioning.Endpoint {{- if .HasParent }}, {{ .Name | camelcase }}Name string {{- end -}} ) ([]incusapi.{{ .ObjectType | pascalcase }}, error) {
	client, err := s.getClient(ctx, endpoint)
	if err != nil {
		return nil, err
	}

	server{{ .PluralName | pascalcase }}, err := client.{{ .IncusGetAllMethod }}({{ if eq .IncusGetAllMethod "GetInstancesFullAllProjects" }}incusapi.{{ .Name | pascalcase }}TypeAny{{ end }}{{ if .HasParent }}{{ .Name | camelcase }}Name{{ end }})
	if err != nil {
		return nil, err
	}

	return server{{ .PluralName | pascalcase }}, nil
}

func (s serverClient) Get{{ .Name | pascalcase }}ByName(ctx context.Context, endpoint provisioning.Endpoint, {{- if .HasParent }}{{ .ParentName | camelcase }}Name string, {{ end -}} {{ .Name | camelcase }}Name string {{- range .ExtraAttributes }}, {{ $.Name | camelcase }}{{ .Name | pascalcase }} {{ .Type }}{{- end}}) (incusapi.{{ .ObjectType | pascalcase }}, error) {
	client, err := s.getClient(ctx, endpoint)
	if err != nil {
		return incusapi.{{ .ObjectType | pascalcase }}{}, err
	}

	server{{ .Name | pascalcase }}, _, err := client.{{ .IncusGetMethod }}({{ if .HasParent }}{{ .ParentName | camelcase }}Name, {{- end -}} {{- range .ExtraAttributes }} {{ $.Name | camelcase }}{{ .Name | pascalcase }}, {{- end}} {{ .Name | camelcase }}Name)
	if incusapi.StatusErrorCheck(err, http.StatusNotFound) {
		return incusapi.{{ .ObjectType | pascalcase }}{}, domain.ErrNotFound
	}

	if err != nil {
		return incusapi.{{ .ObjectType | pascalcase }}{}, err
	}

	return *server{{ .Name | pascalcase }}, nil
}
