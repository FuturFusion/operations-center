package entities

// The code below was generated by incus-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/FuturFusion/operations-center/cmd/incus-generate/query"
	"github.com/lxc/incus/v6/shared/api"
)

var _ = api.ServerEnvironment{}

var storageVolumeObjects = RegisterStmt(`
SELECT storage_volumes.id, servers.id AS server_id, storage_volumes.project_id, storage_volumes.name, storage_volumes.object, storage_volumes.last_updated
  FROM storage_volumes
  JOIN servers ON storage_volumes.server_id = servers.id
  ORDER BY servers.id, storage_volumes.project_id, storage_volumes.name
`)

var storageVolumeObjectsByNameAndServerIDAndProjectID = RegisterStmt(`
SELECT storage_volumes.id, servers.id AS server_id, storage_volumes.project_id, storage_volumes.name, storage_volumes.object, storage_volumes.last_updated
  FROM storage_volumes
  JOIN servers ON storage_volumes.server_id = servers.id
  WHERE ( storage_volumes.name = ? AND server_id = ? AND storage_volumes.project_id = ? )
  ORDER BY servers.id, storage_volumes.project_id, storage_volumes.name
`)

var storageVolumeObjectsByProjectID = RegisterStmt(`
SELECT storage_volumes.id, servers.id AS server_id, storage_volumes.project_id, storage_volumes.name, storage_volumes.object, storage_volumes.last_updated
  FROM storage_volumes
  JOIN servers ON storage_volumes.server_id = servers.id
  WHERE ( storage_volumes.project_id = ? )
  ORDER BY servers.id, storage_volumes.project_id, storage_volumes.name
`)

var storageVolumeID = RegisterStmt(`
SELECT storage_volumes.id FROM storage_volumes
  JOIN servers ON storage_volumes.server_id = servers.id
  WHERE servers.id = ? AND storage_volumes.project_id = ? AND storage_volumes.name = ?
`)

var storageVolumeCreate = RegisterStmt(`
INSERT INTO storage_volumes (server_id, project_id, name, object, last_updated)
  VALUES ((SELECT servers.id FROM servers WHERE servers.hostname = ?), ?, ?, ?, ?)
`)

var storageVolumeDeleteByNameAndServerIDAndProjectID = RegisterStmt(`
DELETE FROM storage_volumes WHERE name = ? AND server_id = (SELECT servers.id FROM servers WHERE servers.hostname = ?) AND project_id = ?
`)

// GetStorageVolumeID return the ID of the storage_volume with the given key.
// generator: storage_volume ID
func GetStorageVolumeID(ctx context.Context, tx *sql.Tx, serverID int64, projectID int64, name string) (int64, error) {
	stmt, err := Stmt(tx, storageVolumeID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"storageVolumeID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, serverID, projectID, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "StorageVolume not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"storage_volumes\" ID: %w", err)
	}

	return id, nil
}

// StorageVolumeExists checks if a storage_volume with the given key exists.
// generator: storage_volume Exists
func StorageVolumeExists(ctx context.Context, tx *sql.Tx, serverID int64, projectID int64, name string) (bool, error) {
	_, err := GetStorageVolumeID(ctx, tx, serverID, projectID, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// GetStorageVolume returns the storage_volume with the given key.
// generator: storage_volume GetOne
func GetStorageVolume(ctx context.Context, tx *sql.Tx, serverID int64, projectID int64, name string) (*StorageVolume, error) {
	filter := StorageVolumeFilter{}
	filter.ServerID = &serverID
	filter.ProjectID = &projectID
	filter.Name = &name

	objects, err := GetStorageVolumes(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"storage_volumes\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "StorageVolume not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"storage_volumes\" entry matches")
	}
}

// storageVolumeColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the StorageVolume entity.
func storageVolumeColumns() string {
	return "storage_volumes.id, servers.id AS server_id, storage_volumes.project_id, storage_volumes.name, storage_volumes.object, storage_volumes.last_updated"
}

// getStorageVolumes can be used to run handwritten sql.Stmts to return a slice of objects.
func getStorageVolumes(ctx context.Context, stmt *sql.Stmt, args ...any) ([]StorageVolume, error) {
	objects := make([]StorageVolume, 0)

	dest := func(scan func(dest ...any) error) error {
		s := StorageVolume{}
		var objectStr string
		err := scan(&s.ID, &s.ServerID, &s.ProjectID, &s.Name, &objectStr, &s.LastUpdated)
		if err != nil {
			return err
		}

		err = query.Unmarshal(objectStr, &s.Object)
		if err != nil {
			return err
		}

		objects = append(objects, s)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"storage_volumes\" table: %w", err)
	}

	return objects, nil
}

// getStorageVolumesRaw can be used to run handwritten query strings to return a slice of objects.
func getStorageVolumesRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]StorageVolume, error) {
	objects := make([]StorageVolume, 0)

	dest := func(scan func(dest ...any) error) error {
		s := StorageVolume{}
		var objectStr string
		err := scan(&s.ID, &s.ServerID, &s.ProjectID, &s.Name, &objectStr, &s.LastUpdated)
		if err != nil {
			return err
		}

		err = query.Unmarshal(objectStr, &s.Object)
		if err != nil {
			return err
		}

		objects = append(objects, s)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"storage_volumes\" table: %w", err)
	}

	return objects, nil
}

// GetStorageVolumes returns all available storage_volumes.
// generator: storage_volume GetMany
func GetStorageVolumes(ctx context.Context, tx *sql.Tx, filters ...StorageVolumeFilter) ([]StorageVolume, error) {
	var err error

	// Result slice.
	objects := make([]StorageVolume, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, storageVolumeObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"storageVolumeObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil && filter.ServerID != nil && filter.ProjectID != nil {
			args = append(args, []any{filter.Name, filter.ServerID, filter.ProjectID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, storageVolumeObjectsByNameAndServerIDAndProjectID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"storageVolumeObjectsByNameAndServerIDAndProjectID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(storageVolumeObjectsByNameAndServerIDAndProjectID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"storageVolumeObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ProjectID != nil && filter.ServerID == nil && filter.Name == nil {
			args = append(args, []any{filter.ProjectID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, storageVolumeObjectsByProjectID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"storageVolumeObjectsByProjectID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(storageVolumeObjectsByProjectID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"storageVolumeObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ServerID == nil && filter.ProjectID == nil && filter.Name == nil {
			return nil, fmt.Errorf("Cannot filter on empty StorageVolumeFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getStorageVolumes(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getStorageVolumesRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"storage_volumes\" table: %w", err)
	}

	return objects, nil
}

// CreateStorageVolume adds a new storage_volume to the database.
// generator: storage_volume Create
func CreateStorageVolume(ctx context.Context, tx *sql.Tx, object StorageVolume) (int64, error) {
	// Check if a storage_volume with the same key exists.
	exists, err := StorageVolumeExists(ctx, tx, object.ServerID, object.ProjectID, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"storage_volumes\" entry already exists")
	}

	args := make([]any, 5)

	// Populate the statement arguments.
	args[0] = object.ServerID
	args[1] = object.ProjectID
	args[2] = object.Name
	marshaledObject, err := query.Marshal(object.Object)
	if err != nil {
		return -1, err
	}

	args[3] = marshaledObject
	args[4] = object.LastUpdated

	// Prepared statement to use.
	stmt, err := Stmt(tx, storageVolumeCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"storageVolumeCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"storage_volumes\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"storage_volumes\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteStorageVolume deletes the storage_volume matching the given key parameters.
// generator: storage_volume DeleteOne-by-Name-and-ServerID-and-ProjectID
func DeleteStorageVolume(ctx context.Context, tx *sql.Tx, name string, serverID int64, projectID int64) error {
	stmt, err := Stmt(tx, storageVolumeDeleteByNameAndServerIDAndProjectID)
	if err != nil {
		return fmt.Errorf("Failed to get \"storageVolumeDeleteByNameAndServerIDAndProjectID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name, serverID, projectID)
	if err != nil {
		return fmt.Errorf("Delete \"storage_volumes\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "StorageVolume not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d StorageVolume rows instead of 1", n)
	}

	return nil
}
