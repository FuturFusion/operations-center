package entities

// The code below was generated by generate-database from the incus project - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/FuturFusion/operations-center/cmd/incus-generate/query"
)

var serverObjects = RegisterStmt(`
SELECT servers.id, clusters.id AS cluster_id, servers.hostname, servers.type, servers.connection_url, servers.last_updated
  FROM servers
  JOIN clusters ON servers.cluster_id = clusters.id
  ORDER BY servers.hostname
`)

var serverObjectsByHostname = RegisterStmt(`
SELECT servers.id, clusters.id AS cluster_id, servers.hostname, servers.type, servers.connection_url, servers.last_updated
  FROM servers
  JOIN clusters ON servers.cluster_id = clusters.id
  WHERE ( servers.hostname = ? )
  ORDER BY servers.hostname
`)

var serverID = RegisterStmt(`
SELECT servers.id FROM servers
  WHERE servers.hostname = ?
`)

var serverCreate = RegisterStmt(`
INSERT INTO servers (cluster_id, hostname, type, connection_url, last_updated)
  VALUES ((SELECT clusters.id FROM clusters WHERE clusters.name = ?), ?, ?, ?, ?)
`)

var serverDeleteByHostname = RegisterStmt(`
DELETE FROM servers WHERE hostname = ?
`)

// GetServerID return the ID of the server with the given key.
// generator: server ID
func GetServerID(ctx context.Context, tx *sql.Tx, hostname string) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Server")
	}()

	stmt, err := Stmt(tx, serverID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"serverID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, hostname)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"servers\" ID: %w", err)
	}

	return id, nil
}

// ServerExists checks if a server with the given key exists.
// generator: server Exists
func ServerExists(ctx context.Context, tx *sql.Tx, hostname string) (_ bool, _err error) {
	defer func() {
		_err = mapErr(_err, "Server")
	}()

	stmt, err := Stmt(tx, serverID)
	if err != nil {
		return false, fmt.Errorf("Failed to get \"serverID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, hostname)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}

	if err != nil {
		return false, fmt.Errorf("Failed to get \"servers\" ID: %w", err)
	}

	return true, nil
}

// GetServer returns the server with the given key.
// generator: server GetOne
func GetServer(ctx context.Context, tx *sql.Tx, hostname string) (_ *Server, _err error) {
	defer func() {
		_err = mapErr(_err, "Server")
	}()

	filter := ServerFilter{}
	filter.Hostname = &hostname

	objects, err := GetServers(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"servers\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"servers\" entry matches")
	}
}

// serverColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Server entity.
func serverColumns() string {
	return "servers.id, clusters.id AS cluster_id, servers.hostname, servers.type, servers.connection_url, servers.last_updated"
}

// getServers can be used to run handwritten sql.Stmts to return a slice of objects.
func getServers(ctx context.Context, stmt *sql.Stmt, args ...any) ([]Server, error) {
	objects := make([]Server, 0)

	dest := func(scan func(dest ...any) error) error {
		s := Server{}
		err := scan(&s.ID, &s.ClusterID, &s.Hostname, &s.Type, &s.ConnectionURL, &s.LastUpdated)
		if err != nil {
			return err
		}

		objects = append(objects, s)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"servers\" table: %w", err)
	}

	return objects, nil
}

// getServersRaw can be used to run handwritten query strings to return a slice of objects.
func getServersRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]Server, error) {
	objects := make([]Server, 0)

	dest := func(scan func(dest ...any) error) error {
		s := Server{}
		err := scan(&s.ID, &s.ClusterID, &s.Hostname, &s.Type, &s.ConnectionURL, &s.LastUpdated)
		if err != nil {
			return err
		}

		objects = append(objects, s)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"servers\" table: %w", err)
	}

	return objects, nil
}

// GetServers returns all available servers.
// generator: server GetMany
func GetServers(ctx context.Context, tx *sql.Tx, filters ...ServerFilter) (_ []Server, _err error) {
	defer func() {
		_err = mapErr(_err, "Server")
	}()

	var err error

	// Result slice.
	objects := make([]Server, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, serverObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"serverObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Hostname != nil {
			args = append(args, []any{filter.Hostname}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, serverObjectsByHostname)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"serverObjectsByHostname\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(serverObjectsByHostname)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"serverObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Hostname == nil {
			return nil, fmt.Errorf("Cannot filter on empty ServerFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getServers(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getServersRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"servers\" table: %w", err)
	}

	return objects, nil
}

// CreateServer adds a new server to the database.
// generator: server Create
func CreateServer(ctx context.Context, tx *sql.Tx, object Server) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Server")
	}()

	// Check if a server with the same key exists.
	exists, err := ServerExists(ctx, tx, object.Hostname)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, ErrConflict
	}

	args := make([]any, 5)

	// Populate the statement arguments.
	args[0] = object.ClusterID
	args[1] = object.Hostname
	args[2] = object.Type
	args[3] = object.ConnectionURL
	args[4] = object.LastUpdated

	// Prepared statement to use.
	stmt, err := Stmt(tx, serverCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"serverCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"servers\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"servers\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteServer deletes the server matching the given key parameters.
// generator: server DeleteOne-by-Hostname
func DeleteServer(ctx context.Context, tx *sql.Tx, hostname string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Server")
	}()

	stmt, err := Stmt(tx, serverDeleteByHostname)
	if err != nil {
		return fmt.Errorf("Failed to get \"serverDeleteByHostname\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(hostname)
	if err != nil {
		return fmt.Errorf("Delete \"servers\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Server rows instead of 1", n)
	}

	return nil
}
