package entities

// The code below was generated by generate-database from the incus project - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/FuturFusion/operations-center/cmd/incus-generate/query"
	"github.com/lxc/incus/v6/shared/api"
)

var clusterObjects = RegisterStmt(`
SELECT clusters.id, clusters.name, clusters.connection_url, clusters.server_hostnames, clusters.last_updated
  FROM clusters
  ORDER BY clusters.name
`)

var clusterObjectsByName = RegisterStmt(`
SELECT clusters.id, clusters.name, clusters.connection_url, clusters.server_hostnames, clusters.last_updated
  FROM clusters
  WHERE ( clusters.name = ? )
  ORDER BY clusters.name
`)

var clusterID = RegisterStmt(`
SELECT clusters.id FROM clusters
  WHERE clusters.name = ?
`)

var clusterCreate = RegisterStmt(`
INSERT INTO clusters (name, connection_url, server_hostnames, last_updated)
  VALUES (?, ?, ?, ?)
`)

var clusterDeleteByName = RegisterStmt(`
DELETE FROM clusters WHERE name = ?
`)

// GetClusterID return the ID of the cluster with the given key.
// generator: cluster ID
func GetClusterID(ctx context.Context, tx *sql.Tx, name string) (int64, error) {
	stmt, err := Stmt(tx, clusterID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"clusterID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "Cluster not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"clusters\" ID: %w", err)
	}

	return id, nil
}

// ClusterExists checks if a cluster with the given key exists.
// generator: cluster Exists
func ClusterExists(ctx context.Context, tx *sql.Tx, name string) (bool, error) {
	_, err := GetClusterID(ctx, tx, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// GetCluster returns the cluster with the given key.
// generator: cluster GetOne
func GetCluster(ctx context.Context, tx *sql.Tx, name string) (*Cluster, error) {
	filter := ClusterFilter{}
	filter.Name = &name

	objects, err := GetClusters(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"clusters\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "Cluster not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"clusters\" entry matches")
	}
}

// clusterColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Cluster entity.
func clusterColumns() string {
	return "clusters.id, clusters.name, clusters.connection_url, clusters.server_hostnames, clusters.last_updated"
}

// getClusters can be used to run handwritten sql.Stmts to return a slice of objects.
func getClusters(ctx context.Context, stmt *sql.Stmt, args ...any) ([]Cluster, error) {
	objects := make([]Cluster, 0)

	dest := func(scan func(dest ...any) error) error {
		c := Cluster{}
		var serverHostnamesStr string
		err := scan(&c.ID, &c.Name, &c.ConnectionURL, &serverHostnamesStr, &c.LastUpdated)
		if err != nil {
			return err
		}

		err = query.Unmarshal(serverHostnamesStr, &c.ServerHostnames)
		if err != nil {
			return err
		}

		objects = append(objects, c)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"clusters\" table: %w", err)
	}

	return objects, nil
}

// getClustersRaw can be used to run handwritten query strings to return a slice of objects.
func getClustersRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]Cluster, error) {
	objects := make([]Cluster, 0)

	dest := func(scan func(dest ...any) error) error {
		c := Cluster{}
		var serverHostnamesStr string
		err := scan(&c.ID, &c.Name, &c.ConnectionURL, &serverHostnamesStr, &c.LastUpdated)
		if err != nil {
			return err
		}

		err = query.Unmarshal(serverHostnamesStr, &c.ServerHostnames)
		if err != nil {
			return err
		}

		objects = append(objects, c)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"clusters\" table: %w", err)
	}

	return objects, nil
}

// GetClusters returns all available clusters.
// generator: cluster GetMany
func GetClusters(ctx context.Context, tx *sql.Tx, filters ...ClusterFilter) ([]Cluster, error) {
	var err error

	// Result slice.
	objects := make([]Cluster, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, clusterObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"clusterObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, clusterObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"clusterObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(clusterObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"clusterObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name == nil {
			return nil, fmt.Errorf("Cannot filter on empty ClusterFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getClusters(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getClustersRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"clusters\" table: %w", err)
	}

	return objects, nil
}

// CreateCluster adds a new cluster to the database.
// generator: cluster Create
func CreateCluster(ctx context.Context, tx *sql.Tx, object Cluster) (int64, error) {
	// Check if a cluster with the same key exists.
	exists, err := ClusterExists(ctx, tx, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"clusters\" entry already exists")
	}

	args := make([]any, 4)

	// Populate the statement arguments.
	args[0] = object.Name
	args[1] = object.ConnectionURL
	marshaledServerHostnames, err := query.Marshal(object.ServerHostnames)
	if err != nil {
		return -1, err
	}

	args[2] = marshaledServerHostnames
	args[3] = object.LastUpdated

	// Prepared statement to use.
	stmt, err := Stmt(tx, clusterCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"clusterCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"clusters\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"clusters\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteCluster deletes the cluster matching the given key parameters.
// generator: cluster DeleteOne-by-Name
func DeleteCluster(ctx context.Context, tx *sql.Tx, name string) error {
	stmt, err := Stmt(tx, clusterDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"clusterDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"clusters\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "Cluster not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Cluster rows instead of 1", n)
	}

	return nil
}
