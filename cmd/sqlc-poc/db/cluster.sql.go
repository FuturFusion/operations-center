// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cluster.sql

package db

import (
	"context"
	"time"
)

const createCluster = `-- name: CreateCluster :one
INSERT INTO clusters (
  name, connection_url, server_hostnames, last_updated
) VALUES (
  ?1, ?2, ?3, ?4
)
RETURNING id, name, connection_url, server_hostnames, last_updated
`

type CreateClusterParams struct {
	Name            string
	ConnectionUrl   string
	ServerHostnames StringSlice
	LastUpdated     time.Time
}

func (q *Queries) CreateCluster(ctx context.Context, arg CreateClusterParams) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, createCluster,
		arg.Name,
		arg.ConnectionUrl,
		arg.ServerHostnames,
		arg.LastUpdated,
	)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ConnectionUrl,
		&i.ServerHostnames,
		&i.LastUpdated,
	)
	return i, err
}

const deleteCluster = `-- name: DeleteCluster :exec
DELETE FROM clusters
WHERE id = ?1
`

func (q *Queries) DeleteCluster(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCluster, id)
	return err
}

const getCluster = `-- name: GetCluster :one
SELECT id, name, connection_url, server_hostnames, last_updated FROM clusters
WHERE id = ?1 LIMIT 1
`

func (q *Queries) GetCluster(ctx context.Context, id int64) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, getCluster, id)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ConnectionUrl,
		&i.ServerHostnames,
		&i.LastUpdated,
	)
	return i, err
}

const listClusters = `-- name: ListClusters :many
SELECT id, name, connection_url, server_hostnames, last_updated FROM clusters
ORDER BY name
`

func (q *Queries) ListClusters(ctx context.Context) ([]Cluster, error) {
	rows, err := q.db.QueryContext(ctx, listClusters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cluster
	for rows.Next() {
		var i Cluster
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ConnectionUrl,
			&i.ServerHostnames,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCluster = `-- name: UpdateCluster :exec
UPDATE clusters
SET
  name = ?1,
  connection_url = ?2,
  server_hostnames = ?3,
  last_updated = ?4
WHERE
  id = ?5
RETURNING id, name, connection_url, server_hostnames, last_updated
`

type UpdateClusterParams struct {
	Name            string
	ConnectionUrl   string
	ServerHostnames StringSlice
	LastUpdated     time.Time
	ID              int64
}

func (q *Queries) UpdateCluster(ctx context.Context, arg UpdateClusterParams) error {
	_, err := q.db.ExecContext(ctx, updateCluster,
		arg.Name,
		arg.ConnectionUrl,
		arg.ServerHostnames,
		arg.LastUpdated,
		arg.ID,
	)
	return err
}
