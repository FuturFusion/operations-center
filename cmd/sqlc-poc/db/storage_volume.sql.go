// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: storage_volume.sql

package db

import (
	"context"
)

const listStorageVolumes = `-- name: ListStorageVolumes :many
SELECT server_id, project_id, name, object, last_updated FROM storage_volumes
`

func (q *Queries) ListStorageVolumes(ctx context.Context) ([]StorageVolume, error) {
	rows, err := q.db.QueryContext(ctx, listStorageVolumes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StorageVolume
	for rows.Next() {
		var i StorageVolume
		if err := rows.Scan(
			&i.ServerID,
			&i.ProjectID,
			&i.Name,
			&i.Object,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStorageVolumesFiltered = `-- name: ListStorageVolumesFiltered :many
SELECT storage_volumes.server_id, storage_volumes.project_id, storage_volumes.name, storage_volumes.object, storage_volumes.last_updated, servers.hostname as server_hostname, clusters.name as cluster_name
FROM
  storage_volumes
  INNER JOIN servers ON storage_volumes.server_id = servers.id
  INNER JOIN clusters ON servers.cluster_id = clusters.id
WHERE
(?1 IS NULL OR clusters.id = ?1)
AND (?2 IS NULL OR servers.id = ?2 OR ?2)
AND (?3 IS NULL OR storage_volumes.project_id = ?3)
AND (?4 IS NULL OR storage_volumes.name = ?4)
`

type ListStorageVolumesFilteredParams struct {
	ClusterID interface{}
	ServerID  interface{}
	ProjectID interface{}
	Name      interface{}
}

type ListStorageVolumesFilteredRow struct {
	ServerID       int64
	ProjectID      int64
	Name           string
	Object         StorageVolumeObject
	LastUpdated    string
	ServerHostname string
	ClusterName    string
}

func (q *Queries) ListStorageVolumesFiltered(ctx context.Context, arg ListStorageVolumesFilteredParams) ([]ListStorageVolumesFilteredRow, error) {
	rows, err := q.db.QueryContext(ctx, listStorageVolumesFiltered,
		arg.ClusterID,
		arg.ServerID,
		arg.ProjectID,
		arg.Name,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStorageVolumesFilteredRow
	for rows.Next() {
		var i ListStorageVolumesFilteredRow
		if err := rows.Scan(
			&i.ServerID,
			&i.ProjectID,
			&i.Name,
			&i.Object,
			&i.LastUpdated,
			&i.ServerHostname,
			&i.ClusterName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
