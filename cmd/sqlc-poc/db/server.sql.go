// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: server.sql

package db

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/shared/api"
)

const createServer = `-- name: CreateServer :one
INSERT INTO servers (
  cluster_id, hostname, type, connection_url, last_updated
) VALUES (
  ?1, ?2, ?3, ?4, ?5
)
RETURNING id, cluster_id, hostname, type, connection_url, last_updated
`

type CreateServerParams struct {
	ClusterID     int64
	Hostname      string
	Type          api.ServerType
	ConnectionUrl string
	LastUpdated   time.Time
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (Server, error) {
	row := q.db.QueryRowContext(ctx, createServer,
		arg.ClusterID,
		arg.Hostname,
		arg.Type,
		arg.ConnectionUrl,
		arg.LastUpdated,
	)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.Hostname,
		&i.Type,
		&i.ConnectionUrl,
		&i.LastUpdated,
	)
	return i, err
}

const deleteServer = `-- name: DeleteServer :exec
DELETE FROM servers
WHERE id = ?1
`

func (q *Queries) DeleteServer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteServer, id)
	return err
}

const getServer = `-- name: GetServer :one
SELECT id, cluster_id, hostname, type, connection_url, last_updated FROM servers
WHERE id = ?1 LIMIT 1
`

func (q *Queries) GetServer(ctx context.Context, id int64) (Server, error) {
	row := q.db.QueryRowContext(ctx, getServer, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.Hostname,
		&i.Type,
		&i.ConnectionUrl,
		&i.LastUpdated,
	)
	return i, err
}

const listServers = `-- name: ListServers :many
SELECT id, cluster_id, hostname, type, connection_url, last_updated FROM servers
ORDER BY hostname
`

func (q *Queries) ListServers(ctx context.Context) ([]Server, error) {
	rows, err := q.db.QueryContext(ctx, listServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Server
	for rows.Next() {
		var i Server
		if err := rows.Scan(
			&i.ID,
			&i.ClusterID,
			&i.Hostname,
			&i.Type,
			&i.ConnectionUrl,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServer = `-- name: UpdateServer :exec
UPDATE servers
SET
  cluster_id = ?1,
  hostname = ?2,
  type = ?3,
  connection_url = ?4,
  last_updated = ?5
WHERE
  id = ?6
RETURNING id, cluster_id, hostname, type, connection_url, last_updated
`

type UpdateServerParams struct {
	ClusterID     int64
	Hostname      string
	Type          api.ServerType
	ConnectionUrl string
	LastUpdated   time.Time
	ID            int64
}

func (q *Queries) UpdateServer(ctx context.Context, arg UpdateServerParams) error {
	_, err := q.db.ExecContext(ctx, updateServer,
		arg.ClusterID,
		arg.Hostname,
		arg.Type,
		arg.ConnectionUrl,
		arg.LastUpdated,
		arg.ID,
	)
	return err
}
