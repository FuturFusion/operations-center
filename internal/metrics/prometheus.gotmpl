// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package {{ .PkgName }}

import (
	"time"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
{{ range .Imports -}}
	{{ .Alias }} "{{ .Path }}"
{{ end -}}
)

{{ range $i, $mock := .Mocks }}

{{ $decorator := (or .TemplateData.DecoratorName (printf "%sWithPrometheus" $mock.InterfaceName)) }}
{{ $metric_name := (or .TemplateData.MetricName (printf "%s_duration_seconds" ($mock.InterfaceName | snakecase))) }}

// {{ $decorator }} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} interface with all methods wrapped
// with Prometheus metrics.
type {{ $decorator }} struct {
	base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}
	instanceName string
}

var {{ $mock.InterfaceName | camelcase }}DurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name: "{{ $metric_name }}",
		Help: "{{ $mock.InterfaceName | camelcase }} runtime duration and result",
		MaxAge: time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// New{{ $decorator }} returns an instance of the {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} decorated with prometheus summary metric.
func New{{ $decorator }}(base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}, instanceName string) {{ $decorator }} {
	return {{ $decorator }} {
		base: base,
		instanceName: instanceName,
	}
}

{{ range $method := $mock.Methods }}
{{- $returnsError := false -}}
{{- $lastType := "" -}}
{{- range $method.Returns -}}
{{- $lastType = .TypeString }}
{{- end -}}
{{- if eq $lastType "error" -}}
{{- $returnsError = true -}}
{{- end }}

	// {{ $method.Name }} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}.
	func (_d {{ $decorator }}) {{.Name}}({{.ArgList}}) ({{.ReturnArgList}}) {
			_since := time.Now()
			defer func() {
				result := "ok"
				{{- if $returnsError }}
					if err != nil {
						result = "error"
					}
				{{ end }}
				{{ $mock.InterfaceName | camelcase }}DurationSummaryVec.WithLabelValues(_d.instanceName, "{{ $method.Name }}", result).Observe(time.Since(_since).Seconds())
			}()
		{{ if gt ($method.Returns | len) 0 -}}
		return
		{{- end }} _d.base.{{ $method.Name }}({{ $method.ArgCallList }})
	}
{{ end -}}

{{- end -}}
