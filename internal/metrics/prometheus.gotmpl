// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package {{ .PkgName }}

{{- $_ := .Registry.AddImport "time" "time" }}
{{- $_ := .Registry.AddImport "prometheus" "github.com/prometheus/client_golang/prometheus" }}
{{- $_ := .Registry.AddImport "promauto" "github.com/prometheus/client_golang/prometheus/promauto" }}

{{$srcPkgQualifier := $.SrcPkgQualifier}}
{{- if not (index .TemplateData "skip-ensure") }}
	{{- $_ := $.Registry.AddImport $.Registry.SrcPkgName $.Registry.SrcPkg.PkgPath }}
{{- end }}

import (
{{ range .Imports -}}
	{{ .ImportStatement }}
{{ end -}}
)

{{ range $i, $wrapper := .Interfaces }}

{{ $decorator := (or .TemplateData.DecoratorName (printf "%sWithPrometheus" $wrapper.Name)) }}
{{ $metric_name := (or .TemplateData.MetricName (printf "%s_duration_seconds" ($wrapper.Name | snakecase))) }}

// {{ $decorator }} implements {{ $.SrcPkgQualifier }}{{ $wrapper.Name }} interface with all methods wrapped
// with Prometheus metrics.
type {{ $decorator }} struct {
	base {{ $.SrcPkgQualifier }}{{ $wrapper.Name }}
	instanceName string
}

var {{ $wrapper.Name | camelcase }}DurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name: "{{ $metric_name }}",
		Help: "{{ $wrapper.Name | camelcase }} runtime duration and result",
		MaxAge: time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// New{{ $decorator }} returns an instance of the {{ $.SrcPkgQualifier }}{{ $wrapper.Name }} decorated with prometheus summary metric.
func New{{ $decorator }}(base {{ $.SrcPkgQualifier }}{{ $wrapper.Name }}, instanceName string) {{ $decorator }} {
	return {{ $decorator }} {
		base: base,
		instanceName: instanceName,
	}
}

{{ range $method := $wrapper.Methods }}
	// {{ $method.Name }} implements {{ $.SrcPkgQualifier }}{{ $wrapper.Name }}.
	func (_d {{ $decorator }}) {{.Name}}({{.ArgList}}) ({{.ReturnArgList}}) {
			_since := time.Now()
			defer func() {
				result := "ok"
				{{- if $method.ReturnsError }}
					if err != nil {
						result = "error"
					}
				{{ end }}
				{{ $wrapper.Name | camelcase }}DurationSummaryVec.WithLabelValues(_d.instanceName, "{{ $method.Name }}", result).Observe(time.Since(_since).Seconds())
			}()
		{{ $method.ReturnStatement }} _d.base.{{ $method.Name }}({{ $method.ArgCallList }})
	}
{{ end -}}

{{- end -}}
