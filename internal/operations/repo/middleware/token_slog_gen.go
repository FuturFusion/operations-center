// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceOperations "github.com/FuturFusion/operations-center/internal/operations"
)

// TokenRepoWithSlog implements _sourceOperations.TokenRepo that is instrumented with slog logger
type TokenRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceOperations.TokenRepo
}

// NewTokenRepoWithSlog instruments an implementation of the _sourceOperations.TokenRepo with simple logging
func NewTokenRepoWithSlog(base _sourceOperations.TokenRepo, log *slog.Logger) TokenRepoWithSlog {
	return TokenRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceOperations.TokenRepo
func (_d TokenRepoWithSlog) Create(ctx context.Context, token _sourceOperations.Token) (t1 _sourceOperations.Token, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("token", token),
	).Debug("TokenRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("t1", t1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("TokenRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("TokenRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, token)
}
