// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/operations"
)

// Ensure, that TokenRepoMock does implement operations.TokenRepo.
// If this is not the case, regenerate this file with moq.
var _ operations.TokenRepo = &TokenRepoMock{}

// TokenRepoMock is a mock implementation of operations.TokenRepo.
//
//	func TestSomethingThatUsesTokenRepo(t *testing.T) {
//
//		// make and configure a mocked operations.TokenRepo
//		mockedTokenRepo := &TokenRepoMock{
//			CreateFunc: func(ctx context.Context, token operations.Token) (operations.Token, error) {
//				panic("mock out the Create method")
//			},
//		}
//
//		// use mockedTokenRepo in code that requires operations.TokenRepo
//		// and then make assertions.
//
//	}
type TokenRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, token operations.Token) (operations.Token, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token operations.Token
		}
	}
	lockCreate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *TokenRepoMock) Create(ctx context.Context, token operations.Token) (operations.Token, error) {
	if mock.CreateFunc == nil {
		panic("TokenRepoMock.CreateFunc: method is nil but TokenRepo.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token operations.Token
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, token)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTokenRepo.CreateCalls())
func (mock *TokenRepoMock) CreateCalls() []struct {
	Ctx   context.Context
	Token operations.Token
} {
	var calls []struct {
		Ctx   context.Context
		Token operations.Token
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}
