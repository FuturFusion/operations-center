// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
	"github.com/FuturFusion/operations-center/internal/testing/uuidgen"
)

func TestNetworkACLService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.NetworkACLs
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.NetworkACLs{
				inventory.NetworkACL{
					Name: "one",
				},
				inventory.NetworkACL{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.NetworkACLs{
				inventory.NetworkACL{
					Name: "one",
				},
				inventory.NetworkACL{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.NetworkACLs{
				inventory.NetworkACL{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.NetworkACLs{
				inventory.NetworkACL{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.NetworkACLs{
				inventory.NetworkACL{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkACLRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.NetworkACLFilter) (inventory.NetworkACLs, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			networkACLSvc := inventory.NewNetworkACLService(repo, nil, nil, inventory.NetworkACLWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkACL, err := networkACLSvc.GetAllWithFilter(context.Background(), inventory.NetworkACLFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkACL, tc.count)
		})
	}
}

func TestNetworkACLService_GetAllUUIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                         string
		filterExpression             *string
		repoGetAllUUIDsWithFilter    []uuid.UUID
		repoGetAllUUIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
				uuidgen.FromPattern(t, "2"),
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`UUID == "11111111-1111-1111-1111-111111111111"`),
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
				uuidgen.FromPattern(t, "2"),
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                         "error - repo",
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkACLRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkACLFilter) ([]uuid.UUID, error) {
					return tc.repoGetAllUUIDsWithFilter, tc.repoGetAllUUIDsWithFilterErr
				},
			}

			networkACLSvc := inventory.NewNetworkACLService(repo, nil, nil, inventory.NetworkACLWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkACLUUIDs, err := networkACLSvc.GetAllUUIDsWithFilter(context.Background(), inventory.NetworkACLFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkACLUUIDs, tc.count)
		})
	}
}

func TestNetworkACLService_GetByUUID(t *testing.T) {
	tests := []struct {
		name                    string
		idArg                   uuid.UUID
		repoGetByUUIDNetworkACL inventory.NetworkACL
		repoGetByUUIDErr        error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: uuidgen.FromPattern(t, "1"),
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "one",
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.NetworkACL{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:             "error - repo",
			idArg:            uuidgen.FromPattern(t, "1"),
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkACLRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkACL, error) {
					return tc.repoGetByUUIDNetworkACL, tc.repoGetByUUIDErr
				},
			}

			networkACLSvc := inventory.NewNetworkACLService(repo, nil, nil, inventory.NetworkACLWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkACL, err := networkACLSvc.GetByUUID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByUUIDNetworkACL, networkACL)
		})
	}
}

func TestNetworkACLService_ResyncByUUID(t *testing.T) {
	tests := []struct {
		name                                   string
		clusterSvcGetEndpoint                  provisioning.Endpoint
		clusterSvcGetEndpointErr               error
		networkACLClientGetNetworkACLByName    incusapi.NetworkACL
		networkACLClientGetNetworkACLByNameErr error
		repoGetByUUIDNetworkACL                inventory.NetworkACL
		repoGetByUUIDErr                       error
		repoUpdateByUUIDErr                    error
		repoDeleteByUUIDErr                    error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByName: incusapi.NetworkACL{
				NetworkACLPost: incusapi.NetworkACLPost{
					Name: "networkACL one",
				},
				Project: "project one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - networkACL get by name - not found",
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:             "error - networkACL get by UUID",
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpointErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkACL get by name",
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkACL get by name - not found - delete by uuid",
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByNameErr: domain.ErrNotFound,
			repoDeleteByUUIDErr:                    boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "one",
				Name:        "", // invalid
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByName: incusapi.NetworkACL{
				NetworkACLPost: incusapi.NetworkACLPost{
					Name: "networkACL one",
				},
				Project: "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by UUID",
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByName: incusapi.NetworkACL{
				NetworkACLPost: incusapi.NetworkACLPost{
					Name: "networkACL one",
				},
				Project: "project one",
			},
			repoUpdateByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkACLRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkACL, error) {
					return tc.repoGetByUUIDNetworkACL, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, networkACL inventory.NetworkACL) (inventory.NetworkACL, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkACL.LastUpdated)
					return inventory.NetworkACL{}, tc.repoUpdateByUUIDErr
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return tc.repoDeleteByUUIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					require.Equal(t, "one", name)
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			networkACLClient := &serverMock.NetworkACLServerClientMock{
				GetNetworkACLByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkACLName string) (incusapi.NetworkACL, error) {
					require.Equal(t, tc.repoGetByUUIDNetworkACL.Name, networkACLName)
					require.Equal(t, tc.repoGetByUUIDNetworkACL.ProjectName, projectName)
					return tc.networkACLClientGetNetworkACLByName, tc.networkACLClientGetNetworkACLByNameErr
				},
			}

			networkACLSvc := inventory.NewNetworkACLService(repo, clusterSvc, networkACLClient, inventory.NetworkACLWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkACLSvc.ResyncByUUID(context.Background(), uuidgen.FromPattern(t, "1"))

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkACLService_ResyncByName(t *testing.T) {
	tests := []struct {
		name                                   string
		argClusterName                         string
		argLifecycleEvent                      domain.LifecycleEvent
		repoGetAllUUIDsWithFilterUUIDs         []uuid.UUID
		repoGetAllUUIDsWithFilterErr           error
		clusterSvcGetEndpoint                  provisioning.Endpoint
		clusterSvcGetEndpointErr               error
		networkACLClientGetNetworkACLByName    incusapi.NetworkACL
		networkACLClientGetNetworkACLByNameErr error
		serviceOptions                         []inventory.NetworkACLServiceOption
		repoCreateErr                          error
		repoGetByUUIDNetworkACL                inventory.NetworkACL
		repoGetByUUIDErr                       error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:           "success - not responsible",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "invalid",
			},

			assertErr: require.NoError,
		},
		{
			name:           "success - not found",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByName: incusapi.NetworkACL{
				NetworkACLPost: incusapi.NetworkACLPost{
					Name: "network_acl",
				},
				Project: "project",
			},

			assertErr: require.NoError,
		},
		{
			name:           "success - not found with sync filter",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByName: incusapi.NetworkACL{
				NetworkACLPost: incusapi.NetworkACLPost{
					Name: "network_acl filtered", // matches filter
				},
				Project: "project",
			},
			serviceOptions: []inventory.NetworkACLServiceOption{
				inventory.NetworkACLWithSyncFilter(func(networkACL inventory.NetworkACL) bool {
					return networkACL.Name == "network_acl filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:           "success - update existing",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},
			repoGetByUUIDNetworkACL: inventory.NetworkACL{
				UUID:        uuidgen.FromPattern(t, "1"),
				Cluster:     "cluster",
				Name:        "network_acl",
				ProjectName: "project",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByName: incusapi.NetworkACL{
				NetworkACLPost: incusapi.NetworkACLPost{
					Name: "network_acl",
				},
				Project: "project",
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo.GetAllUUIDsWithFilter",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: require.Error,
		},
		{
			name:           "error - not found - clusterSvc.GetEndpoint",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpointErr:       boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name:           "error - not found - client.GetNetworkACLByName",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name:           "error - not found - validate",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByName: incusapi.NetworkACL{
				NetworkACLPost: incusapi.NetworkACLPost{
					Name: "", // invalid
				},
				Project: "project",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name:           "error - not found - repo.Create",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLByName: incusapi.NetworkACL{
				NetworkACLPost: incusapi.NetworkACLPost{
					Name: "network_acl",
				},
				Project: "project",
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name:           "error - update existing - ResyncByUUID",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "network-acl",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					Name:        "network_acl",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkACLRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkACLFilter) ([]uuid.UUID, error) {
					require.Equal(t, tc.argClusterName, *filter.Cluster)
					require.Equal(t, tc.argLifecycleEvent.Source.ProjectName, *filter.Project)
					require.Equal(t, tc.argLifecycleEvent.Source.Name, *filter.Name)
					return tc.repoGetAllUUIDsWithFilterUUIDs, tc.repoGetAllUUIDsWithFilterErr
				},
				CreateFunc: func(ctx context.Context, networkACL inventory.NetworkACL) (inventory.NetworkACL, error) {
					require.Equal(t, tc.argClusterName, networkACL.Cluster)
					require.Equal(t, tc.argLifecycleEvent.Source.ProjectName, networkACL.ProjectName)
					require.Equal(t, tc.argLifecycleEvent.Source.Name, networkACL.Name)
					return inventory.NetworkACL{}, tc.repoCreateErr
				},
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkACL, error) {
					return tc.repoGetByUUIDNetworkACL, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, networkACL inventory.NetworkACL) (inventory.NetworkACL, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkACL.LastUpdated)
					return inventory.NetworkACL{}, nil
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return nil
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					require.Equal(t, tc.argClusterName, name)
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			networkACLClient := &serverMock.NetworkACLServerClientMock{
				GetNetworkACLByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkACLName string) (incusapi.NetworkACL, error) {
					clusterName, err := endpoint.GetServerName()
					require.NoError(t, err)
					require.Equal(t, tc.argClusterName, clusterName)
					require.Equal(t, tc.argLifecycleEvent.Source.ProjectName, projectName)
					require.Equal(t, tc.argLifecycleEvent.Source.Name, networkACLName)
					return tc.networkACLClientGetNetworkACLByName, tc.networkACLClientGetNetworkACLByNameErr
				},
			}

			networkACLSvc := inventory.NewNetworkACLService(repo, clusterSvc, networkACLClient,
				append(tc.serviceOptions,
					inventory.NetworkACLWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkACLSvc.ResyncByName(context.Background(), tc.argClusterName, tc.argLifecycleEvent)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkACLService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                              string
		clusterSvcGetEndpoint             provisioning.Endpoint
		clusterSvcGetEndpointErr          error
		networkACLClientGetNetworkACLs    []incusapi.NetworkACL
		networkACLClientGetNetworkACLsErr error
		repoDeleteByClusterNameErr        error
		repoCreateErr                     error
		serviceOptions                    []inventory.NetworkACLServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLs: []incusapi.NetworkACL{
				{
					NetworkACLPost: incusapi.NetworkACLPost{
						Name: "networkACL one",
					},
					Project: "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLs: []incusapi.NetworkACL{
				{
					NetworkACLPost: incusapi.NetworkACLPost{
						Name: "networkACL one",
					},
					Project: "project one",
				},
				{
					NetworkACLPost: incusapi.NetworkACLPost{
						Name: "networkACL filtered",
					},
					Project: "project one",
				},
			},
			serviceOptions: []inventory.NetworkACLServiceOption{
				inventory.NetworkACLWithSyncFilter(func(networkACL inventory.NetworkACL) bool {
					return networkACL.Name == "networkACL filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                     "error - cluster service get by ID",
			clusterSvcGetEndpointErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkACL client get NetworkACLs",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_acls delete by cluster ID",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLs: []incusapi.NetworkACL{
				{
					NetworkACLPost: incusapi.NetworkACLPost{
						Name: "networkACL one",
					},
					Project: "project one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLs: []incusapi.NetworkACL{
				{
					NetworkACLPost: incusapi.NetworkACLPost{
						Name: "", // invalid
					},
					Project: "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkACL create",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkACLClientGetNetworkACLs: []incusapi.NetworkACL{
				{
					NetworkACLPost: incusapi.NetworkACLPost{
						Name: "networkACL one",
					},
					Project: "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkACLRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, networkACL inventory.NetworkACL) (inventory.NetworkACL, error) {
					return inventory.NetworkACL{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			networkACLClient := &serverMock.NetworkACLServerClientMock{
				GetNetworkACLsFunc: func(ctx context.Context, endpoint provisioning.Endpoint) ([]incusapi.NetworkACL, error) {
					return tc.networkACLClientGetNetworkACLs, tc.networkACLClientGetNetworkACLsErr
				},
			}

			networkACLSvc := inventory.NewNetworkACLService(repo, clusterSvc, networkACLClient,
				append(
					tc.serviceOptions,
					inventory.NetworkACLWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkACLSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
