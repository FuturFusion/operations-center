// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// InventoryAggregateServiceWithSlog implements inventory.InventoryAggregateService that is instrumented with slog logger.
type InventoryAggregateServiceWithSlog struct {
	_log  *slog.Logger
	_base inventory.InventoryAggregateService
}

// NewInventoryAggregateServiceWithSlog instruments an implementation of the inventory.InventoryAggregateService with simple logging.
func NewInventoryAggregateServiceWithSlog(base inventory.InventoryAggregateService, log *slog.Logger) InventoryAggregateServiceWithSlog {
	return InventoryAggregateServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetAllWithFilter implements inventory.InventoryAggregateService.
func (_d InventoryAggregateServiceWithSlog) GetAllWithFilter(ctx context.Context, filter inventory.InventoryAggregateFilter) (inventoryAggregates inventory.InventoryAggregates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("=> calling GetAllWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("inventoryAggregates", inventoryAggregates),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAllWithFilter returned an error")
		} else {
			log.Debug("<= method GetAllWithFilter finished")
		}
	}()
	return _d._base.GetAllWithFilter(ctx, filter)
}
