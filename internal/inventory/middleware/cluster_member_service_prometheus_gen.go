// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ClusterMemberServiceWithPrometheus implements inventory.ClusterMemberService interface with all methods wrapped
// with Prometheus metrics.
type ClusterMemberServiceWithPrometheus struct {
	base         inventory.ClusterMemberService
	instanceName string
}

var clusterMemberServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "cluster_member_service_duration_seconds",
		Help:       "clusterMemberService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewClusterMemberServiceWithPrometheus returns an instance of the inventory.ClusterMemberService decorated with prometheus summary metric.
func NewClusterMemberServiceWithPrometheus(base inventory.ClusterMemberService, instanceName string) ClusterMemberServiceWithPrometheus {
	return ClusterMemberServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetAllIDsWithFilter implements inventory.ClusterMemberService.
func (_d ClusterMemberServiceWithPrometheus) GetAllIDsWithFilter(ctx context.Context, filter inventory.ClusterMemberFilter) (ints []int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterMemberServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllIDsWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements inventory.ClusterMemberService.
func (_d ClusterMemberServiceWithPrometheus) GetByID(ctx context.Context, id int) (clusterMember inventory.ClusterMember, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterMemberServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByID(ctx, id)
}

// ResyncByID implements inventory.ClusterMemberService.
func (_d ClusterMemberServiceWithPrometheus) ResyncByID(ctx context.Context, id int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterMemberServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "ResyncByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ResyncByID(ctx, id)
}

// SyncCluster implements inventory.ClusterMemberService.
func (_d ClusterMemberServiceWithPrometheus) SyncCluster(ctx context.Context, clusterID int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterMemberServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "SyncCluster", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.SyncCluster(ctx, clusterID)
}
