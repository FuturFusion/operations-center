// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// ProvisioningServerServiceWithSlog implements inventory.ProvisioningServerService that is instrumented with slog logger.
type ProvisioningServerServiceWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.ProvisioningServerService
	_isInformativeErrFunc func(error) bool
}

type ProvisioningServerServiceWithSlogOption func(s *ProvisioningServerServiceWithSlog)

func ProvisioningServerServiceWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ProvisioningServerServiceWithSlogOption {
	return func(_base *ProvisioningServerServiceWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewProvisioningServerServiceWithSlog instruments an implementation of the inventory.ProvisioningServerService with simple logging.
func NewProvisioningServerServiceWithSlog(base inventory.ProvisioningServerService, log *slog.Logger, opts ...ProvisioningServerServiceWithSlogOption) ProvisioningServerServiceWithSlog {
	this := ProvisioningServerServiceWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetAllByClusterName implements inventory.ProvisioningServerService.
func (_d ProvisioningServerServiceWithSlog) GetAllByClusterName(ctx context.Context, name string) (servers provisioning.Servers, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("=> calling GetAllByClusterName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("servers", servers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetAllByClusterName returned an informative error")
			} else {
				log.Error("<= method GetAllByClusterName returned an error")
			}
		} else {
			log.Debug("<= method GetAllByClusterName finished")
		}
	}()
	return _d._base.GetAllByClusterName(ctx, name)
}

// GetByName implements inventory.ProvisioningServerService.
func (_d ProvisioningServerServiceWithSlog) GetByName(ctx context.Context, name string) (server *provisioning.Server, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("=> calling GetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("server", server),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetByName returned an informative error")
			} else {
				log.Error("<= method GetByName returned an error")
			}
		} else {
			log.Debug("<= method GetByName finished")
		}
	}()
	return _d._base.GetByName(ctx, name)
}
