// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// ProfileServiceWithSlog implements inventory.ProfileService that is instrumented with slog logger.
type ProfileServiceWithSlog struct {
	_log  *slog.Logger
	_base inventory.ProfileService
}

// NewProfileServiceWithSlog instruments an implementation of the inventory.ProfileService with simple logging.
func NewProfileServiceWithSlog(base inventory.ProfileService, log *slog.Logger) ProfileServiceWithSlog {
	return ProfileServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetAllIDsWithFilter implements inventory.ProfileService.
func (_d ProfileServiceWithSlog) GetAllIDsWithFilter(ctx context.Context, filter inventory.ProfileFilter) (ints []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("ProfileServiceWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ints", ints),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProfileServiceWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("ProfileServiceWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements inventory.ProfileService.
func (_d ProfileServiceWithSlog) GetByID(ctx context.Context, id int) (profile inventory.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("ProfileServiceWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("profile", profile),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProfileServiceWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ProfileServiceWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// ResyncByID implements inventory.ProfileService.
func (_d ProfileServiceWithSlog) ResyncByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("ProfileServiceWithSlog: calling ResyncByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProfileServiceWithSlog: method ResyncByID returned an error")
		} else {
			log.Debug("ProfileServiceWithSlog: method ResyncByID finished")
		}
	}()
	return _d._base.ResyncByID(ctx, id)
}

// SyncCluster implements inventory.ProfileService.
func (_d ProfileServiceWithSlog) SyncCluster(ctx context.Context, cluster string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("cluster", cluster),
		)
	}
	log.Debug("ProfileServiceWithSlog: calling SyncCluster")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProfileServiceWithSlog: method SyncCluster returned an error")
		} else {
			log.Debug("ProfileServiceWithSlog: method SyncCluster finished")
		}
	}()
	return _d._base.SyncCluster(ctx, cluster)
}
