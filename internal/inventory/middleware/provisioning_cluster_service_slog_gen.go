// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// ProvisioningClusterServiceWithSlog implements inventory.ProvisioningClusterService that is instrumented with slog logger.
type ProvisioningClusterServiceWithSlog struct {
	_log  *slog.Logger
	_base inventory.ProvisioningClusterService
}

// NewProvisioningClusterServiceWithSlog instruments an implementation of the inventory.ProvisioningClusterService with simple logging.
func NewProvisioningClusterServiceWithSlog(base inventory.ProvisioningClusterService, log *slog.Logger) ProvisioningClusterServiceWithSlog {
	return ProvisioningClusterServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetAll implements inventory.ProvisioningClusterService.
func (_d ProvisioningClusterServiceWithSlog) GetAll(ctx context.Context) (clusters provisioning.Clusters, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("ProvisioningClusterServiceWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusters", clusters),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProvisioningClusterServiceWithSlog: method GetAll returned an error")
		} else {
			log.Debug("ProvisioningClusterServiceWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetByID implements inventory.ProvisioningClusterService.
func (_d ProvisioningClusterServiceWithSlog) GetByID(ctx context.Context, id int) (cluster provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("ProvisioningClusterServiceWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster", cluster),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProvisioningClusterServiceWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ProvisioningClusterServiceWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}
