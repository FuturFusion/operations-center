// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// StoragePoolServiceWithSlog implements inventory.StoragePoolService that is instrumented with slog logger.
type StoragePoolServiceWithSlog struct {
	_log  *slog.Logger
	_base inventory.StoragePoolService
}

// NewStoragePoolServiceWithSlog instruments an implementation of the inventory.StoragePoolService with simple logging.
func NewStoragePoolServiceWithSlog(base inventory.StoragePoolService, log *slog.Logger) StoragePoolServiceWithSlog {
	return StoragePoolServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetAllIDsWithFilter implements inventory.StoragePoolService.
func (_d StoragePoolServiceWithSlog) GetAllIDsWithFilter(ctx context.Context, filter inventory.StoragePoolFilter) (ints []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("StoragePoolServiceWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ints", ints),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StoragePoolServiceWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("StoragePoolServiceWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements inventory.StoragePoolService.
func (_d StoragePoolServiceWithSlog) GetByID(ctx context.Context, id int) (storagePool inventory.StoragePool, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("StoragePoolServiceWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storagePool", storagePool),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StoragePoolServiceWithSlog: method GetByID returned an error")
		} else {
			log.Debug("StoragePoolServiceWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// ResyncByID implements inventory.StoragePoolService.
func (_d StoragePoolServiceWithSlog) ResyncByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("StoragePoolServiceWithSlog: calling ResyncByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StoragePoolServiceWithSlog: method ResyncByID returned an error")
		} else {
			log.Debug("StoragePoolServiceWithSlog: method ResyncByID finished")
		}
	}()
	return _d._base.ResyncByID(ctx, id)
}

// SyncCluster implements inventory.StoragePoolService.
func (_d StoragePoolServiceWithSlog) SyncCluster(ctx context.Context, cluster string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("cluster", cluster),
		)
	}
	log.Debug("StoragePoolServiceWithSlog: calling SyncCluster")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StoragePoolServiceWithSlog: method SyncCluster returned an error")
		} else {
			log.Debug("StoragePoolServiceWithSlog: method SyncCluster finished")
		}
	}()
	return _d._base.SyncCluster(ctx, cluster)
}
