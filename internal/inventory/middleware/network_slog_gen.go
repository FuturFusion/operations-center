// Code generated by gowrap. DO NOT EDIT.
// template: ../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// NetworkServiceWithSlog implements _sourceInventory.NetworkService that is instrumented with slog logger
type NetworkServiceWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkService
}

// NewNetworkServiceWithSlog instruments an implementation of the _sourceInventory.NetworkService with simple logging
func NewNetworkServiceWithSlog(base _sourceInventory.NetworkService, log *slog.Logger) NetworkServiceWithSlog {
	return NetworkServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetAllIDsWithFilter implements _sourceInventory.NetworkService
func (_d NetworkServiceWithSlog) GetAllIDsWithFilter(ctx context.Context, filter _sourceInventory.NetworkFilter) (ia1 []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("NetworkServiceWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ia1", ia1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkServiceWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("NetworkServiceWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements _sourceInventory.NetworkService
func (_d NetworkServiceWithSlog) GetByID(ctx context.Context, id int) (n1 _sourceInventory.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("NetworkServiceWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkServiceWithSlog: method GetByID returned an error")
		} else {
			log.Debug("NetworkServiceWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// ResyncByID implements _sourceInventory.NetworkService
func (_d NetworkServiceWithSlog) ResyncByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("NetworkServiceWithSlog: calling ResyncByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkServiceWithSlog: method ResyncByID returned an error")
		} else {
			log.Debug("NetworkServiceWithSlog: method ResyncByID finished")
		}
	}()
	return _d._base.ResyncByID(ctx, id)
}

// SyncAll implements _sourceInventory.NetworkService
func (_d NetworkServiceWithSlog) SyncAll(ctx context.Context) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("NetworkServiceWithSlog: calling SyncAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkServiceWithSlog: method SyncAll returned an error")
		} else {
			log.Debug("NetworkServiceWithSlog: method SyncAll finished")
		}
	}()
	return _d._base.SyncAll(ctx)
}

// SyncCluster implements _sourceInventory.NetworkService
func (_d NetworkServiceWithSlog) SyncCluster(ctx context.Context, clusterID int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("clusterID", clusterID),
		)
	}
	log.Debug("NetworkServiceWithSlog: calling SyncCluster")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkServiceWithSlog: method SyncCluster returned an error")
		} else {
			log.Debug("NetworkServiceWithSlog: method SyncCluster finished")
		}
	}()
	return _d._base.SyncCluster(ctx, clusterID)
}

// SyncServer implements _sourceInventory.NetworkService
func (_d NetworkServiceWithSlog) SyncServer(ctx context.Context, serverID int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("serverID", serverID),
		)
	}
	log.Debug("NetworkServiceWithSlog: calling SyncServer")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkServiceWithSlog: method SyncServer returned an error")
		} else {
			log.Debug("NetworkServiceWithSlog: method SyncServer finished")
		}
	}()
	return _d._base.SyncServer(ctx, serverID)
}
