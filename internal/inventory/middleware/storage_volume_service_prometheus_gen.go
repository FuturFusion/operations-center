// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/google/uuid"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// StorageVolumeServiceWithPrometheus implements inventory.StorageVolumeService interface with all methods wrapped
// with Prometheus metrics.
type StorageVolumeServiceWithPrometheus struct {
	base         inventory.StorageVolumeService
	instanceName string
}

var storageVolumeServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "storage_volume_service_duration_seconds",
		Help:       "storageVolumeService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewStorageVolumeServiceWithPrometheus returns an instance of the inventory.StorageVolumeService decorated with prometheus summary metric.
func NewStorageVolumeServiceWithPrometheus(base inventory.StorageVolumeService, instanceName string) StorageVolumeServiceWithPrometheus {
	return StorageVolumeServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetAllUUIDsWithFilter implements inventory.StorageVolumeService.
func (_d StorageVolumeServiceWithPrometheus) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.StorageVolumeFilter) (uUIDs []uuid.UUID, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		storageVolumeServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllUUIDsWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements inventory.StorageVolumeService.
func (_d StorageVolumeServiceWithPrometheus) GetAllWithFilter(ctx context.Context, filter inventory.StorageVolumeFilter) (storageVolumes inventory.StorageVolumes, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		storageVolumeServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements inventory.StorageVolumeService.
func (_d StorageVolumeServiceWithPrometheus) GetByUUID(ctx context.Context, id uuid.UUID) (storageVolume inventory.StorageVolume, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		storageVolumeServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByUUID(ctx, id)
}

// ResyncByName implements inventory.StorageVolumeService.
func (_d StorageVolumeServiceWithPrometheus) ResyncByName(ctx context.Context, clusterName string, event domain.LifecycleEvent) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		storageVolumeServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "ResyncByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ResyncByName(ctx, clusterName, event)
}

// ResyncByUUID implements inventory.StorageVolumeService.
func (_d StorageVolumeServiceWithPrometheus) ResyncByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		storageVolumeServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "ResyncByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ResyncByUUID(ctx, id)
}

// SyncCluster implements inventory.StorageVolumeService.
func (_d StorageVolumeServiceWithPrometheus) SyncCluster(ctx context.Context, cluster string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		storageVolumeServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "SyncCluster", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.SyncCluster(ctx, cluster)
}
