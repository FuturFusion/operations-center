// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/google/uuid"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// InstanceServiceWithPrometheus implements inventory.InstanceService interface with all methods wrapped
// with Prometheus metrics.
type InstanceServiceWithPrometheus struct {
	base         inventory.InstanceService
	instanceName string
}

var instanceServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "instance_service_duration_seconds",
		Help:       "instanceService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewInstanceServiceWithPrometheus returns an instance of the inventory.InstanceService decorated with prometheus summary metric.
func NewInstanceServiceWithPrometheus(base inventory.InstanceService, instanceName string) InstanceServiceWithPrometheus {
	return InstanceServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetAllUUIDsWithFilter implements inventory.InstanceService.
func (_d InstanceServiceWithPrometheus) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.InstanceFilter) (uUIDs []uuid.UUID, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		instanceServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllUUIDsWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements inventory.InstanceService.
func (_d InstanceServiceWithPrometheus) GetAllWithFilter(ctx context.Context, filter inventory.InstanceFilter) (instances inventory.Instances, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		instanceServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements inventory.InstanceService.
func (_d InstanceServiceWithPrometheus) GetByUUID(ctx context.Context, id uuid.UUID) (instance inventory.Instance, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		instanceServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByUUID(ctx, id)
}

// ResyncByUUID implements inventory.InstanceService.
func (_d InstanceServiceWithPrometheus) ResyncByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		instanceServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "ResyncByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ResyncByUUID(ctx, id)
}

// SyncCluster implements inventory.InstanceService.
func (_d InstanceServiceWithPrometheus) SyncCluster(ctx context.Context, cluster string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		instanceServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "SyncCluster", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.SyncCluster(ctx, cluster)
}
