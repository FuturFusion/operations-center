// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/google/uuid"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// NetworkIntegrationServiceWithPrometheus implements inventory.NetworkIntegrationService interface with all methods wrapped
// with Prometheus metrics.
type NetworkIntegrationServiceWithPrometheus struct {
	base         inventory.NetworkIntegrationService
	instanceName string
}

var networkIntegrationServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "network_integration_service_duration_seconds",
		Help:       "networkIntegrationService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewNetworkIntegrationServiceWithPrometheus returns an instance of the inventory.NetworkIntegrationService decorated with prometheus summary metric.
func NewNetworkIntegrationServiceWithPrometheus(base inventory.NetworkIntegrationService, instanceName string) NetworkIntegrationServiceWithPrometheus {
	return NetworkIntegrationServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetAllUUIDsWithFilter implements inventory.NetworkIntegrationService.
func (_d NetworkIntegrationServiceWithPrometheus) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.NetworkIntegrationFilter) (uUIDs []uuid.UUID, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkIntegrationServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllUUIDsWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements inventory.NetworkIntegrationService.
func (_d NetworkIntegrationServiceWithPrometheus) GetAllWithFilter(ctx context.Context, filter inventory.NetworkIntegrationFilter) (networkIntegrations inventory.NetworkIntegrations, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkIntegrationServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements inventory.NetworkIntegrationService.
func (_d NetworkIntegrationServiceWithPrometheus) GetByUUID(ctx context.Context, id uuid.UUID) (networkIntegration inventory.NetworkIntegration, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkIntegrationServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByUUID(ctx, id)
}

// ResyncByName implements inventory.NetworkIntegrationService.
func (_d NetworkIntegrationServiceWithPrometheus) ResyncByName(ctx context.Context, clusterName string, event domain.LifecycleEvent) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkIntegrationServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "ResyncByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ResyncByName(ctx, clusterName, event)
}

// ResyncByUUID implements inventory.NetworkIntegrationService.
func (_d NetworkIntegrationServiceWithPrometheus) ResyncByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkIntegrationServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "ResyncByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ResyncByUUID(ctx, id)
}

// SyncCluster implements inventory.NetworkIntegrationService.
func (_d NetworkIntegrationServiceWithPrometheus) SyncCluster(ctx context.Context, cluster string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkIntegrationServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "SyncCluster", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.SyncCluster(ctx, cluster)
}
