// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestNetworkIntegrationService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkIntegrationRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkIntegrationFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			networkIntegrationSvc := inventory.NewNetworkIntegrationService(repo, nil, nil, inventory.NetworkIntegrationWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkIntegrationIDs, err := networkIntegrationSvc.GetAllIDsWithFilter(context.Background(), inventory.NetworkIntegrationFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkIntegrationIDs, tc.count)
		})
	}
}

func TestNetworkIntegrationService_GetByID(t *testing.T) {
	tests := []struct {
		name                          string
		idArg                         int
		repoGetByIDNetworkIntegration inventory.NetworkIntegration
		repoGetByIDErr                error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDNetworkIntegration: inventory.NetworkIntegration{
				ID:          1,
				ClusterID:   1,
				Name:        "one",
				Object:      incusapi.NetworkIntegration{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkIntegrationRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkIntegration, error) {
					return tc.repoGetByIDNetworkIntegration, tc.repoGetByIDErr
				},
			}

			networkIntegrationSvc := inventory.NewNetworkIntegrationService(repo, nil, nil, inventory.NetworkIntegrationWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkIntegration, err := networkIntegrationSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDNetworkIntegration, networkIntegration)
		})
	}
}

func TestNetworkIntegrationService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                                                   string
		clusterSvcGetByIDCluster                               provisioning.Cluster
		clusterSvcGetByIDErr                                   error
		networkIntegrationClientGetNetworkIntegrationByName    incusapi.NetworkIntegration
		networkIntegrationClientGetNetworkIntegrationByNameErr error
		repoGetByIDNetworkIntegration                          inventory.NetworkIntegration
		repoGetByIDErr                                         error
		repoUpdateByIDErr                                      error
		repoDeleteByIDErr                                      error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDNetworkIntegration: inventory.NetworkIntegration{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrationByName: incusapi.NetworkIntegration{
				Name: "networkIntegration one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - networkIntegration get by name - not found",
			repoGetByIDNetworkIntegration: inventory.NetworkIntegration{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrationByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - networkIntegration get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDNetworkIntegration: inventory.NetworkIntegration{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkIntegration get by name",
			repoGetByIDNetworkIntegration: inventory.NetworkIntegration{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrationByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkIntegration get by name - not found - delete by id",
			repoGetByIDNetworkIntegration: inventory.NetworkIntegration{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrationByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDNetworkIntegration: inventory.NetworkIntegration{
				ID:        1,
				ClusterID: 1,
				Name:      "", // invalid
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrationByName: incusapi.NetworkIntegration{
				Name: "networkIntegration one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDNetworkIntegration: inventory.NetworkIntegration{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrationByName: incusapi.NetworkIntegration{
				Name: "networkIntegration one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkIntegrationRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkIntegration, error) {
					return tc.repoGetByIDNetworkIntegration, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, networkIntegration inventory.NetworkIntegration) (inventory.NetworkIntegration, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkIntegration.LastUpdated)
					return inventory.NetworkIntegration{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Cluster, error) {
					require.Equal(t, 1, id)
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkIntegrationClient := &serverMock.NetworkIntegrationServerClientMock{
				GetNetworkIntegrationByNameFunc: func(ctx context.Context, connectionURL string, networkIntegrationName string) (incusapi.NetworkIntegration, error) {
					require.Equal(t, tc.repoGetByIDNetworkIntegration.Name, networkIntegrationName)
					return tc.networkIntegrationClientGetNetworkIntegrationByName, tc.networkIntegrationClientGetNetworkIntegrationByNameErr
				},
			}

			networkIntegrationSvc := inventory.NewNetworkIntegrationService(repo, clusterSvc, networkIntegrationClient, inventory.NetworkIntegrationWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkIntegrationSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkIntegrationService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                              string
		clusterSvcGetByIDCluster                          provisioning.Cluster
		clusterSvcGetByIDErr                              error
		networkIntegrationClientGetNetworkIntegrations    []incusapi.NetworkIntegration
		networkIntegrationClientGetNetworkIntegrationsErr error
		repoDeleteByClusterIDErr                          error
		repoCreateErr                                     error
		serviceOptions                                    []inventory.NetworkIntegrationServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrations: []incusapi.NetworkIntegration{
				{
					Name: "networkIntegration one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkIntegration client get NetworkIntegrations",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrationsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_integrations delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrations: []incusapi.NetworkIntegration{
				{
					Name: "networkIntegration one",
				},
			},
			repoDeleteByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrations: []incusapi.NetworkIntegration{
				{
					Name: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkIntegration create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkIntegrationClientGetNetworkIntegrations: []incusapi.NetworkIntegration{
				{
					Name: "networkIntegration one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkIntegrationRepoMock{
				DeleteByClusterIDFunc: func(ctx context.Context, clusterID int) error {
					return tc.repoDeleteByClusterIDErr
				},
				CreateFunc: func(ctx context.Context, networkIntegration inventory.NetworkIntegration) (inventory.NetworkIntegration, error) {
					return inventory.NetworkIntegration{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Cluster, error) {
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkIntegrationClient := &serverMock.NetworkIntegrationServerClientMock{
				GetNetworkIntegrationsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkIntegration, error) {
					return tc.networkIntegrationClientGetNetworkIntegrations, tc.networkIntegrationClientGetNetworkIntegrationsErr
				},
			}

			networkIntegrationSvc := inventory.NewNetworkIntegrationService(repo, clusterSvc, networkIntegrationClient,
				append(
					tc.serviceOptions,
					inventory.NetworkIntegrationWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkIntegrationSvc.SyncCluster(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}
