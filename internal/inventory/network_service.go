// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkService struct {
	repo          NetworkRepo
	clusterSvc    ClusterService
	serverSvc     ServerService
	networkClient NetworkServerClient

	now func() time.Time
}

var _ NetworkService = &networkService{}

type NetworkServiceOption func(s *networkService)

func NewNetworkService(repo NetworkRepo, clusterSvc ClusterService, serverSvc ServerService, client NetworkServerClient, opts ...NetworkServiceOption) networkService {
	networkSvc := networkService{
		repo:          repo,
		clusterSvc:    clusterSvc,
		serverSvc:     serverSvc,
		networkClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkSvc)
	}

	return networkSvc
}

func (s networkService) GetAllIDsWithFilter(ctx context.Context, filter NetworkFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s networkService) GetByID(ctx context.Context, id int) (Network, error) {
	return s.repo.GetByID(ctx, id)
}

func (s networkService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		network, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		server, err := s.serverSvc.GetByID(ctx, network.ServerID)
		if err != nil {
			return err
		}

		serverNetwork, err := s.networkClient.GetNetworkByName(ctx, server.ConnectionURL, network.Name)
		// FIXME: how to differentiate general errors from "not found" errors?
		// TODO: if the Network is not found, it needs to be removed from the inventory.
		if err != nil {
			return err
		}

		network.ProjectName = serverNetwork.Project
		network.Object = serverNetwork
		network.LastUpdated = s.now()

		_, err = s.repo.UpdateByID(ctx, network)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s networkService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s networkService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	serverNetworks, err := s.networkClient.GetNetworks(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByServerID(ctx, serverID)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, serverNetwork := range serverNetworks {
			network := Network{
				ClusterID:   server.ClusterID,
				ServerID:    serverID,
				ProjectName: serverNetwork.Project,
				Name:        serverNetwork.Name,
				Object:      serverNetwork,
				LastUpdated: s.now(),
			}

			_, err := s.repo.Create(ctx, network)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
