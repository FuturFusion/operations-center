// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkService struct {
	repo          NetworkRepo
	clusterSvc    ClusterService
	networkClient NetworkServerClient

	now func() time.Time
}

var _ NetworkService = &networkService{}

type NetworkServiceOption func(s *networkService)

func NewNetworkService(repo NetworkRepo, clusterSvc ClusterService, client NetworkServerClient, opts ...NetworkServiceOption) networkService {
	networkSvc := networkService{
		repo:          repo,
		clusterSvc:    clusterSvc,
		networkClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkSvc)
	}

	return networkSvc
}

func (s networkService) GetAllIDsWithFilter(ctx context.Context, filter NetworkFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s networkService) GetByID(ctx context.Context, id int) (Network, error) {
	return s.repo.GetByID(ctx, id)
}

func (s networkService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		network, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByID(ctx, network.ClusterID)
		if err != nil {
			return err
		}

		retrievedNetwork, err := s.networkClient.GetNetworkByName(ctx, cluster.ConnectionURL, network.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, network.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		network.ProjectName = retrievedNetwork.Project
		network.Object = retrievedNetwork
		network.LastUpdated = s.now()

		err = network.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, network)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkService) SyncCluster(ctx context.Context, clusterID int) error {
	cluster, err := s.clusterSvc.GetByID(ctx, clusterID)
	if err != nil {
		return err
	}

	retrievedNetworks, err := s.networkClient.GetNetworks(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterID(ctx, clusterID)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedNetwork := range retrievedNetworks {
			network := Network{
				ClusterID:   clusterID,
				ProjectName: retrievedNetwork.Project,
				Name:        retrievedNetwork.Name,
				Object:      retrievedNetwork,
				LastUpdated: s.now(),
			}

			err = network.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, network)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
