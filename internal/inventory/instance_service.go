// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type instanceService struct {
	repo           InstanceRepo
	clusterSvc     ClusterService
	serverSvc      ServerService
	instanceClient InstanceServerClient

	now func() time.Time
}

var _ InstanceService = &instanceService{}

type InstanceServiceOption func(s *instanceService)

func NewInstanceService(repo InstanceRepo, clusterSvc ClusterService, serverSvc ServerService, client InstanceServerClient, opts ...InstanceServiceOption) instanceService {
	instanceSvc := instanceService{
		repo:           repo,
		clusterSvc:     clusterSvc,
		serverSvc:      serverSvc,
		instanceClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&instanceSvc)
	}

	return instanceSvc
}

func (s instanceService) GetAllIDsWithFilter(ctx context.Context, filter InstanceFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s instanceService) GetByID(ctx context.Context, id int) (Instance, error) {
	return s.repo.GetByID(ctx, id)
}

func (s instanceService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		instance, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		server, err := s.serverSvc.GetByID(ctx, instance.ServerID)
		if err != nil {
			return err
		}

		retrievedInstance, err := s.instanceClient.GetInstanceByName(ctx, server.ConnectionURL, instance.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, instance.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		instance.ProjectName = retrievedInstance.Project
		instance.Object = retrievedInstance
		instance.LastUpdated = s.now()

		err = instance.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, instance)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s instanceService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s instanceService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s instanceService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	retrievedInstances, err := s.instanceClient.GetInstances(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByServerID(ctx, serverID)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedInstance := range retrievedInstances {
			instance := Instance{
				ClusterID:   server.ClusterID,
				ServerID:    serverID,
				ProjectName: retrievedInstance.Project,
				Name:        retrievedInstance.Name,
				Object:      retrievedInstance,
				LastUpdated: s.now(),
			}

			err = instance.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, instance)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
