// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestStoragePoolService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StoragePoolRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.StoragePoolFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			storagePoolSvc := inventory.NewStoragePoolService(repo, nil, nil, inventory.StoragePoolWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			storagePoolIDs, err := storagePoolSvc.GetAllIDsWithFilter(context.Background(), inventory.StoragePoolFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, storagePoolIDs, tc.count)
		})
	}
}

func TestStoragePoolService_GetByID(t *testing.T) {
	tests := []struct {
		name                   string
		idArg                  int
		repoGetByIDStoragePool inventory.StoragePool
		repoGetByIDErr         error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDStoragePool: inventory.StoragePool{
				ID:          1,
				Cluster:     "cluster-one",
				Name:        "one",
				Object:      incusapi.StoragePool{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StoragePoolRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.StoragePool, error) {
					return tc.repoGetByIDStoragePool, tc.repoGetByIDErr
				},
			}

			storagePoolSvc := inventory.NewStoragePoolService(repo, nil, nil, inventory.StoragePoolWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			storagePool, err := storagePoolSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDStoragePool, storagePool)
		})
	}
}

func TestStoragePoolService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                                     string
		clusterSvcGetByIDCluster                 provisioning.Cluster
		clusterSvcGetByIDErr                     error
		storagePoolClientGetStoragePoolByName    incusapi.StoragePool
		storagePoolClientGetStoragePoolByNameErr error
		repoGetByIDStoragePool                   inventory.StoragePool
		repoGetByIDErr                           error
		repoUpdateByIDErr                        error
		repoDeleteByIDErr                        error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDStoragePool: inventory.StoragePool{
				ID:      1,
				Cluster: "cluster-one",
				Name:    "cluster-one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePoolByName: incusapi.StoragePool{
				Name: "storagePool one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - storagePool get by name - not found",
			repoGetByIDStoragePool: inventory.StoragePool{
				ID:      1,
				Cluster: "cluster-one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePoolByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - storagePool get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDStoragePool: inventory.StoragePool{
				ID:      1,
				Cluster: "cluster-one",
				Name:    "one",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storagePool get by name",
			repoGetByIDStoragePool: inventory.StoragePool{
				ID:      1,
				Cluster: "cluster-one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePoolByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storagePool get by name - not found - delete by id",
			repoGetByIDStoragePool: inventory.StoragePool{
				ID:      1,
				Cluster: "cluster-one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePoolByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr:                        boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDStoragePool: inventory.StoragePool{
				ID:      1,
				Cluster: "cluster-one",
				Name:    "", // invalid
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePoolByName: incusapi.StoragePool{
				Name: "storagePool one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDStoragePool: inventory.StoragePool{
				ID:      1,
				Cluster: "cluster-one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePoolByName: incusapi.StoragePool{
				Name: "storagePool one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StoragePoolRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.StoragePool, error) {
					return tc.repoGetByIDStoragePool, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, storagePool inventory.StoragePool) (inventory.StoragePool, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), storagePool.LastUpdated)
					return inventory.StoragePool{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (provisioning.Cluster, error) {
					require.Equal(t, "cluster-one", name)
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			storagePoolClient := &serverMock.StoragePoolServerClientMock{
				GetStoragePoolByNameFunc: func(ctx context.Context, connectionURL string, storagePoolName string) (incusapi.StoragePool, error) {
					require.Equal(t, tc.repoGetByIDStoragePool.Name, storagePoolName)
					return tc.storagePoolClientGetStoragePoolByName, tc.storagePoolClientGetStoragePoolByNameErr
				},
			}

			storagePoolSvc := inventory.NewStoragePoolService(repo, clusterSvc, storagePoolClient, inventory.StoragePoolWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := storagePoolSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestStoragePoolService_SyncAll(t *testing.T) {
	// Includes also SyncCluster and SyncServer
	tests := []struct {
		name                                string
		clusterSvcGetByIDCluster            provisioning.Cluster
		clusterSvcGetByIDErr                error
		storagePoolClientGetStoragePools    []incusapi.StoragePool
		storagePoolClientGetStoragePoolsErr error
		repoDeleteByClusterIDErr            error
		repoCreateErr                       error
		serviceOptions                      []inventory.StoragePoolServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storagePool client get StoragePools",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePoolsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storage_pools delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			repoDeleteByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - storagePool create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StoragePoolRepoMock{
				DeleteByClusterFunc: func(ctx context.Context, cluster string) error {
					return tc.repoDeleteByClusterIDErr
				},
				CreateFunc: func(ctx context.Context, storagePool inventory.StoragePool) (inventory.StoragePool, error) {
					return inventory.StoragePool{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (provisioning.Cluster, error) {
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			storagePoolClient := &serverMock.StoragePoolServerClientMock{
				GetStoragePoolsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.StoragePool, error) {
					return tc.storagePoolClientGetStoragePools, tc.storagePoolClientGetStoragePoolsErr
				},
			}

			storagePoolSvc := inventory.NewStoragePoolService(repo, clusterSvc, storagePoolClient,
				append(
					tc.serviceOptions,
					inventory.StoragePoolWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := storagePoolSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
