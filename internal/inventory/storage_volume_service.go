// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type storageVolumeService struct {
	repo                StorageVolumeRepo
	clusterSvc          ProvisioningClusterService
	storagePoolClient   StoragePoolServerClient
	storageVolumeClient StorageVolumeServerClient

	isParentFiltered func(incusapi.StoragePool) bool

	now func() time.Time
}

var _ StorageVolumeService = &storageVolumeService{}

type StorageVolumeServiceOption func(s *storageVolumeService)

func StorageVolumeWithParentFilter(f func(incusapi.StoragePool) bool) StorageVolumeServiceOption {
	return func(s *storageVolumeService) {
		s.isParentFiltered = f
	}
}

func NewStorageVolumeService(repo StorageVolumeRepo, clusterSvc ProvisioningClusterService, client StorageVolumeServerClient, parentClient StoragePoolServerClient, opts ...StorageVolumeServiceOption) storageVolumeService {
	storageVolumeSvc := storageVolumeService{
		repo:                repo,
		clusterSvc:          clusterSvc,
		storagePoolClient:   parentClient,
		storageVolumeClient: client,

		isParentFiltered: func(_ incusapi.StoragePool) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&storageVolumeSvc)
	}

	return storageVolumeSvc
}

func (s storageVolumeService) GetAllWithFilter(ctx context.Context, filter StorageVolumeFilter) (StorageVolumes, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(StorageVolume{})}...)
		if err != nil {
			return nil, err
		}
	}

	storageVolumes, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredStorageVolumes StorageVolumes
	if filter.Expression != nil {
		for _, storageVolume := range storageVolumes {
			output, err := expr.Run(filterExpression, storageVolume)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredStorageVolumes = append(filteredStorageVolumes, storageVolume)
			}
		}

		return filteredStorageVolumes, nil
	}

	return storageVolumes, nil
}

func (s storageVolumeService) GetAllIDsWithFilter(ctx context.Context, filter StorageVolumeFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s storageVolumeService) GetByID(ctx context.Context, id int) (StorageVolume, error) {
	return s.repo.GetByID(ctx, id)
}

func (s storageVolumeService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		storageVolume, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, storageVolume.Cluster)
		if err != nil {
			return err
		}

		retrievedStorageVolume, err := s.storageVolumeClient.GetStorageVolumeByName(ctx, cluster.ConnectionURL, storageVolume.StoragePoolName, storageVolume.Name, storageVolume.Type)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, storageVolume.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		storageVolume.Server = retrievedStorageVolume.Location
		storageVolume.ProjectName = retrievedStorageVolume.Project
		storageVolume.Type = retrievedStorageVolume.Type
		storageVolume.Object = retrievedStorageVolume
		storageVolume.LastUpdated = s.now()

		err = storageVolume.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, storageVolume)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s storageVolumeService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedStoragePools, err := s.storagePoolClient.GetStoragePools(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	for _, storagePool := range retrievedStoragePools {
		if s.isParentFiltered(storagePool) {
			continue
		}

		retrievedStorageVolumes, err := s.storageVolumeClient.GetStorageVolumes(ctx, cluster.ConnectionURL, storagePool.Name)
		if err != nil {
			return err
		}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			err = s.repo.DeleteByClusterName(ctx, name)
			if err != nil && !errors.Is(err, domain.ErrNotFound) {
				return err
			}

			for _, retrievedStorageVolume := range retrievedStorageVolumes {
				storageVolume := StorageVolume{
					Cluster:         name,
					Server:          retrievedStorageVolume.Location,
					ProjectName:     retrievedStorageVolume.Project,
					StoragePoolName: storagePool.Name,
					Name:            retrievedStorageVolume.Name,
					Object:          retrievedStorageVolume,
					LastUpdated:     s.now(),
				}

				err = storageVolume.Validate()
				if err != nil {
					return err
				}

				_, err := s.repo.Create(ctx, storageVolume)
				if err != nil {
					return err
				}
			}

			return nil
		})
		if err != nil {
			return err
		}
	}

	return nil
}
