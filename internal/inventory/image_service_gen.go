// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type imageService struct {
	repo        ImageRepo
	clusterSvc  ProvisioningClusterService
	imageClient ImageServerClient

	clusterSyncFilterFunc func(image Image) bool

	now func() time.Time
}

var _ ImageService = &imageService{}

type ImageServiceOption func(s *imageService)

func ImageWithSyncFilter(clusterSyncFilterFunc func(image Image) bool) ImageServiceOption {
	return func(s *imageService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewImageService(repo ImageRepo, clusterSvc ProvisioningClusterService, client ImageServerClient, opts ...ImageServiceOption) imageService {
	imageSvc := imageService{
		repo:        repo,
		clusterSvc:  clusterSvc,
		imageClient: client,

		clusterSyncFilterFunc: func(image Image) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&imageSvc)
	}

	return imageSvc
}

func (s imageService) GetAllWithFilter(ctx context.Context, filter ImageFilter) (Images, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Image{})}...)
		if err != nil {
			return nil, err
		}
	}

	images, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredImages Images
	if filter.Expression != nil {
		for _, image := range images {
			output, err := expr.Run(filterExpression, image)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredImages = append(filteredImages, image)
			}
		}

		return filteredImages, nil
	}

	return images, nil
}

func (s imageService) GetAllUUIDsWithFilter(ctx context.Context, filter ImageFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	imagesUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredImagesUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, imageUUID := range imagesUUIDs {
			output, err := expr.Run(filterExpression, Env{imageUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredImagesUUIDs = append(filteredImagesUUIDs, imageUUID)
			}
		}

		return filteredImagesUUIDs, nil
	}

	return imagesUUIDs, nil
}

func (s imageService) GetByUUID(ctx context.Context, id uuid.UUID) (Image, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s imageService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		image, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		endpoint, err := s.clusterSvc.GetEndpoint(ctx, image.Cluster)
		if err != nil {
			return err
		}

		retrievedImage, err := s.imageClient.GetImageByName(ctx, endpoint, image.ProjectName, image.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, image.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		image.ProjectName = retrievedImage.Project
		image.Object = retrievedImage
		image.LastUpdated = s.now()
		image.DeriveUUID()

		err = image.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, image)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s imageService) SyncCluster(ctx context.Context, name string) error {
	endpoint, err := s.clusterSvc.GetEndpoint(ctx, name)
	if err != nil {
		return err
	}

	retrievedImages, err := s.imageClient.GetImages(ctx, endpoint)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedImage := range retrievedImages {
			image := Image{
				Cluster:     name,
				ProjectName: retrievedImage.Project,
				Name:        retrievedImage.Fingerprint,
				Object:      retrievedImage,
				LastUpdated: s.now(),
			}

			image.DeriveUUID()

			if s.clusterSyncFilterFunc(image) {
				continue
			}

			err = image.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, image)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
