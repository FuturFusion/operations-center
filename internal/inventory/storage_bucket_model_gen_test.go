// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/ptr"
)

func TestStorageBucket_Validate(t *testing.T) {
	tests := []struct {
		name  string
		image *inventory.StorageBucket

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "valid",
			image: (&inventory.StorageBucket{
				ID:              1,
				Cluster:         "one",
				Server:          "one",
				ProjectName:     "project one",
				StoragePoolName: "storagePool one",
				Name:            "one",
			}).DeriveUUID(),

			assertErr: require.NoError,
		},
		{
			name: "error - invalid cluster ID",
			image: (&inventory.StorageBucket{
				ID:              1,
				Cluster:         "", // invalid
				Server:          "one",
				ProjectName:     "project one",
				StoragePoolName: "storagePool one",
				Name:            "one",
			}).DeriveUUID(),

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - invalid project name",
			image: (&inventory.StorageBucket{
				ID:              1,
				Cluster:         "one",
				Server:          "", // invalid
				ProjectName:     "project one",
				StoragePoolName: "storagePool one",
				Name:            "one",
			}).DeriveUUID(),

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - invalid project name",
			image: (&inventory.StorageBucket{
				ID:              1,
				Cluster:         "one",
				Server:          "one",
				ProjectName:     "", // invalid
				StoragePoolName: "storagePool one",
				Name:            "one",
			}).DeriveUUID(),

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - invalid project name",
			image: (&inventory.StorageBucket{
				ID:              1,
				Cluster:         "one",
				Server:          "one",
				ProjectName:     "project one",
				StoragePoolName: "", // invalid
				Name:            "one",
			}).DeriveUUID(),

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - invalid name",
			image: (&inventory.StorageBucket{
				ID:              1,
				Cluster:         "one",
				Server:          "one",
				ProjectName:     "project one",
				StoragePoolName: "storagePool one",
				Name:            "", // invalid
			}).DeriveUUID(),

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - UUID not derived",
			image: &inventory.StorageBucket{
				ID:              1,
				Cluster:         "one",
				Server:          "one",
				ProjectName:     "project one",
				StoragePoolName: "storagePool one",
				Name:            "one",
			}, // UUID not derived

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			err := tc.image.Validate()

			tc.assertErr(t, err)
		})
	}
}

func TestStorageBucket_Filter(t *testing.T) {
	tests := []struct {
		name   string
		filter inventory.StorageBucketFilter

		want string
	}{
		{
			name:   "empty filter",
			filter: inventory.StorageBucketFilter{},

			want: ``,
		},
		{
			name: "complete filter",
			filter: inventory.StorageBucketFilter{
				Cluster:    ptr.To("cluster"),
				Server:     ptr.To("server"),
				Project:    ptr.To("project"),
				Expression: ptr.To("true"),
			},

			want: `cluster=cluster&filter=true&project=project&server=server`,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			require.Equal(t, tc.want, tc.filter.String())
		})
	}
}
