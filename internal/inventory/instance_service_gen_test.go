// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestInstanceService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.Instances
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.Instances{
				inventory.Instance{
					Name: "one",
				},
				inventory.Instance{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.Instances{
				inventory.Instance{
					Name: "one",
				},
				inventory.Instance{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.Instances{
				inventory.Instance{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.Instances{
				inventory.Instance{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.Instances{
				inventory.Instance{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, i ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.InstanceFilter) (inventory.Instances, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, nil, nil, inventory.InstanceWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			instance, err := instanceSvc.GetAllWithFilter(context.Background(), inventory.InstanceFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, instance, tc.count)
		})
	}
}

func TestInstanceService_GetAllUUIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                         string
		filterExpression             *string
		repoGetAllUUIDsWithFilter    []uuid.UUID
		repoGetAllUUIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`UUID == "6c652183-8d93-4c7d-9510-cd2ae54f31fd"`),
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: func(tt require.TestingT, err error, i ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                         "error - repo",
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.InstanceFilter) ([]uuid.UUID, error) {
					return tc.repoGetAllUUIDsWithFilter, tc.repoGetAllUUIDsWithFilterErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, nil, nil, inventory.InstanceWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			instanceUUIDs, err := instanceSvc.GetAllUUIDsWithFilter(context.Background(), inventory.InstanceFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, instanceUUIDs, tc.count)
		})
	}
}

func TestInstanceService_GetByUUID(t *testing.T) {
	tests := []struct {
		name                  string
		idArg                 uuid.UUID
		repoGetByUUIDInstance inventory.Instance
		repoGetByUUIDErr      error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDInstance: inventory.Instance{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.InstanceFull{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:             "error - repo",
			idArg:            uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.Instance, error) {
					return tc.repoGetByUUIDInstance, tc.repoGetByUUIDErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, nil, nil, inventory.InstanceWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			instance, err := instanceSvc.GetByUUID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByUUIDInstance, instance)
		})
	}
}

func TestInstanceService_ResyncByUUID(t *testing.T) {
	tests := []struct {
		name                               string
		clusterSvcGetByIDCluster           provisioning.Cluster
		clusterSvcGetByIDErr               error
		instanceClientGetInstanceByName    incusapi.InstanceFull
		instanceClientGetInstanceByNameErr error
		repoGetByUUIDInstance              inventory.Instance
		repoGetByUUIDErr                   error
		repoUpdateByUUIDErr                error
		repoDeleteByUUIDErr                error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByUUIDInstance: inventory.Instance{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByName: incusapi.InstanceFull{
				Instance: incusapi.Instance{
					Name:     "instance one",
					Location: "one",
					Project:  "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - instance get by name - not found",
			repoGetByUUIDInstance: inventory.Instance{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:             "error - instance get by UUID",
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByUUIDInstance: inventory.Instance{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - instance get by name",
			repoGetByUUIDInstance: inventory.Instance{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - instance get by name - not found - delete by uuid",
			repoGetByUUIDInstance: inventory.Instance{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByNameErr: domain.ErrNotFound,
			repoDeleteByUUIDErr:                boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByUUIDInstance: inventory.Instance{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "", // invalid
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByName: incusapi.InstanceFull{
				Instance: incusapi.Instance{
					Name:     "instance one",
					Location: "one",
					Project:  "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by UUID",
			repoGetByUUIDInstance: inventory.Instance{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByName: incusapi.InstanceFull{
				Instance: incusapi.Instance{
					Name:     "instance one",
					Location: "one",
					Project:  "project one",
				},
			},
			repoUpdateByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.Instance, error) {
					return tc.repoGetByUUIDInstance, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, instance inventory.Instance) (inventory.Instance, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), instance.LastUpdated)
					return inventory.Instance{}, tc.repoUpdateByUUIDErr
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return tc.repoDeleteByUUIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			instanceClient := &serverMock.InstanceServerClientMock{
				GetInstanceByNameFunc: func(ctx context.Context, connectionURL string, instanceName string) (incusapi.InstanceFull, error) {
					require.Equal(t, tc.repoGetByUUIDInstance.Name, instanceName)
					return tc.instanceClientGetInstanceByName, tc.instanceClientGetInstanceByNameErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, clusterSvc, instanceClient, inventory.InstanceWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := instanceSvc.ResyncByUUID(context.Background(), uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`))

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestInstanceService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                          string
		clusterSvcGetByIDCluster      provisioning.Cluster
		clusterSvcGetByIDErr          error
		instanceClientGetInstances    []incusapi.InstanceFull
		instanceClientGetInstancesErr error
		repoDeleteByClusterNameErr    error
		repoCreateErr                 error
		serviceOptions                []inventory.InstanceServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "instance one",
						Location: "one",
						Project:  "project one",
					},
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "instance one",
						Location: "one",
						Project:  "project one",
					},
				},
				{
					Instance: incusapi.Instance{
						Name:     "instance filtered",
						Location: "one",
						Project:  "project one",
					},
				},
			},
			serviceOptions: []inventory.InstanceServiceOption{
				inventory.InstanceWithSyncFilter(func(instance inventory.Instance) bool {
					return instance.Name == "instance filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - instance client get Instances",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstancesErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - instances delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "instance one",
						Location: "one",
						Project:  "project one",
					},
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "", // invalid
						Location: "one",
						Project:  "project one",
					},
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - instance create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "instance one",
						Location: "one",
						Project:  "project one",
					},
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, instance inventory.Instance) (inventory.Instance, error) {
					return inventory.Instance{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			instanceClient := &serverMock.InstanceServerClientMock{
				GetInstancesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error) {
					return tc.instanceClientGetInstances, tc.instanceClientGetInstancesErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, clusterSvc, instanceClient,
				append(
					tc.serviceOptions,
					inventory.InstanceWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := instanceSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
