// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkZoneService struct {
	repo              NetworkZoneRepo
	clusterSvc        ProvisioningClusterService
	networkZoneClient NetworkZoneServerClient

	now func() time.Time
}

var _ NetworkZoneService = &networkZoneService{}

type NetworkZoneServiceOption func(s *networkZoneService)

func NewNetworkZoneService(repo NetworkZoneRepo, clusterSvc ProvisioningClusterService, client NetworkZoneServerClient, opts ...NetworkZoneServiceOption) networkZoneService {
	networkZoneSvc := networkZoneService{
		repo:              repo,
		clusterSvc:        clusterSvc,
		networkZoneClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkZoneSvc)
	}

	return networkZoneSvc
}

func (s networkZoneService) GetAllIDsWithFilter(ctx context.Context, filter NetworkZoneFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s networkZoneService) GetByID(ctx context.Context, id int) (NetworkZone, error) {
	return s.repo.GetByID(ctx, id)
}

func (s networkZoneService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkZone, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, networkZone.Cluster)
		if err != nil {
			return err
		}

		retrievedNetworkZone, err := s.networkZoneClient.GetNetworkZoneByName(ctx, cluster.ConnectionURL, networkZone.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, networkZone.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkZone.ProjectName = retrievedNetworkZone.Project
		networkZone.Object = retrievedNetworkZone
		networkZone.LastUpdated = s.now()

		err = networkZone.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, networkZone)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkZoneService) SyncCluster(ctx context.Context, clusterName string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, clusterName)
	if err != nil {
		return err
	}

	retrievedNetworkZones, err := s.networkZoneClient.GetNetworkZones(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByCluster(ctx, clusterName)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedNetworkZone := range retrievedNetworkZones {
			networkZone := NetworkZone{
				Cluster:     clusterName,
				ProjectName: retrievedNetworkZone.Project,
				Name:        retrievedNetworkZone.Name,
				Object:      retrievedNetworkZone,
				LastUpdated: s.now(),
			}

			err = networkZone.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, networkZone)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
