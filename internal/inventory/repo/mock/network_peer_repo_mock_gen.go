// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/google/uuid"
)

// Ensure that NetworkPeerRepoMock does implement inventory.NetworkPeerRepo.
// If this is not the case, regenerate this file with mockery.
var _ inventory.NetworkPeerRepo = &NetworkPeerRepoMock{}

// NetworkPeerRepoMock is a mock implementation of inventory.NetworkPeerRepo.
//
//	func TestSomethingThatUsesNetworkPeerRepo(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkPeerRepo
//		mockedNetworkPeerRepo := &NetworkPeerRepoMock{
//			CreateFunc: func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByClusterNameFunc: func(ctx context.Context, cluster string) error {
//				panic("mock out the DeleteByClusterName method")
//			},
//			DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByUUID method")
//			},
//			GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkPeerFilter) ([]uuid.UUID, error) {
//				panic("mock out the GetAllUUIDsWithFilter method")
//			},
//			GetAllWithFilterFunc: func(ctx context.Context, filter inventory.NetworkPeerFilter) (inventory.NetworkPeers, error) {
//				panic("mock out the GetAllWithFilter method")
//			},
//			GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkPeer, error) {
//				panic("mock out the GetByUUID method")
//			},
//			UpdateByUUIDFunc: func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
//				panic("mock out the UpdateByUUID method")
//			},
//		}
//
//		// use mockedNetworkPeerRepo in code that requires inventory.NetworkPeerRepo
//		// and then make assertions.
//
//	}
type NetworkPeerRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error)

	// DeleteByClusterNameFunc mocks the DeleteByClusterName method.
	DeleteByClusterNameFunc func(ctx context.Context, cluster string) error

	// DeleteByUUIDFunc mocks the DeleteByUUID method.
	DeleteByUUIDFunc func(ctx context.Context, id uuid.UUID) error

	// GetAllUUIDsWithFilterFunc mocks the GetAllUUIDsWithFilter method.
	GetAllUUIDsWithFilterFunc func(ctx context.Context, filter inventory.NetworkPeerFilter) ([]uuid.UUID, error)

	// GetAllWithFilterFunc mocks the GetAllWithFilter method.
	GetAllWithFilterFunc func(ctx context.Context, filter inventory.NetworkPeerFilter) (inventory.NetworkPeers, error)

	// GetByUUIDFunc mocks the GetByUUID method.
	GetByUUIDFunc func(ctx context.Context, id uuid.UUID) (inventory.NetworkPeer, error)

	// UpdateByUUIDFunc mocks the UpdateByUUID method.
	UpdateByUUIDFunc func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NetworkPeer is the networkPeer argument value.
			NetworkPeer inventory.NetworkPeer
		}
		// DeleteByClusterName holds details about calls to the DeleteByClusterName method.
		DeleteByClusterName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster string
		}
		// DeleteByUUID holds details about calls to the DeleteByUUID method.
		DeleteByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAllUUIDsWithFilter holds details about calls to the GetAllUUIDsWithFilter method.
		GetAllUUIDsWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter inventory.NetworkPeerFilter
		}
		// GetAllWithFilter holds details about calls to the GetAllWithFilter method.
		GetAllWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter inventory.NetworkPeerFilter
		}
		// GetByUUID holds details about calls to the GetByUUID method.
		GetByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// UpdateByUUID holds details about calls to the UpdateByUUID method.
		UpdateByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NetworkPeer is the networkPeer argument value.
			NetworkPeer inventory.NetworkPeer
		}
	}
	lockCreate                sync.RWMutex
	lockDeleteByClusterName   sync.RWMutex
	lockDeleteByUUID          sync.RWMutex
	lockGetAllUUIDsWithFilter sync.RWMutex
	lockGetAllWithFilter      sync.RWMutex
	lockGetByUUID             sync.RWMutex
	lockUpdateByUUID          sync.RWMutex
}

// Create calls CreateFunc.
func (mock *NetworkPeerRepoMock) Create(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
	if mock.CreateFunc == nil {
		panic("NetworkPeerRepoMock.CreateFunc: method is nil but NetworkPeerRepo.Create was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		NetworkPeer inventory.NetworkPeer
	}{
		Ctx:         ctx,
		NetworkPeer: networkPeer,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, networkPeer)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.CreateCalls())
func (mock *NetworkPeerRepoMock) CreateCalls() []struct {
	Ctx         context.Context
	NetworkPeer inventory.NetworkPeer
} {
	var calls []struct {
		Ctx         context.Context
		NetworkPeer inventory.NetworkPeer
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByClusterName calls DeleteByClusterNameFunc.
func (mock *NetworkPeerRepoMock) DeleteByClusterName(ctx context.Context, cluster string) error {
	if mock.DeleteByClusterNameFunc == nil {
		panic("NetworkPeerRepoMock.DeleteByClusterNameFunc: method is nil but NetworkPeerRepo.DeleteByClusterName was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster string
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockDeleteByClusterName.Lock()
	mock.calls.DeleteByClusterName = append(mock.calls.DeleteByClusterName, callInfo)
	mock.lockDeleteByClusterName.Unlock()
	return mock.DeleteByClusterNameFunc(ctx, cluster)
}

// DeleteByClusterNameCalls gets all the calls that were made to DeleteByClusterName.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.DeleteByClusterNameCalls())
func (mock *NetworkPeerRepoMock) DeleteByClusterNameCalls() []struct {
	Ctx     context.Context
	Cluster string
} {
	var calls []struct {
		Ctx     context.Context
		Cluster string
	}
	mock.lockDeleteByClusterName.RLock()
	calls = mock.calls.DeleteByClusterName
	mock.lockDeleteByClusterName.RUnlock()
	return calls
}

// DeleteByUUID calls DeleteByUUIDFunc.
func (mock *NetworkPeerRepoMock) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByUUIDFunc == nil {
		panic("NetworkPeerRepoMock.DeleteByUUIDFunc: method is nil but NetworkPeerRepo.DeleteByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByUUID.Lock()
	mock.calls.DeleteByUUID = append(mock.calls.DeleteByUUID, callInfo)
	mock.lockDeleteByUUID.Unlock()
	return mock.DeleteByUUIDFunc(ctx, id)
}

// DeleteByUUIDCalls gets all the calls that were made to DeleteByUUID.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.DeleteByUUIDCalls())
func (mock *NetworkPeerRepoMock) DeleteByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByUUID.RLock()
	calls = mock.calls.DeleteByUUID
	mock.lockDeleteByUUID.RUnlock()
	return calls
}

// GetAllUUIDsWithFilter calls GetAllUUIDsWithFilterFunc.
func (mock *NetworkPeerRepoMock) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.NetworkPeerFilter) ([]uuid.UUID, error) {
	if mock.GetAllUUIDsWithFilterFunc == nil {
		panic("NetworkPeerRepoMock.GetAllUUIDsWithFilterFunc: method is nil but NetworkPeerRepo.GetAllUUIDsWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter inventory.NetworkPeerFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllUUIDsWithFilter.Lock()
	mock.calls.GetAllUUIDsWithFilter = append(mock.calls.GetAllUUIDsWithFilter, callInfo)
	mock.lockGetAllUUIDsWithFilter.Unlock()
	return mock.GetAllUUIDsWithFilterFunc(ctx, filter)
}

// GetAllUUIDsWithFilterCalls gets all the calls that were made to GetAllUUIDsWithFilter.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.GetAllUUIDsWithFilterCalls())
func (mock *NetworkPeerRepoMock) GetAllUUIDsWithFilterCalls() []struct {
	Ctx    context.Context
	Filter inventory.NetworkPeerFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter inventory.NetworkPeerFilter
	}
	mock.lockGetAllUUIDsWithFilter.RLock()
	calls = mock.calls.GetAllUUIDsWithFilter
	mock.lockGetAllUUIDsWithFilter.RUnlock()
	return calls
}

// GetAllWithFilter calls GetAllWithFilterFunc.
func (mock *NetworkPeerRepoMock) GetAllWithFilter(ctx context.Context, filter inventory.NetworkPeerFilter) (inventory.NetworkPeers, error) {
	if mock.GetAllWithFilterFunc == nil {
		panic("NetworkPeerRepoMock.GetAllWithFilterFunc: method is nil but NetworkPeerRepo.GetAllWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter inventory.NetworkPeerFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllWithFilter.Lock()
	mock.calls.GetAllWithFilter = append(mock.calls.GetAllWithFilter, callInfo)
	mock.lockGetAllWithFilter.Unlock()
	return mock.GetAllWithFilterFunc(ctx, filter)
}

// GetAllWithFilterCalls gets all the calls that were made to GetAllWithFilter.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.GetAllWithFilterCalls())
func (mock *NetworkPeerRepoMock) GetAllWithFilterCalls() []struct {
	Ctx    context.Context
	Filter inventory.NetworkPeerFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter inventory.NetworkPeerFilter
	}
	mock.lockGetAllWithFilter.RLock()
	calls = mock.calls.GetAllWithFilter
	mock.lockGetAllWithFilter.RUnlock()
	return calls
}

// GetByUUID calls GetByUUIDFunc.
func (mock *NetworkPeerRepoMock) GetByUUID(ctx context.Context, id uuid.UUID) (inventory.NetworkPeer, error) {
	if mock.GetByUUIDFunc == nil {
		panic("NetworkPeerRepoMock.GetByUUIDFunc: method is nil but NetworkPeerRepo.GetByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByUUID.Lock()
	mock.calls.GetByUUID = append(mock.calls.GetByUUID, callInfo)
	mock.lockGetByUUID.Unlock()
	return mock.GetByUUIDFunc(ctx, id)
}

// GetByUUIDCalls gets all the calls that were made to GetByUUID.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.GetByUUIDCalls())
func (mock *NetworkPeerRepoMock) GetByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByUUID.RLock()
	calls = mock.calls.GetByUUID
	mock.lockGetByUUID.RUnlock()
	return calls
}

// UpdateByUUID calls UpdateByUUIDFunc.
func (mock *NetworkPeerRepoMock) UpdateByUUID(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
	if mock.UpdateByUUIDFunc == nil {
		panic("NetworkPeerRepoMock.UpdateByUUIDFunc: method is nil but NetworkPeerRepo.UpdateByUUID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		NetworkPeer inventory.NetworkPeer
	}{
		Ctx:         ctx,
		NetworkPeer: networkPeer,
	}
	mock.lockUpdateByUUID.Lock()
	mock.calls.UpdateByUUID = append(mock.calls.UpdateByUUID, callInfo)
	mock.lockUpdateByUUID.Unlock()
	return mock.UpdateByUUIDFunc(ctx, networkPeer)
}

// UpdateByUUIDCalls gets all the calls that were made to UpdateByUUID.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.UpdateByUUIDCalls())
func (mock *NetworkPeerRepoMock) UpdateByUUIDCalls() []struct {
	Ctx         context.Context
	NetworkPeer inventory.NetworkPeer
} {
	var calls []struct {
		Ctx         context.Context
		NetworkPeer inventory.NetworkPeer
	}
	mock.lockUpdateByUUID.RLock()
	calls = mock.calls.UpdateByUUID
	mock.lockUpdateByUUID.RUnlock()
	return calls
}
