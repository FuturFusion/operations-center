// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
)

// Ensure, that NetworkPeerRepoMock does implement inventory.NetworkPeerRepo.
// If this is not the case, regenerate this file with moq.
var _ inventory.NetworkPeerRepo = &NetworkPeerRepoMock{}

// NetworkPeerRepoMock is a mock implementation of inventory.NetworkPeerRepo.
//
//	func TestSomethingThatUsesNetworkPeerRepo(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkPeerRepo
//		mockedNetworkPeerRepo := &NetworkPeerRepoMock{
//			CreateFunc: func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByServerIDFunc: func(ctx context.Context, serverID int) error {
//				panic("mock out the DeleteByServerID method")
//			},
//			GetAllIDsFunc: func(ctx context.Context) ([]int, error) {
//				panic("mock out the GetAllIDs method")
//			},
//			GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkPeer, error) {
//				panic("mock out the GetByID method")
//			},
//		}
//
//		// use mockedNetworkPeerRepo in code that requires inventory.NetworkPeerRepo
//		// and then make assertions.
//
//	}
type NetworkPeerRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error)

	// DeleteByServerIDFunc mocks the DeleteByServerID method.
	DeleteByServerIDFunc func(ctx context.Context, serverID int) error

	// GetAllIDsFunc mocks the GetAllIDs method.
	GetAllIDsFunc func(ctx context.Context) ([]int, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int) (inventory.NetworkPeer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NetworkPeer is the networkPeer argument value.
			NetworkPeer inventory.NetworkPeer
		}
		// DeleteByServerID holds details about calls to the DeleteByServerID method.
		DeleteByServerID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServerID is the serverID argument value.
			ServerID int
		}
		// GetAllIDs holds details about calls to the GetAllIDs method.
		GetAllIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
	}
	lockCreate           sync.RWMutex
	lockDeleteByServerID sync.RWMutex
	lockGetAllIDs        sync.RWMutex
	lockGetByID          sync.RWMutex
}

// Create calls CreateFunc.
func (mock *NetworkPeerRepoMock) Create(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
	if mock.CreateFunc == nil {
		panic("NetworkPeerRepoMock.CreateFunc: method is nil but NetworkPeerRepo.Create was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		NetworkPeer inventory.NetworkPeer
	}{
		Ctx:         ctx,
		NetworkPeer: networkPeer,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, networkPeer)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.CreateCalls())
func (mock *NetworkPeerRepoMock) CreateCalls() []struct {
	Ctx         context.Context
	NetworkPeer inventory.NetworkPeer
} {
	var calls []struct {
		Ctx         context.Context
		NetworkPeer inventory.NetworkPeer
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByServerID calls DeleteByServerIDFunc.
func (mock *NetworkPeerRepoMock) DeleteByServerID(ctx context.Context, serverID int) error {
	if mock.DeleteByServerIDFunc == nil {
		panic("NetworkPeerRepoMock.DeleteByServerIDFunc: method is nil but NetworkPeerRepo.DeleteByServerID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ServerID int
	}{
		Ctx:      ctx,
		ServerID: serverID,
	}
	mock.lockDeleteByServerID.Lock()
	mock.calls.DeleteByServerID = append(mock.calls.DeleteByServerID, callInfo)
	mock.lockDeleteByServerID.Unlock()
	return mock.DeleteByServerIDFunc(ctx, serverID)
}

// DeleteByServerIDCalls gets all the calls that were made to DeleteByServerID.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.DeleteByServerIDCalls())
func (mock *NetworkPeerRepoMock) DeleteByServerIDCalls() []struct {
	Ctx      context.Context
	ServerID int
} {
	var calls []struct {
		Ctx      context.Context
		ServerID int
	}
	mock.lockDeleteByServerID.RLock()
	calls = mock.calls.DeleteByServerID
	mock.lockDeleteByServerID.RUnlock()
	return calls
}

// GetAllIDs calls GetAllIDsFunc.
func (mock *NetworkPeerRepoMock) GetAllIDs(ctx context.Context) ([]int, error) {
	if mock.GetAllIDsFunc == nil {
		panic("NetworkPeerRepoMock.GetAllIDsFunc: method is nil but NetworkPeerRepo.GetAllIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllIDs.Lock()
	mock.calls.GetAllIDs = append(mock.calls.GetAllIDs, callInfo)
	mock.lockGetAllIDs.Unlock()
	return mock.GetAllIDsFunc(ctx)
}

// GetAllIDsCalls gets all the calls that were made to GetAllIDs.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.GetAllIDsCalls())
func (mock *NetworkPeerRepoMock) GetAllIDsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllIDs.RLock()
	calls = mock.calls.GetAllIDs
	mock.lockGetAllIDs.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *NetworkPeerRepoMock) GetByID(ctx context.Context, id int) (inventory.NetworkPeer, error) {
	if mock.GetByIDFunc == nil {
		panic("NetworkPeerRepoMock.GetByIDFunc: method is nil but NetworkPeerRepo.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedNetworkPeerRepo.GetByIDCalls())
func (mock *NetworkPeerRepoMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}
