// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
)

// Ensure, that StorageBucketRepoMock does implement inventory.StorageBucketRepo.
// If this is not the case, regenerate this file with moq.
var _ inventory.StorageBucketRepo = &StorageBucketRepoMock{}

// StorageBucketRepoMock is a mock implementation of inventory.StorageBucketRepo.
//
//	func TestSomethingThatUsesStorageBucketRepo(t *testing.T) {
//
//		// make and configure a mocked inventory.StorageBucketRepo
//		mockedStorageBucketRepo := &StorageBucketRepoMock{
//			CreateFunc: func(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByIDFunc: func(ctx context.Context, id int) error {
//				panic("mock out the DeleteByID method")
//			},
//			DeleteByServerFunc: func(ctx context.Context, server string) error {
//				panic("mock out the DeleteByServer method")
//			},
//			GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.StorageBucketFilter) ([]int, error) {
//				panic("mock out the GetAllIDsWithFilter method")
//			},
//			GetByIDFunc: func(ctx context.Context, id int) (inventory.StorageBucket, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateByIDFunc: func(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error) {
//				panic("mock out the UpdateByID method")
//			},
//		}
//
//		// use mockedStorageBucketRepo in code that requires inventory.StorageBucketRepo
//		// and then make assertions.
//
//	}
type StorageBucketRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error)

	// DeleteByIDFunc mocks the DeleteByID method.
	DeleteByIDFunc func(ctx context.Context, id int) error

	// DeleteByServerFunc mocks the DeleteByServer method.
	DeleteByServerFunc func(ctx context.Context, server string) error

	// GetAllIDsWithFilterFunc mocks the GetAllIDsWithFilter method.
	GetAllIDsWithFilterFunc func(ctx context.Context, filter inventory.StorageBucketFilter) ([]int, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int) (inventory.StorageBucket, error)

	// UpdateByIDFunc mocks the UpdateByID method.
	UpdateByIDFunc func(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StorageBucket is the storageBucket argument value.
			StorageBucket inventory.StorageBucket
		}
		// DeleteByID holds details about calls to the DeleteByID method.
		DeleteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// DeleteByServer holds details about calls to the DeleteByServer method.
		DeleteByServer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server string
		}
		// GetAllIDsWithFilter holds details about calls to the GetAllIDsWithFilter method.
		GetAllIDsWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter inventory.StorageBucketFilter
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// UpdateByID holds details about calls to the UpdateByID method.
		UpdateByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StorageBucket is the storageBucket argument value.
			StorageBucket inventory.StorageBucket
		}
	}
	lockCreate              sync.RWMutex
	lockDeleteByID          sync.RWMutex
	lockDeleteByServer      sync.RWMutex
	lockGetAllIDsWithFilter sync.RWMutex
	lockGetByID             sync.RWMutex
	lockUpdateByID          sync.RWMutex
}

// Create calls CreateFunc.
func (mock *StorageBucketRepoMock) Create(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error) {
	if mock.CreateFunc == nil {
		panic("StorageBucketRepoMock.CreateFunc: method is nil but StorageBucketRepo.Create was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		StorageBucket inventory.StorageBucket
	}{
		Ctx:           ctx,
		StorageBucket: storageBucket,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, storageBucket)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedStorageBucketRepo.CreateCalls())
func (mock *StorageBucketRepoMock) CreateCalls() []struct {
	Ctx           context.Context
	StorageBucket inventory.StorageBucket
} {
	var calls []struct {
		Ctx           context.Context
		StorageBucket inventory.StorageBucket
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByID calls DeleteByIDFunc.
func (mock *StorageBucketRepoMock) DeleteByID(ctx context.Context, id int) error {
	if mock.DeleteByIDFunc == nil {
		panic("StorageBucketRepoMock.DeleteByIDFunc: method is nil but StorageBucketRepo.DeleteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByID.Lock()
	mock.calls.DeleteByID = append(mock.calls.DeleteByID, callInfo)
	mock.lockDeleteByID.Unlock()
	return mock.DeleteByIDFunc(ctx, id)
}

// DeleteByIDCalls gets all the calls that were made to DeleteByID.
// Check the length with:
//
//	len(mockedStorageBucketRepo.DeleteByIDCalls())
func (mock *StorageBucketRepoMock) DeleteByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockDeleteByID.RLock()
	calls = mock.calls.DeleteByID
	mock.lockDeleteByID.RUnlock()
	return calls
}

// DeleteByServer calls DeleteByServerFunc.
func (mock *StorageBucketRepoMock) DeleteByServer(ctx context.Context, server string) error {
	if mock.DeleteByServerFunc == nil {
		panic("StorageBucketRepoMock.DeleteByServerFunc: method is nil but StorageBucketRepo.DeleteByServer was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server string
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockDeleteByServer.Lock()
	mock.calls.DeleteByServer = append(mock.calls.DeleteByServer, callInfo)
	mock.lockDeleteByServer.Unlock()
	return mock.DeleteByServerFunc(ctx, server)
}

// DeleteByServerCalls gets all the calls that were made to DeleteByServer.
// Check the length with:
//
//	len(mockedStorageBucketRepo.DeleteByServerCalls())
func (mock *StorageBucketRepoMock) DeleteByServerCalls() []struct {
	Ctx    context.Context
	Server string
} {
	var calls []struct {
		Ctx    context.Context
		Server string
	}
	mock.lockDeleteByServer.RLock()
	calls = mock.calls.DeleteByServer
	mock.lockDeleteByServer.RUnlock()
	return calls
}

// GetAllIDsWithFilter calls GetAllIDsWithFilterFunc.
func (mock *StorageBucketRepoMock) GetAllIDsWithFilter(ctx context.Context, filter inventory.StorageBucketFilter) ([]int, error) {
	if mock.GetAllIDsWithFilterFunc == nil {
		panic("StorageBucketRepoMock.GetAllIDsWithFilterFunc: method is nil but StorageBucketRepo.GetAllIDsWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter inventory.StorageBucketFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllIDsWithFilter.Lock()
	mock.calls.GetAllIDsWithFilter = append(mock.calls.GetAllIDsWithFilter, callInfo)
	mock.lockGetAllIDsWithFilter.Unlock()
	return mock.GetAllIDsWithFilterFunc(ctx, filter)
}

// GetAllIDsWithFilterCalls gets all the calls that were made to GetAllIDsWithFilter.
// Check the length with:
//
//	len(mockedStorageBucketRepo.GetAllIDsWithFilterCalls())
func (mock *StorageBucketRepoMock) GetAllIDsWithFilterCalls() []struct {
	Ctx    context.Context
	Filter inventory.StorageBucketFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter inventory.StorageBucketFilter
	}
	mock.lockGetAllIDsWithFilter.RLock()
	calls = mock.calls.GetAllIDsWithFilter
	mock.lockGetAllIDsWithFilter.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *StorageBucketRepoMock) GetByID(ctx context.Context, id int) (inventory.StorageBucket, error) {
	if mock.GetByIDFunc == nil {
		panic("StorageBucketRepoMock.GetByIDFunc: method is nil but StorageBucketRepo.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedStorageBucketRepo.GetByIDCalls())
func (mock *StorageBucketRepoMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// UpdateByID calls UpdateByIDFunc.
func (mock *StorageBucketRepoMock) UpdateByID(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error) {
	if mock.UpdateByIDFunc == nil {
		panic("StorageBucketRepoMock.UpdateByIDFunc: method is nil but StorageBucketRepo.UpdateByID was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		StorageBucket inventory.StorageBucket
	}{
		Ctx:           ctx,
		StorageBucket: storageBucket,
	}
	mock.lockUpdateByID.Lock()
	mock.calls.UpdateByID = append(mock.calls.UpdateByID, callInfo)
	mock.lockUpdateByID.Unlock()
	return mock.UpdateByIDFunc(ctx, storageBucket)
}

// UpdateByIDCalls gets all the calls that were made to UpdateByID.
// Check the length with:
//
//	len(mockedStorageBucketRepo.UpdateByIDCalls())
func (mock *StorageBucketRepoMock) UpdateByIDCalls() []struct {
	Ctx           context.Context
	StorageBucket inventory.StorageBucket
} {
	var calls []struct {
		Ctx           context.Context
		StorageBucket inventory.StorageBucket
	}
	mock.lockUpdateByID.RLock()
	calls = mock.calls.UpdateByID
	mock.lockUpdateByID.RUnlock()
	return calls
}
