// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
)

// Ensure, that NetworkIntegrationRepoMock does implement inventory.NetworkIntegrationRepo.
// If this is not the case, regenerate this file with moq.
var _ inventory.NetworkIntegrationRepo = &NetworkIntegrationRepoMock{}

// NetworkIntegrationRepoMock is a mock implementation of inventory.NetworkIntegrationRepo.
//
//	func TestSomethingThatUsesNetworkIntegrationRepo(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkIntegrationRepo
//		mockedNetworkIntegrationRepo := &NetworkIntegrationRepoMock{
//			CreateFunc: func(ctx context.Context, networkIntegration inventory.NetworkIntegration) (inventory.NetworkIntegration, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByServerIDFunc: func(ctx context.Context, serverID int) error {
//				panic("mock out the DeleteByServerID method")
//			},
//			GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkIntegrationFilter) ([]int, error) {
//				panic("mock out the GetAllIDsWithFilter method")
//			},
//			GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkIntegration, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateByIDFunc: func(ctx context.Context, networkIntegration inventory.NetworkIntegration) (inventory.NetworkIntegration, error) {
//				panic("mock out the UpdateByID method")
//			},
//		}
//
//		// use mockedNetworkIntegrationRepo in code that requires inventory.NetworkIntegrationRepo
//		// and then make assertions.
//
//	}
type NetworkIntegrationRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, networkIntegration inventory.NetworkIntegration) (inventory.NetworkIntegration, error)

	// DeleteByServerIDFunc mocks the DeleteByServerID method.
	DeleteByServerIDFunc func(ctx context.Context, serverID int) error

	// GetAllIDsWithFilterFunc mocks the GetAllIDsWithFilter method.
	GetAllIDsWithFilterFunc func(ctx context.Context, filter inventory.NetworkIntegrationFilter) ([]int, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int) (inventory.NetworkIntegration, error)

	// UpdateByIDFunc mocks the UpdateByID method.
	UpdateByIDFunc func(ctx context.Context, networkIntegration inventory.NetworkIntegration) (inventory.NetworkIntegration, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NetworkIntegration is the networkIntegration argument value.
			NetworkIntegration inventory.NetworkIntegration
		}
		// DeleteByServerID holds details about calls to the DeleteByServerID method.
		DeleteByServerID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServerID is the serverID argument value.
			ServerID int
		}
		// GetAllIDsWithFilter holds details about calls to the GetAllIDsWithFilter method.
		GetAllIDsWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter inventory.NetworkIntegrationFilter
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// UpdateByID holds details about calls to the UpdateByID method.
		UpdateByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NetworkIntegration is the networkIntegration argument value.
			NetworkIntegration inventory.NetworkIntegration
		}
	}
	lockCreate              sync.RWMutex
	lockDeleteByServerID    sync.RWMutex
	lockGetAllIDsWithFilter sync.RWMutex
	lockGetByID             sync.RWMutex
	lockUpdateByID          sync.RWMutex
}

// Create calls CreateFunc.
func (mock *NetworkIntegrationRepoMock) Create(ctx context.Context, networkIntegration inventory.NetworkIntegration) (inventory.NetworkIntegration, error) {
	if mock.CreateFunc == nil {
		panic("NetworkIntegrationRepoMock.CreateFunc: method is nil but NetworkIntegrationRepo.Create was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		NetworkIntegration inventory.NetworkIntegration
	}{
		Ctx:                ctx,
		NetworkIntegration: networkIntegration,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, networkIntegration)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedNetworkIntegrationRepo.CreateCalls())
func (mock *NetworkIntegrationRepoMock) CreateCalls() []struct {
	Ctx                context.Context
	NetworkIntegration inventory.NetworkIntegration
} {
	var calls []struct {
		Ctx                context.Context
		NetworkIntegration inventory.NetworkIntegration
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByServerID calls DeleteByServerIDFunc.
func (mock *NetworkIntegrationRepoMock) DeleteByServerID(ctx context.Context, serverID int) error {
	if mock.DeleteByServerIDFunc == nil {
		panic("NetworkIntegrationRepoMock.DeleteByServerIDFunc: method is nil but NetworkIntegrationRepo.DeleteByServerID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ServerID int
	}{
		Ctx:      ctx,
		ServerID: serverID,
	}
	mock.lockDeleteByServerID.Lock()
	mock.calls.DeleteByServerID = append(mock.calls.DeleteByServerID, callInfo)
	mock.lockDeleteByServerID.Unlock()
	return mock.DeleteByServerIDFunc(ctx, serverID)
}

// DeleteByServerIDCalls gets all the calls that were made to DeleteByServerID.
// Check the length with:
//
//	len(mockedNetworkIntegrationRepo.DeleteByServerIDCalls())
func (mock *NetworkIntegrationRepoMock) DeleteByServerIDCalls() []struct {
	Ctx      context.Context
	ServerID int
} {
	var calls []struct {
		Ctx      context.Context
		ServerID int
	}
	mock.lockDeleteByServerID.RLock()
	calls = mock.calls.DeleteByServerID
	mock.lockDeleteByServerID.RUnlock()
	return calls
}

// GetAllIDsWithFilter calls GetAllIDsWithFilterFunc.
func (mock *NetworkIntegrationRepoMock) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkIntegrationFilter) ([]int, error) {
	if mock.GetAllIDsWithFilterFunc == nil {
		panic("NetworkIntegrationRepoMock.GetAllIDsWithFilterFunc: method is nil but NetworkIntegrationRepo.GetAllIDsWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter inventory.NetworkIntegrationFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllIDsWithFilter.Lock()
	mock.calls.GetAllIDsWithFilter = append(mock.calls.GetAllIDsWithFilter, callInfo)
	mock.lockGetAllIDsWithFilter.Unlock()
	return mock.GetAllIDsWithFilterFunc(ctx, filter)
}

// GetAllIDsWithFilterCalls gets all the calls that were made to GetAllIDsWithFilter.
// Check the length with:
//
//	len(mockedNetworkIntegrationRepo.GetAllIDsWithFilterCalls())
func (mock *NetworkIntegrationRepoMock) GetAllIDsWithFilterCalls() []struct {
	Ctx    context.Context
	Filter inventory.NetworkIntegrationFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter inventory.NetworkIntegrationFilter
	}
	mock.lockGetAllIDsWithFilter.RLock()
	calls = mock.calls.GetAllIDsWithFilter
	mock.lockGetAllIDsWithFilter.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *NetworkIntegrationRepoMock) GetByID(ctx context.Context, id int) (inventory.NetworkIntegration, error) {
	if mock.GetByIDFunc == nil {
		panic("NetworkIntegrationRepoMock.GetByIDFunc: method is nil but NetworkIntegrationRepo.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedNetworkIntegrationRepo.GetByIDCalls())
func (mock *NetworkIntegrationRepoMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// UpdateByID calls UpdateByIDFunc.
func (mock *NetworkIntegrationRepoMock) UpdateByID(ctx context.Context, networkIntegration inventory.NetworkIntegration) (inventory.NetworkIntegration, error) {
	if mock.UpdateByIDFunc == nil {
		panic("NetworkIntegrationRepoMock.UpdateByIDFunc: method is nil but NetworkIntegrationRepo.UpdateByID was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		NetworkIntegration inventory.NetworkIntegration
	}{
		Ctx:                ctx,
		NetworkIntegration: networkIntegration,
	}
	mock.lockUpdateByID.Lock()
	mock.calls.UpdateByID = append(mock.calls.UpdateByID, callInfo)
	mock.lockUpdateByID.Unlock()
	return mock.UpdateByIDFunc(ctx, networkIntegration)
}

// UpdateByIDCalls gets all the calls that were made to UpdateByID.
// Check the length with:
//
//	len(mockedNetworkIntegrationRepo.UpdateByIDCalls())
func (mock *NetworkIntegrationRepoMock) UpdateByIDCalls() []struct {
	Ctx                context.Context
	NetworkIntegration inventory.NetworkIntegration
} {
	var calls []struct {
		Ctx                context.Context
		NetworkIntegration inventory.NetworkIntegration
	}
	mock.lockUpdateByID.RLock()
	calls = mock.calls.UpdateByID
	mock.lockUpdateByID.RUnlock()
	return calls
}
