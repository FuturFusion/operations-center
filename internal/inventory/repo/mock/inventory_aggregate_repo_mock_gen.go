// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
)

// Ensure that InventoryAggregateRepoMock does implement inventory.InventoryAggregateRepo.
// If this is not the case, regenerate this file with mockery.
var _ inventory.InventoryAggregateRepo = &InventoryAggregateRepoMock{}

// InventoryAggregateRepoMock is a mock implementation of inventory.InventoryAggregateRepo.
//
//	func TestSomethingThatUsesInventoryAggregateRepo(t *testing.T) {
//
//		// make and configure a mocked inventory.InventoryAggregateRepo
//		mockedInventoryAggregateRepo := &InventoryAggregateRepoMock{
//			GetAllWithFilterFunc: func(ctx context.Context, filter inventory.InventoryAggregateFilter) (inventory.InventoryAggregates, error) {
//				panic("mock out the GetAllWithFilter method")
//			},
//		}
//
//		// use mockedInventoryAggregateRepo in code that requires inventory.InventoryAggregateRepo
//		// and then make assertions.
//
//	}
type InventoryAggregateRepoMock struct {
	// GetAllWithFilterFunc mocks the GetAllWithFilter method.
	GetAllWithFilterFunc func(ctx context.Context, filter inventory.InventoryAggregateFilter) (inventory.InventoryAggregates, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllWithFilter holds details about calls to the GetAllWithFilter method.
		GetAllWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter inventory.InventoryAggregateFilter
		}
	}
	lockGetAllWithFilter sync.RWMutex
}

// GetAllWithFilter calls GetAllWithFilterFunc.
func (mock *InventoryAggregateRepoMock) GetAllWithFilter(ctx context.Context, filter inventory.InventoryAggregateFilter) (inventory.InventoryAggregates, error) {
	if mock.GetAllWithFilterFunc == nil {
		panic("InventoryAggregateRepoMock.GetAllWithFilterFunc: method is nil but InventoryAggregateRepo.GetAllWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter inventory.InventoryAggregateFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllWithFilter.Lock()
	mock.calls.GetAllWithFilter = append(mock.calls.GetAllWithFilter, callInfo)
	mock.lockGetAllWithFilter.Unlock()
	return mock.GetAllWithFilterFunc(ctx, filter)
}

// GetAllWithFilterCalls gets all the calls that were made to GetAllWithFilter.
// Check the length with:
//
//	len(mockedInventoryAggregateRepo.GetAllWithFilterCalls())
func (mock *InventoryAggregateRepoMock) GetAllWithFilterCalls() []struct {
	Ctx    context.Context
	Filter inventory.InventoryAggregateFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter inventory.InventoryAggregateFilter
	}
	mock.lockGetAllWithFilter.RLock()
	calls = mock.calls.GetAllWithFilter
	mock.lockGetAllWithFilter.RUnlock()
	return calls
}
