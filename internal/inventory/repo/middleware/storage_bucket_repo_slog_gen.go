// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// StorageBucketRepoWithSlog implements inventory.StorageBucketRepo that is instrumented with slog logger.
type StorageBucketRepoWithSlog struct {
	_log  *slog.Logger
	_base inventory.StorageBucketRepo
}

// NewStorageBucketRepoWithSlog instruments an implementation of the inventory.StorageBucketRepo with simple logging.
func NewStorageBucketRepoWithSlog(base inventory.StorageBucketRepo, log *slog.Logger) StorageBucketRepoWithSlog {
	return StorageBucketRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithSlog) Create(ctx context.Context, storageBucket inventory.StorageBucket) (storageBucket1 inventory.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("storageBucket", storageBucket),
		)
	}
	log.Debug("StorageBucketRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBucket1", storageBucket1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StorageBucketRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("StorageBucketRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, storageBucket)
}

// DeleteByID implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithSlog) DeleteByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("StorageBucketRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StorageBucketRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("StorageBucketRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// DeleteByServer implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithSlog) DeleteByServer(ctx context.Context, server string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("server", server),
		)
	}
	log.Debug("StorageBucketRepoWithSlog: calling DeleteByServer")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StorageBucketRepoWithSlog: method DeleteByServer returned an error")
		} else {
			log.Debug("StorageBucketRepoWithSlog: method DeleteByServer finished")
		}
	}()
	return _d._base.DeleteByServer(ctx, server)
}

// GetAllIDsWithFilter implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter inventory.StorageBucketFilter) (ints []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("StorageBucketRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ints", ints),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StorageBucketRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("StorageBucketRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithSlog) GetByID(ctx context.Context, id int) (storageBucket inventory.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("StorageBucketRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBucket", storageBucket),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StorageBucketRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("StorageBucketRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithSlog) UpdateByID(ctx context.Context, storageBucket inventory.StorageBucket) (storageBucket1 inventory.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("storageBucket", storageBucket),
		)
	}
	log.Debug("StorageBucketRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBucket1", storageBucket1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StorageBucketRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("StorageBucketRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, storageBucket)
}
