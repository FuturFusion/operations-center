// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
)

// NetworkIntegrationRepoWithSlog implements _sourceInventory.NetworkIntegrationRepo that is instrumented with slog logger
type NetworkIntegrationRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkIntegrationRepo
}

// NewNetworkIntegrationRepoWithSlog instruments an implementation of the _sourceInventory.NetworkIntegrationRepo with simple logging
func NewNetworkIntegrationRepoWithSlog(base _sourceInventory.NetworkIntegrationRepo, log *slog.Logger) NetworkIntegrationRepoWithSlog {
	return NetworkIntegrationRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceInventory.NetworkIntegrationRepo
func (_d NetworkIntegrationRepoWithSlog) Create(ctx context.Context, networkIntegration _sourceInventory.NetworkIntegration) (n1 _sourceInventory.NetworkIntegration, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("networkIntegration", networkIntegration),
	).Debug("NetworkIntegrationRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkIntegrationRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("NetworkIntegrationRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, networkIntegration)
}

// DeleteByServerID implements _sourceInventory.NetworkIntegrationRepo
func (_d NetworkIntegrationRepoWithSlog) DeleteByServerID(ctx context.Context, serverID int) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("serverID", serverID),
	).Debug("NetworkIntegrationRepoWithSlog: calling DeleteByServerID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkIntegrationRepoWithSlog: method DeleteByServerID returned an error")
		} else {
			log.Debug("NetworkIntegrationRepoWithSlog: method DeleteByServerID finished")
		}
	}()
	return _d._base.DeleteByServerID(ctx, serverID)
}

// GetAllIDsWithFilter implements _sourceInventory.NetworkIntegrationRepo
func (_d NetworkIntegrationRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter _sourceInventory.NetworkIntegrationFilter) (ia1 []int, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("filter", filter),
	).Debug("NetworkIntegrationRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With(
			slog.Any("ia1", ia1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkIntegrationRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("NetworkIntegrationRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements _sourceInventory.NetworkIntegrationRepo
func (_d NetworkIntegrationRepoWithSlog) GetByID(ctx context.Context, id int) (n1 _sourceInventory.NetworkIntegration, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("NetworkIntegrationRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkIntegrationRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("NetworkIntegrationRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements _sourceInventory.NetworkIntegrationRepo
func (_d NetworkIntegrationRepoWithSlog) UpdateByID(ctx context.Context, networkIntegration _sourceInventory.NetworkIntegration) (n1 _sourceInventory.NetworkIntegration, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("networkIntegration", networkIntegration),
	).Debug("NetworkIntegrationRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkIntegrationRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("NetworkIntegrationRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, networkIntegration)
}
