// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// NetworkRepoWithTransactionEnforcer implements inventory.NetworkRepo that enforces a transaction.
type NetworkRepoWithTransactionEnforcer struct {
	_base inventory.NetworkRepo
}

// NewNetworkRepoWithTransactionEnforcer instruments an implementation of the inventory.NetworkRepo with simple logging.
func NewNetworkRepoWithTransactionEnforcer(base inventory.NetworkRepo) NetworkRepoWithTransactionEnforcer {
	return NetworkRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.NetworkRepo.
func (_d NetworkRepoWithTransactionEnforcer) Create(ctx context.Context, network inventory.Network) (network1 inventory.Network, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		network1, err = _d._base.Create(ctx, network)
		return err
	})

	return network1, err
}

// DeleteByClusterName implements inventory.NetworkRepo.
func (_d NetworkRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.NetworkRepo.
func (_d NetworkRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.NetworkRepo.
func (_d NetworkRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.NetworkRepo.
func (_d NetworkRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (network inventory.Network, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		network, err = _d._base.GetByID(ctx, id)
		return err
	})

	return network, err
}

// UpdateByID implements inventory.NetworkRepo.
func (_d NetworkRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, network inventory.Network) (network1 inventory.Network, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		network1, err = _d._base.UpdateByID(ctx, network)
		return err
	})

	return network1, err
}
