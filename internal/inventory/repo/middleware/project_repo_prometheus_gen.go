// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ProjectRepoWithPrometheus implements inventory.ProjectRepo interface with all methods wrapped
// with Prometheus metrics.
type ProjectRepoWithPrometheus struct {
	base         inventory.ProjectRepo
	instanceName string
}

var projectRepoDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "project_repo_duration_seconds",
		Help:       "projectRepo runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewProjectRepoWithPrometheus returns an instance of the inventory.ProjectRepo decorated with prometheus summary metric.
func NewProjectRepoWithPrometheus(base inventory.ProjectRepo, instanceName string) ProjectRepoWithPrometheus {
	return ProjectRepoWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Create implements inventory.ProjectRepo.
func (_d ProjectRepoWithPrometheus) Create(ctx context.Context, project inventory.Project) (project1 inventory.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, project)
}

// DeleteByClusterName implements inventory.ProjectRepo.
func (_d ProjectRepoWithPrometheus) DeleteByClusterName(ctx context.Context, cluster string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByClusterName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByClusterName(ctx, cluster)
}

// DeleteByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithPrometheus) DeleteByID(ctx context.Context, id int) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByID(ctx, id)
}

// GetAllIDsWithFilter implements inventory.ProjectRepo.
func (_d ProjectRepoWithPrometheus) GetAllIDsWithFilter(ctx context.Context, filter inventory.ProjectFilter) (ints []int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllIDsWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithPrometheus) GetByID(ctx context.Context, id int) (project inventory.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByID(ctx, id)
}

// UpdateByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithPrometheus) UpdateByID(ctx context.Context, project inventory.Project) (project1 inventory.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateByID(ctx, project)
}
