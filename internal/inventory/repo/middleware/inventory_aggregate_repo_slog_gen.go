// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// InventoryAggregateRepoWithSlog implements inventory.InventoryAggregateRepo that is instrumented with slog logger.
type InventoryAggregateRepoWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.InventoryAggregateRepo
	_isInformativeErrFunc func(error) bool
}

type InventoryAggregateRepoWithSlogOption func(s *InventoryAggregateRepoWithSlog)

func InventoryAggregateRepoWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) InventoryAggregateRepoWithSlogOption {
	return func(_base *InventoryAggregateRepoWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewInventoryAggregateRepoWithSlog instruments an implementation of the inventory.InventoryAggregateRepo with simple logging.
func NewInventoryAggregateRepoWithSlog(base inventory.InventoryAggregateRepo, log *slog.Logger, opts ...InventoryAggregateRepoWithSlogOption) InventoryAggregateRepoWithSlog {
	this := InventoryAggregateRepoWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetAllWithFilter implements inventory.InventoryAggregateRepo.
func (_d InventoryAggregateRepoWithSlog) GetAllWithFilter(ctx context.Context, filter inventory.InventoryAggregateFilter) (inventoryAggregates inventory.InventoryAggregates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("=> calling GetAllWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("inventoryAggregates", inventoryAggregates),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetAllWithFilter returned an informative error")
			} else {
				log.Error("<= method GetAllWithFilter returned an error")
			}
		} else {
			log.Debug("<= method GetAllWithFilter finished")
		}
	}()
	return _d._base.GetAllWithFilter(ctx, filter)
}
