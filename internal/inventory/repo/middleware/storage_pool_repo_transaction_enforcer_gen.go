// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// StoragePoolRepoWithTransactionEnforcer implements inventory.StoragePoolRepo that enforces a transaction.
type StoragePoolRepoWithTransactionEnforcer struct {
	_base inventory.StoragePoolRepo
}

// NewStoragePoolRepoWithTransactionEnforcer instruments an implementation of the inventory.StoragePoolRepo with simple logging.
func NewStoragePoolRepoWithTransactionEnforcer(base inventory.StoragePoolRepo) StoragePoolRepoWithTransactionEnforcer {
	return StoragePoolRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.StoragePoolRepo.
func (_d StoragePoolRepoWithTransactionEnforcer) Create(ctx context.Context, storagePool inventory.StoragePool) (storagePool1 inventory.StoragePool, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storagePool1, err = _d._base.Create(ctx, storagePool)
		return err
	})

	return storagePool1, err
}

// DeleteByClusterName implements inventory.StoragePoolRepo.
func (_d StoragePoolRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.StoragePoolRepo.
func (_d StoragePoolRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.StoragePoolRepo.
func (_d StoragePoolRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.StoragePoolFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.StoragePoolRepo.
func (_d StoragePoolRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (storagePool inventory.StoragePool, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storagePool, err = _d._base.GetByID(ctx, id)
		return err
	})

	return storagePool, err
}

// UpdateByID implements inventory.StoragePoolRepo.
func (_d StoragePoolRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, storagePool inventory.StoragePool) (storagePool1 inventory.StoragePool, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storagePool1, err = _d._base.UpdateByID(ctx, storagePool)
		return err
	})

	return storagePool1, err
}
