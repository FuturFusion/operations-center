// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// ProjectRepoWithSlog implements inventory.ProjectRepo that is instrumented with slog logger.
type ProjectRepoWithSlog struct {
	_log  *slog.Logger
	_base inventory.ProjectRepo
}

// NewProjectRepoWithSlog instruments an implementation of the inventory.ProjectRepo with simple logging.
func NewProjectRepoWithSlog(base inventory.ProjectRepo, log *slog.Logger) ProjectRepoWithSlog {
	return ProjectRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements inventory.ProjectRepo.
func (_d ProjectRepoWithSlog) Create(ctx context.Context, project inventory.Project) (project1 inventory.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("project", project),
		)
	}
	log.Debug("ProjectRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("project1", project1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProjectRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, project)
}

// DeleteByCluster implements inventory.ProjectRepo.
func (_d ProjectRepoWithSlog) DeleteByCluster(ctx context.Context, cluster string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("cluster", cluster),
		)
	}
	log.Debug("ProjectRepoWithSlog: calling DeleteByCluster")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProjectRepoWithSlog: method DeleteByCluster returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method DeleteByCluster finished")
		}
	}()
	return _d._base.DeleteByCluster(ctx, cluster)
}

// DeleteByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithSlog) DeleteByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("ProjectRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProjectRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// GetAllIDsWithFilter implements inventory.ProjectRepo.
func (_d ProjectRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter inventory.ProjectFilter) (ints []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("ProjectRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ints", ints),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProjectRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithSlog) GetByID(ctx context.Context, id int) (project inventory.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("ProjectRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("project", project),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProjectRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithSlog) UpdateByID(ctx context.Context, project inventory.Project) (project1 inventory.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("project", project),
		)
	}
	log.Debug("ProjectRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("project1", project1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProjectRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, project)
}
