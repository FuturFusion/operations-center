// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/google/uuid"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// NetworkAddressSetRepoWithPrometheus implements inventory.NetworkAddressSetRepo interface with all methods wrapped
// with Prometheus metrics.
type NetworkAddressSetRepoWithPrometheus struct {
	base         inventory.NetworkAddressSetRepo
	instanceName string
}

var networkAddressSetRepoDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "network_address_set_repo_duration_seconds",
		Help:       "networkAddressSetRepo runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewNetworkAddressSetRepoWithPrometheus returns an instance of the inventory.NetworkAddressSetRepo decorated with prometheus summary metric.
func NewNetworkAddressSetRepoWithPrometheus(base inventory.NetworkAddressSetRepo, instanceName string) NetworkAddressSetRepoWithPrometheus {
	return NetworkAddressSetRepoWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Create implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithPrometheus) Create(ctx context.Context, networkAddressSet inventory.NetworkAddressSet) (networkAddressSet1 inventory.NetworkAddressSet, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkAddressSetRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, networkAddressSet)
}

// DeleteByClusterName implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithPrometheus) DeleteByClusterName(ctx context.Context, cluster string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkAddressSetRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByClusterName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByClusterName(ctx, cluster)
}

// DeleteByUUID implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithPrometheus) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkAddressSetRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByUUID(ctx, id)
}

// GetAllUUIDsWithFilter implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithPrometheus) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.NetworkAddressSetFilter) (uUIDs []uuid.UUID, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkAddressSetRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllUUIDsWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithPrometheus) GetAllWithFilter(ctx context.Context, filter inventory.NetworkAddressSetFilter) (networkAddressSets inventory.NetworkAddressSets, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkAddressSetRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithPrometheus) GetByUUID(ctx context.Context, id uuid.UUID) (networkAddressSet inventory.NetworkAddressSet, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkAddressSetRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByUUID(ctx, id)
}

// UpdateByUUID implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithPrometheus) UpdateByUUID(ctx context.Context, networkAddressSet inventory.NetworkAddressSet) (networkAddressSet1 inventory.NetworkAddressSet, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkAddressSetRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateByUUID(ctx, networkAddressSet)
}
