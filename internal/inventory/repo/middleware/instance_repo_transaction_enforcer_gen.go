// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// InstanceRepoWithTransactionEnforcer implements inventory.InstanceRepo that enforces a transaction.
type InstanceRepoWithTransactionEnforcer struct {
	_base inventory.InstanceRepo
}

// NewInstanceRepoWithTransactionEnforcer instruments an implementation of the inventory.InstanceRepo with simple logging.
func NewInstanceRepoWithTransactionEnforcer(base inventory.InstanceRepo) InstanceRepoWithTransactionEnforcer {
	return InstanceRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.InstanceRepo.
func (_d InstanceRepoWithTransactionEnforcer) Create(ctx context.Context, instance inventory.Instance) (instance1 inventory.Instance, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		instance1, err = _d._base.Create(ctx, instance)
		return err
	})

	return instance1, err
}

// DeleteByClusterName implements inventory.InstanceRepo.
func (_d InstanceRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.InstanceRepo.
func (_d InstanceRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.InstanceRepo.
func (_d InstanceRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.InstanceFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.InstanceRepo.
func (_d InstanceRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (instance inventory.Instance, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		instance, err = _d._base.GetByID(ctx, id)
		return err
	})

	return instance, err
}

// UpdateByID implements inventory.InstanceRepo.
func (_d InstanceRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, instance inventory.Instance) (instance1 inventory.Instance, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		instance1, err = _d._base.UpdateByID(ctx, instance)
		return err
	})

	return instance1, err
}
