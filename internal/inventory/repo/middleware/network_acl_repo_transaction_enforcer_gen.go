// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// NetworkACLRepoWithTransactionEnforcer implements inventory.NetworkACLRepo that enforces a transaction.
type NetworkACLRepoWithTransactionEnforcer struct {
	_base inventory.NetworkACLRepo
}

// NewNetworkACLRepoWithTransactionEnforcer instruments an implementation of the inventory.NetworkACLRepo with simple logging.
func NewNetworkACLRepoWithTransactionEnforcer(base inventory.NetworkACLRepo) NetworkACLRepoWithTransactionEnforcer {
	return NetworkACLRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.NetworkACLRepo.
func (_d NetworkACLRepoWithTransactionEnforcer) Create(ctx context.Context, networkACL inventory.NetworkACL) (networkACL1 inventory.NetworkACL, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkACL1, err = _d._base.Create(ctx, networkACL)
		return err
	})

	return networkACL1, err
}

// DeleteByClusterName implements inventory.NetworkACLRepo.
func (_d NetworkACLRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.NetworkACLRepo.
func (_d NetworkACLRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.NetworkACLRepo.
func (_d NetworkACLRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkACLFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.NetworkACLRepo.
func (_d NetworkACLRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (networkACL inventory.NetworkACL, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkACL, err = _d._base.GetByID(ctx, id)
		return err
	})

	return networkACL, err
}

// UpdateByID implements inventory.NetworkACLRepo.
func (_d NetworkACLRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, networkACL inventory.NetworkACL) (networkACL1 inventory.NetworkACL, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkACL1, err = _d._base.UpdateByID(ctx, networkACL)
		return err
	})

	return networkACL1, err
}
