// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
)

// StoragePoolRepoWithSlog implements _sourceInventory.StoragePoolRepo that is instrumented with slog logger
type StoragePoolRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.StoragePoolRepo
}

// NewStoragePoolRepoWithSlog instruments an implementation of the _sourceInventory.StoragePoolRepo with simple logging
func NewStoragePoolRepoWithSlog(base _sourceInventory.StoragePoolRepo, log *slog.Logger) StoragePoolRepoWithSlog {
	return StoragePoolRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceInventory.StoragePoolRepo
func (_d StoragePoolRepoWithSlog) Create(ctx context.Context, storagePool _sourceInventory.StoragePool) (s1 _sourceInventory.StoragePool, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("storagePool", storagePool),
	).Debug("StoragePoolRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("StoragePoolRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("StoragePoolRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, storagePool)
}

// DeleteByServerID implements _sourceInventory.StoragePoolRepo
func (_d StoragePoolRepoWithSlog) DeleteByServerID(ctx context.Context, serverID int) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("serverID", serverID),
	).Debug("StoragePoolRepoWithSlog: calling DeleteByServerID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("StoragePoolRepoWithSlog: method DeleteByServerID returned an error")
		} else {
			log.Debug("StoragePoolRepoWithSlog: method DeleteByServerID finished")
		}
	}()
	return _d._base.DeleteByServerID(ctx, serverID)
}

// GetAllIDsWithFilter implements _sourceInventory.StoragePoolRepo
func (_d StoragePoolRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter _sourceInventory.StoragePoolFilter) (ia1 []int, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("filter", filter),
	).Debug("StoragePoolRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With(
			slog.Any("ia1", ia1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("StoragePoolRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("StoragePoolRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements _sourceInventory.StoragePoolRepo
func (_d StoragePoolRepoWithSlog) GetByID(ctx context.Context, id int) (s1 _sourceInventory.StoragePool, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("StoragePoolRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("StoragePoolRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("StoragePoolRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}
