// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// StorageVolumeRepoWithTransactionEnforcer implements inventory.StorageVolumeRepo that enforces a transaction.
type StorageVolumeRepoWithTransactionEnforcer struct {
	_base inventory.StorageVolumeRepo
}

// NewStorageVolumeRepoWithTransactionEnforcer instruments an implementation of the inventory.StorageVolumeRepo with simple logging.
func NewStorageVolumeRepoWithTransactionEnforcer(base inventory.StorageVolumeRepo) StorageVolumeRepoWithTransactionEnforcer {
	return StorageVolumeRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.StorageVolumeRepo.
func (_d StorageVolumeRepoWithTransactionEnforcer) Create(ctx context.Context, storageVolume inventory.StorageVolume) (storageVolume1 inventory.StorageVolume, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storageVolume1, err = _d._base.Create(ctx, storageVolume)
		return err
	})

	return storageVolume1, err
}

// DeleteByClusterName implements inventory.StorageVolumeRepo.
func (_d StorageVolumeRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.StorageVolumeRepo.
func (_d StorageVolumeRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.StorageVolumeRepo.
func (_d StorageVolumeRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.StorageVolumeFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.StorageVolumeRepo.
func (_d StorageVolumeRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (storageVolume inventory.StorageVolume, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storageVolume, err = _d._base.GetByID(ctx, id)
		return err
	})

	return storageVolume, err
}

// UpdateByID implements inventory.StorageVolumeRepo.
func (_d StorageVolumeRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, storageVolume inventory.StorageVolume) (storageVolume1 inventory.StorageVolume, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storageVolume1, err = _d._base.UpdateByID(ctx, storageVolume)
		return err
	})

	return storageVolume1, err
}
