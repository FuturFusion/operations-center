// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
)

// ImageRepoWithSlog implements _sourceInventory.ImageRepo that is instrumented with slog logger
type ImageRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.ImageRepo
}

// NewImageRepoWithSlog instruments an implementation of the _sourceInventory.ImageRepo with simple logging
func NewImageRepoWithSlog(base _sourceInventory.ImageRepo, log *slog.Logger) ImageRepoWithSlog {
	return ImageRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceInventory.ImageRepo
func (_d ImageRepoWithSlog) Create(ctx context.Context, image _sourceInventory.Image) (i1 _sourceInventory.Image, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("image", image),
	).Debug("ImageRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ImageRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("ImageRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, image)
}

// DeleteByServerID implements _sourceInventory.ImageRepo
func (_d ImageRepoWithSlog) DeleteByServerID(ctx context.Context, serverID int) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("serverID", serverID),
	).Debug("ImageRepoWithSlog: calling DeleteByServerID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ImageRepoWithSlog: method DeleteByServerID returned an error")
		} else {
			log.Debug("ImageRepoWithSlog: method DeleteByServerID finished")
		}
	}()
	return _d._base.DeleteByServerID(ctx, serverID)
}

// GetAllIDs implements _sourceInventory.ImageRepo
func (_d ImageRepoWithSlog) GetAllIDs(ctx context.Context) (ia1 []int, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("ImageRepoWithSlog: calling GetAllIDs")
	defer func() {
		log := _d._log.With(
			slog.Any("ia1", ia1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ImageRepoWithSlog: method GetAllIDs returned an error")
		} else {
			log.Debug("ImageRepoWithSlog: method GetAllIDs finished")
		}
	}()
	return _d._base.GetAllIDs(ctx)
}

// GetByID implements _sourceInventory.ImageRepo
func (_d ImageRepoWithSlog) GetByID(ctx context.Context, id int) (i1 _sourceInventory.Image, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("ImageRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ImageRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ImageRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}
