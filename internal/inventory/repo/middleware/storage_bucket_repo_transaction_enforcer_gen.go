// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// StorageBucketRepoWithTransactionEnforcer implements inventory.StorageBucketRepo that enforces a transaction.
type StorageBucketRepoWithTransactionEnforcer struct {
	_base inventory.StorageBucketRepo
}

// NewStorageBucketRepoWithTransactionEnforcer instruments an implementation of the inventory.StorageBucketRepo with simple logging.
func NewStorageBucketRepoWithTransactionEnforcer(base inventory.StorageBucketRepo) StorageBucketRepoWithTransactionEnforcer {
	return StorageBucketRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithTransactionEnforcer) Create(ctx context.Context, storageBucket inventory.StorageBucket) (storageBucket1 inventory.StorageBucket, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storageBucket1, err = _d._base.Create(ctx, storageBucket)
		return err
	})

	return storageBucket1, err
}

// DeleteByClusterName implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.StorageBucketFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (storageBucket inventory.StorageBucket, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storageBucket, err = _d._base.GetByID(ctx, id)
		return err
	})

	return storageBucket, err
}

// UpdateByID implements inventory.StorageBucketRepo.
func (_d StorageBucketRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, storageBucket inventory.StorageBucket) (storageBucket1 inventory.StorageBucket, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		storageBucket1, err = _d._base.UpdateByID(ctx, storageBucket)
		return err
	})

	return storageBucket1, err
}
