// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// NetworkZoneRepoWithSlog implements _sourceInventory.NetworkZoneRepo that is instrumented with slog logger
type NetworkZoneRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkZoneRepo
}

// NewNetworkZoneRepoWithSlog instruments an implementation of the _sourceInventory.NetworkZoneRepo with simple logging
func NewNetworkZoneRepoWithSlog(base _sourceInventory.NetworkZoneRepo, log *slog.Logger) NetworkZoneRepoWithSlog {
	return NetworkZoneRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceInventory.NetworkZoneRepo
func (_d NetworkZoneRepoWithSlog) Create(ctx context.Context, networkZone _sourceInventory.NetworkZone) (n1 _sourceInventory.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkZone", networkZone),
		)
	}
	log.Debug("NetworkZoneRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkZoneRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("NetworkZoneRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, networkZone)
}

// DeleteByID implements _sourceInventory.NetworkZoneRepo
func (_d NetworkZoneRepoWithSlog) DeleteByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("NetworkZoneRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkZoneRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("NetworkZoneRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// DeleteByServerID implements _sourceInventory.NetworkZoneRepo
func (_d NetworkZoneRepoWithSlog) DeleteByServerID(ctx context.Context, serverID int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("serverID", serverID),
		)
	}
	log.Debug("NetworkZoneRepoWithSlog: calling DeleteByServerID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkZoneRepoWithSlog: method DeleteByServerID returned an error")
		} else {
			log.Debug("NetworkZoneRepoWithSlog: method DeleteByServerID finished")
		}
	}()
	return _d._base.DeleteByServerID(ctx, serverID)
}

// GetAllIDsWithFilter implements _sourceInventory.NetworkZoneRepo
func (_d NetworkZoneRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter _sourceInventory.NetworkZoneFilter) (ia1 []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("NetworkZoneRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ia1", ia1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkZoneRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("NetworkZoneRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements _sourceInventory.NetworkZoneRepo
func (_d NetworkZoneRepoWithSlog) GetByID(ctx context.Context, id int) (n1 _sourceInventory.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("NetworkZoneRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkZoneRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("NetworkZoneRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements _sourceInventory.NetworkZoneRepo
func (_d NetworkZoneRepoWithSlog) UpdateByID(ctx context.Context, networkZone _sourceInventory.NetworkZone) (n1 _sourceInventory.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkZone", networkZone),
		)
	}
	log.Debug("NetworkZoneRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkZoneRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("NetworkZoneRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, networkZone)
}
