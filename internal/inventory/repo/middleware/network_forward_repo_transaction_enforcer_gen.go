// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// NetworkForwardRepoWithTransactionEnforcer implements inventory.NetworkForwardRepo that enforces a transaction.
type NetworkForwardRepoWithTransactionEnforcer struct {
	_base inventory.NetworkForwardRepo
}

// NewNetworkForwardRepoWithTransactionEnforcer instruments an implementation of the inventory.NetworkForwardRepo with simple logging.
func NewNetworkForwardRepoWithTransactionEnforcer(base inventory.NetworkForwardRepo) NetworkForwardRepoWithTransactionEnforcer {
	return NetworkForwardRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.NetworkForwardRepo.
func (_d NetworkForwardRepoWithTransactionEnforcer) Create(ctx context.Context, networkForward inventory.NetworkForward) (networkForward1 inventory.NetworkForward, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkForward1, err = _d._base.Create(ctx, networkForward)
		return err
	})

	return networkForward1, err
}

// DeleteByClusterName implements inventory.NetworkForwardRepo.
func (_d NetworkForwardRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.NetworkForwardRepo.
func (_d NetworkForwardRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.NetworkForwardRepo.
func (_d NetworkForwardRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkForwardFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.NetworkForwardRepo.
func (_d NetworkForwardRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (networkForward inventory.NetworkForward, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkForward, err = _d._base.GetByID(ctx, id)
		return err
	})

	return networkForward, err
}

// UpdateByID implements inventory.NetworkForwardRepo.
func (_d NetworkForwardRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, networkForward inventory.NetworkForward) (networkForward1 inventory.NetworkForward, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkForward1, err = _d._base.UpdateByID(ctx, networkForward)
		return err
	})

	return networkForward1, err
}
