// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/google/uuid"
)

// NetworkAddressSetRepoWithSlog implements inventory.NetworkAddressSetRepo that is instrumented with slog logger.
type NetworkAddressSetRepoWithSlog struct {
	_log  *slog.Logger
	_base inventory.NetworkAddressSetRepo
}

// NewNetworkAddressSetRepoWithSlog instruments an implementation of the inventory.NetworkAddressSetRepo with simple logging.
func NewNetworkAddressSetRepoWithSlog(base inventory.NetworkAddressSetRepo, log *slog.Logger) NetworkAddressSetRepoWithSlog {
	return NetworkAddressSetRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithSlog) Create(ctx context.Context, networkAddressSet inventory.NetworkAddressSet) (networkAddressSet1 inventory.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkAddressSet", networkAddressSet),
		)
	}
	log.Debug("=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSet1", networkAddressSet1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method Create returned an error")
		} else {
			log.Debug("<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, networkAddressSet)
}

// DeleteByClusterName implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithSlog) DeleteByClusterName(ctx context.Context, cluster string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("cluster", cluster),
		)
	}
	log.Debug("=> calling DeleteByClusterName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method DeleteByClusterName returned an error")
		} else {
			log.Debug("<= method DeleteByClusterName finished")
		}
	}()
	return _d._base.DeleteByClusterName(ctx, cluster)
}

// DeleteByUUID implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithSlog) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling DeleteByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method DeleteByUUID returned an error")
		} else {
			log.Debug("<= method DeleteByUUID finished")
		}
	}()
	return _d._base.DeleteByUUID(ctx, id)
}

// GetAllUUIDsWithFilter implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithSlog) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.NetworkAddressSetFilter) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("=> calling GetAllUUIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAllUUIDsWithFilter returned an error")
		} else {
			log.Debug("<= method GetAllUUIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithSlog) GetAllWithFilter(ctx context.Context, filter inventory.NetworkAddressSetFilter) (networkAddressSets inventory.NetworkAddressSets, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("=> calling GetAllWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSets", networkAddressSets),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAllWithFilter returned an error")
		} else {
			log.Debug("<= method GetAllWithFilter finished")
		}
	}()
	return _d._base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithSlog) GetByUUID(ctx context.Context, id uuid.UUID) (networkAddressSet inventory.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling GetByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSet", networkAddressSet),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetByUUID returned an error")
		} else {
			log.Debug("<= method GetByUUID finished")
		}
	}()
	return _d._base.GetByUUID(ctx, id)
}

// UpdateByUUID implements inventory.NetworkAddressSetRepo.
func (_d NetworkAddressSetRepoWithSlog) UpdateByUUID(ctx context.Context, networkAddressSet inventory.NetworkAddressSet) (networkAddressSet1 inventory.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkAddressSet", networkAddressSet),
		)
	}
	log.Debug("=> calling UpdateByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSet1", networkAddressSet1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method UpdateByUUID returned an error")
		} else {
			log.Debug("<= method UpdateByUUID finished")
		}
	}()
	return _d._base.UpdateByUUID(ctx, networkAddressSet)
}
