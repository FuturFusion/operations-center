// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// NetworkPeerRepoWithSlog implements inventory.NetworkPeerRepo that is instrumented with slog logger.
type NetworkPeerRepoWithSlog struct {
	_log  *slog.Logger
	_base inventory.NetworkPeerRepo
}

// NewNetworkPeerRepoWithSlog instruments an implementation of the inventory.NetworkPeerRepo with simple logging.
func NewNetworkPeerRepoWithSlog(base inventory.NetworkPeerRepo, log *slog.Logger) NetworkPeerRepoWithSlog {
	return NetworkPeerRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) Create(ctx context.Context, networkPeer inventory.NetworkPeer) (networkPeer1 inventory.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkPeer", networkPeer),
		)
	}
	log.Debug("NetworkPeerRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer1", networkPeer1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkPeerRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("NetworkPeerRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, networkPeer)
}

// DeleteByClusterName implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) DeleteByClusterName(ctx context.Context, cluster string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("cluster", cluster),
		)
	}
	log.Debug("NetworkPeerRepoWithSlog: calling DeleteByClusterName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkPeerRepoWithSlog: method DeleteByClusterName returned an error")
		} else {
			log.Debug("NetworkPeerRepoWithSlog: method DeleteByClusterName finished")
		}
	}()
	return _d._base.DeleteByClusterName(ctx, cluster)
}

// DeleteByID implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) DeleteByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("NetworkPeerRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkPeerRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("NetworkPeerRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// GetAllIDsWithFilter implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkPeerFilter) (ints []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("NetworkPeerRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ints", ints),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkPeerRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("NetworkPeerRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) GetByID(ctx context.Context, id int) (networkPeer inventory.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("NetworkPeerRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer", networkPeer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkPeerRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("NetworkPeerRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) UpdateByID(ctx context.Context, networkPeer inventory.NetworkPeer) (networkPeer1 inventory.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkPeer", networkPeer),
		)
	}
	log.Debug("NetworkPeerRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer1", networkPeer1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkPeerRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("NetworkPeerRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, networkPeer)
}
