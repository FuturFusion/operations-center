// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/google/uuid"
)

// NetworkPeerRepoWithSlog implements inventory.NetworkPeerRepo that is instrumented with slog logger.
type NetworkPeerRepoWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.NetworkPeerRepo
	_isInformativeErrFunc func(error) bool
}

type NetworkPeerRepoWithSlogOption func(s *NetworkPeerRepoWithSlog)

func NetworkPeerRepoWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) NetworkPeerRepoWithSlogOption {
	return func(_base *NetworkPeerRepoWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewNetworkPeerRepoWithSlog instruments an implementation of the inventory.NetworkPeerRepo with simple logging.
func NewNetworkPeerRepoWithSlog(base inventory.NetworkPeerRepo, log *slog.Logger, opts ...NetworkPeerRepoWithSlogOption) NetworkPeerRepoWithSlog {
	this := NetworkPeerRepoWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// Create implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) Create(ctx context.Context, networkPeer inventory.NetworkPeer) (networkPeer1 inventory.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkPeer", networkPeer),
		)
	}
	log.DebugContext(ctx, "=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer1", networkPeer1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Create returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Create returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, networkPeer)
}

// DeleteByClusterName implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) DeleteByClusterName(ctx context.Context, cluster string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("cluster", cluster),
		)
	}
	log.DebugContext(ctx, "=> calling DeleteByClusterName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method DeleteByClusterName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method DeleteByClusterName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method DeleteByClusterName finished")
		}
	}()
	return _d._base.DeleteByClusterName(ctx, cluster)
}

// DeleteByUUID implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling DeleteByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method DeleteByUUID returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method DeleteByUUID returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method DeleteByUUID finished")
		}
	}()
	return _d._base.DeleteByUUID(ctx, id)
}

// GetAllUUIDsWithFilter implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.NetworkPeerFilter) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllUUIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllUUIDsWithFilter returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllUUIDsWithFilter returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllUUIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) GetAllWithFilter(ctx context.Context, filter inventory.NetworkPeerFilter) (networkPeers inventory.NetworkPeers, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeers", networkPeers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllWithFilter returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllWithFilter returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllWithFilter finished")
		}
	}()
	return _d._base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) GetByUUID(ctx context.Context, id uuid.UUID) (networkPeer inventory.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling GetByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer", networkPeer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetByUUID returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetByUUID returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetByUUID finished")
		}
	}()
	return _d._base.GetByUUID(ctx, id)
}

// UpdateByUUID implements inventory.NetworkPeerRepo.
func (_d NetworkPeerRepoWithSlog) UpdateByUUID(ctx context.Context, networkPeer inventory.NetworkPeer) (networkPeer1 inventory.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkPeer", networkPeer),
		)
	}
	log.DebugContext(ctx, "=> calling UpdateByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer1", networkPeer1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method UpdateByUUID returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method UpdateByUUID returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method UpdateByUUID finished")
		}
	}()
	return _d._base.UpdateByUUID(ctx, networkPeer)
}
