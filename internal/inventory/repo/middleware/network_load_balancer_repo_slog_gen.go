// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// NetworkLoadBalancerRepoWithSlog implements inventory.NetworkLoadBalancerRepo that is instrumented with slog logger.
type NetworkLoadBalancerRepoWithSlog struct {
	_log  *slog.Logger
	_base inventory.NetworkLoadBalancerRepo
}

// NewNetworkLoadBalancerRepoWithSlog instruments an implementation of the inventory.NetworkLoadBalancerRepo with simple logging.
func NewNetworkLoadBalancerRepoWithSlog(base inventory.NetworkLoadBalancerRepo, log *slog.Logger) NetworkLoadBalancerRepoWithSlog {
	return NetworkLoadBalancerRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithSlog) Create(ctx context.Context, networkLoadBalancer inventory.NetworkLoadBalancer) (networkLoadBalancer1 inventory.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkLoadBalancer", networkLoadBalancer),
		)
	}
	log.Debug("NetworkLoadBalancerRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancer1", networkLoadBalancer1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, networkLoadBalancer)
}

// DeleteByClusterID implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithSlog) DeleteByClusterID(ctx context.Context, clusterID int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("clusterID", clusterID),
		)
	}
	log.Debug("NetworkLoadBalancerRepoWithSlog: calling DeleteByClusterID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method DeleteByClusterID returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method DeleteByClusterID finished")
		}
	}()
	return _d._base.DeleteByClusterID(ctx, clusterID)
}

// DeleteByID implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithSlog) DeleteByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("NetworkLoadBalancerRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// GetAllIDsWithFilter implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkLoadBalancerFilter) (ints []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("NetworkLoadBalancerRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ints", ints),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithSlog) GetByID(ctx context.Context, id int) (networkLoadBalancer inventory.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("NetworkLoadBalancerRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancer", networkLoadBalancer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithSlog) UpdateByID(ctx context.Context, networkLoadBalancer inventory.NetworkLoadBalancer) (networkLoadBalancer1 inventory.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("networkLoadBalancer", networkLoadBalancer),
		)
	}
	log.Debug("NetworkLoadBalancerRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancer1", networkLoadBalancer1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, networkLoadBalancer)
}
