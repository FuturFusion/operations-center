// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
)

// NetworkLoadBalancerRepoWithSlog implements _sourceInventory.NetworkLoadBalancerRepo that is instrumented with slog logger
type NetworkLoadBalancerRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkLoadBalancerRepo
}

// NewNetworkLoadBalancerRepoWithSlog instruments an implementation of the _sourceInventory.NetworkLoadBalancerRepo with simple logging
func NewNetworkLoadBalancerRepoWithSlog(base _sourceInventory.NetworkLoadBalancerRepo, log *slog.Logger) NetworkLoadBalancerRepoWithSlog {
	return NetworkLoadBalancerRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceInventory.NetworkLoadBalancerRepo
func (_d NetworkLoadBalancerRepoWithSlog) Create(ctx context.Context, networkLoadBalancer _sourceInventory.NetworkLoadBalancer) (n1 _sourceInventory.NetworkLoadBalancer, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("networkLoadBalancer", networkLoadBalancer),
	).Debug("NetworkLoadBalancerRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, networkLoadBalancer)
}

// DeleteByServerID implements _sourceInventory.NetworkLoadBalancerRepo
func (_d NetworkLoadBalancerRepoWithSlog) DeleteByServerID(ctx context.Context, serverID int) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("serverID", serverID),
	).Debug("NetworkLoadBalancerRepoWithSlog: calling DeleteByServerID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method DeleteByServerID returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method DeleteByServerID finished")
		}
	}()
	return _d._base.DeleteByServerID(ctx, serverID)
}

// GetAllIDsWithFilter implements _sourceInventory.NetworkLoadBalancerRepo
func (_d NetworkLoadBalancerRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter _sourceInventory.NetworkLoadBalancerFilter) (ia1 []int, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("filter", filter),
	).Debug("NetworkLoadBalancerRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With(
			slog.Any("ia1", ia1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements _sourceInventory.NetworkLoadBalancerRepo
func (_d NetworkLoadBalancerRepoWithSlog) GetByID(ctx context.Context, id int) (n1 _sourceInventory.NetworkLoadBalancer, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("NetworkLoadBalancerRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkLoadBalancerRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("NetworkLoadBalancerRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}
