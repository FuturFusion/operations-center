// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
)

// InstanceRepoWithSlog implements inventory.InstanceRepo that is instrumented with slog logger.
type InstanceRepoWithSlog struct {
	_log  *slog.Logger
	_base inventory.InstanceRepo
}

// NewInstanceRepoWithSlog instruments an implementation of the inventory.InstanceRepo with simple logging.
func NewInstanceRepoWithSlog(base inventory.InstanceRepo, log *slog.Logger) InstanceRepoWithSlog {
	return InstanceRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements inventory.InstanceRepo.
func (_d InstanceRepoWithSlog) Create(ctx context.Context, instance inventory.Instance) (instance1 inventory.Instance, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("instance", instance),
		)
	}
	log.Debug("=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("instance1", instance1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method Create returned an error")
		} else {
			log.Debug("<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, instance)
}

// DeleteByClusterName implements inventory.InstanceRepo.
func (_d InstanceRepoWithSlog) DeleteByClusterName(ctx context.Context, cluster string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("cluster", cluster),
		)
	}
	log.Debug("=> calling DeleteByClusterName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method DeleteByClusterName returned an error")
		} else {
			log.Debug("<= method DeleteByClusterName finished")
		}
	}()
	return _d._base.DeleteByClusterName(ctx, cluster)
}

// DeleteByID implements inventory.InstanceRepo.
func (_d InstanceRepoWithSlog) DeleteByID(ctx context.Context, id int) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("=> calling DeleteByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method DeleteByID returned an error")
		} else {
			log.Debug("<= method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// GetAllIDsWithFilter implements inventory.InstanceRepo.
func (_d InstanceRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter inventory.InstanceFilter) (ints []int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("=> calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ints", ints),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("<= method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements inventory.InstanceRepo.
func (_d InstanceRepoWithSlog) GetAllWithFilter(ctx context.Context, filter inventory.InstanceFilter) (instances inventory.Instances, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("=> calling GetAllWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("instances", instances),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAllWithFilter returned an error")
		} else {
			log.Debug("<= method GetAllWithFilter finished")
		}
	}()
	return _d._base.GetAllWithFilter(ctx, filter)
}

// GetByID implements inventory.InstanceRepo.
func (_d InstanceRepoWithSlog) GetByID(ctx context.Context, id int) (instance inventory.Instance, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("=> calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("instance", instance),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetByID returned an error")
		} else {
			log.Debug("<= method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements inventory.InstanceRepo.
func (_d InstanceRepoWithSlog) UpdateByID(ctx context.Context, instance inventory.Instance) (instance1 inventory.Instance, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("instance", instance),
		)
	}
	log.Debug("=> calling UpdateByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("instance1", instance1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method UpdateByID returned an error")
		} else {
			log.Debug("<= method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, instance)
}
