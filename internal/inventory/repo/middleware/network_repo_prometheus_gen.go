// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/google/uuid"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// NetworkRepoWithPrometheus implements inventory.NetworkRepo interface with all methods wrapped
// with Prometheus metrics.
type NetworkRepoWithPrometheus struct {
	base         inventory.NetworkRepo
	instanceName string
}

var networkRepoDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "network_repo_duration_seconds",
		Help:       "networkRepo runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewNetworkRepoWithPrometheus returns an instance of the inventory.NetworkRepo decorated with prometheus summary metric.
func NewNetworkRepoWithPrometheus(base inventory.NetworkRepo, instanceName string) NetworkRepoWithPrometheus {
	return NetworkRepoWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Create implements inventory.NetworkRepo.
func (_d NetworkRepoWithPrometheus) Create(ctx context.Context, network inventory.Network) (network1 inventory.Network, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, network)
}

// DeleteByClusterName implements inventory.NetworkRepo.
func (_d NetworkRepoWithPrometheus) DeleteByClusterName(ctx context.Context, cluster string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByClusterName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByClusterName(ctx, cluster)
}

// DeleteByUUID implements inventory.NetworkRepo.
func (_d NetworkRepoWithPrometheus) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByUUID(ctx, id)
}

// GetAllUUIDsWithFilter implements inventory.NetworkRepo.
func (_d NetworkRepoWithPrometheus) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.NetworkFilter) (uUIDs []uuid.UUID, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllUUIDsWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements inventory.NetworkRepo.
func (_d NetworkRepoWithPrometheus) GetAllWithFilter(ctx context.Context, filter inventory.NetworkFilter) (networks inventory.Networks, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllWithFilter", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements inventory.NetworkRepo.
func (_d NetworkRepoWithPrometheus) GetByUUID(ctx context.Context, id uuid.UUID) (network inventory.Network, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByUUID(ctx, id)
}

// UpdateByUUID implements inventory.NetworkRepo.
func (_d NetworkRepoWithPrometheus) UpdateByUUID(ctx context.Context, network inventory.Network) (network1 inventory.Network, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateByUUID(ctx, network)
}
