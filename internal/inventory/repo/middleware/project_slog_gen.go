// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
)

// ProjectRepoWithSlog implements _sourceInventory.ProjectRepo that is instrumented with slog logger
type ProjectRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.ProjectRepo
}

// NewProjectRepoWithSlog instruments an implementation of the _sourceInventory.ProjectRepo with simple logging
func NewProjectRepoWithSlog(base _sourceInventory.ProjectRepo, log *slog.Logger) ProjectRepoWithSlog {
	return ProjectRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceInventory.ProjectRepo
func (_d ProjectRepoWithSlog) Create(ctx context.Context, project _sourceInventory.Project) (p1 _sourceInventory.Project, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("project", project),
	).Debug("ProjectRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("p1", p1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ProjectRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, project)
}

// DeleteByServerID implements _sourceInventory.ProjectRepo
func (_d ProjectRepoWithSlog) DeleteByServerID(ctx context.Context, serverID int) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("serverID", serverID),
	).Debug("ProjectRepoWithSlog: calling DeleteByServerID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ProjectRepoWithSlog: method DeleteByServerID returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method DeleteByServerID finished")
		}
	}()
	return _d._base.DeleteByServerID(ctx, serverID)
}

// GetAllIDsWithFilter implements _sourceInventory.ProjectRepo
func (_d ProjectRepoWithSlog) GetAllIDsWithFilter(ctx context.Context, filter _sourceInventory.ProjectFilter) (ia1 []int, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("filter", filter),
	).Debug("ProjectRepoWithSlog: calling GetAllIDsWithFilter")
	defer func() {
		log := _d._log.With(
			slog.Any("ia1", ia1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ProjectRepoWithSlog: method GetAllIDsWithFilter returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method GetAllIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllIDsWithFilter(ctx, filter)
}

// GetByID implements _sourceInventory.ProjectRepo
func (_d ProjectRepoWithSlog) GetByID(ctx context.Context, id int) (p1 _sourceInventory.Project, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("ProjectRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("p1", p1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ProjectRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ProjectRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}
