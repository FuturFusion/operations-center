// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// NetworkLoadBalancerRepoWithTransactionEnforcer implements inventory.NetworkLoadBalancerRepo that enforces a transaction.
type NetworkLoadBalancerRepoWithTransactionEnforcer struct {
	_base inventory.NetworkLoadBalancerRepo
}

// NewNetworkLoadBalancerRepoWithTransactionEnforcer instruments an implementation of the inventory.NetworkLoadBalancerRepo with simple logging.
func NewNetworkLoadBalancerRepoWithTransactionEnforcer(base inventory.NetworkLoadBalancerRepo) NetworkLoadBalancerRepoWithTransactionEnforcer {
	return NetworkLoadBalancerRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithTransactionEnforcer) Create(ctx context.Context, networkLoadBalancer inventory.NetworkLoadBalancer) (networkLoadBalancer1 inventory.NetworkLoadBalancer, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkLoadBalancer1, err = _d._base.Create(ctx, networkLoadBalancer)
		return err
	})

	return networkLoadBalancer1, err
}

// DeleteByClusterName implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkLoadBalancerFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (networkLoadBalancer inventory.NetworkLoadBalancer, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkLoadBalancer, err = _d._base.GetByID(ctx, id)
		return err
	})

	return networkLoadBalancer, err
}

// UpdateByID implements inventory.NetworkLoadBalancerRepo.
func (_d NetworkLoadBalancerRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, networkLoadBalancer inventory.NetworkLoadBalancer) (networkLoadBalancer1 inventory.NetworkLoadBalancer, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		networkLoadBalancer1, err = _d._base.UpdateByID(ctx, networkLoadBalancer)
		return err
	})

	return networkLoadBalancer1, err
}
