// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// ProjectRepoWithTransactionEnforcer implements inventory.ProjectRepo that enforces a transaction.
type ProjectRepoWithTransactionEnforcer struct {
	_base inventory.ProjectRepo
}

// NewProjectRepoWithTransactionEnforcer instruments an implementation of the inventory.ProjectRepo with simple logging.
func NewProjectRepoWithTransactionEnforcer(base inventory.ProjectRepo) ProjectRepoWithTransactionEnforcer {
	return ProjectRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements inventory.ProjectRepo.
func (_d ProjectRepoWithTransactionEnforcer) Create(ctx context.Context, project inventory.Project) (project1 inventory.Project, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		project1, err = _d._base.Create(ctx, project)
		return err
	})

	return project1, err
}

// DeleteByClusterName implements inventory.ProjectRepo.
func (_d ProjectRepoWithTransactionEnforcer) DeleteByClusterName(ctx context.Context, cluster string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByClusterName(ctx, cluster)
		return err
	})

	return err
}

// DeleteByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id int) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAllIDsWithFilter implements inventory.ProjectRepo.
func (_d ProjectRepoWithTransactionEnforcer) GetAllIDsWithFilter(ctx context.Context, filter inventory.ProjectFilter) (ints []int, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		ints, err = _d._base.GetAllIDsWithFilter(ctx, filter)
		return err
	})

	return ints, err
}

// GetByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithTransactionEnforcer) GetByID(ctx context.Context, id int) (project inventory.Project, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		project, err = _d._base.GetByID(ctx, id)
		return err
	})

	return project, err
}

// UpdateByID implements inventory.ProjectRepo.
func (_d ProjectRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, project inventory.Project) (project1 inventory.Project, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		project1, err = _d._base.UpdateByID(ctx, project)
		return err
	})

	return project1, err
}
