// Code generated by generate-inventory; DO NOT EDIT.

package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type storageVolume struct {
	db sqlite.DBTX
}

var _ inventory.StorageVolumeRepo = &storageVolume{}

func NewStorageVolume(db sqlite.DBTX) *storageVolume {
	return &storageVolume{
		db: db,
	}
}

func (r storageVolume) Create(ctx context.Context, in inventory.StorageVolume) (inventory.StorageVolume, error) {
	const sqlStmt = `
INSERT INTO storage_volumes (cluster_id, location, project_name, storage_pool_name, name, type, object, last_updated)
VALUES(:cluster_id, :location, :project_name, :storage_pool_name, :name, :type, :object, :last_updated)
RETURNING id, cluster_id, location, project_name, storage_pool_name, name, type, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StorageVolume{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("cluster_id", in.ClusterID),
		sql.Named("location", in.Location),
		sql.Named("project_name", in.ProjectName),
		sql.Named("storage_pool_name", in.StoragePoolName),
		sql.Named("name", in.Name),
		sql.Named("type", in.Type),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StorageVolume{}, sqlite.MapErr(row.Err())
	}

	return scanStorageVolume(row)
}

func (r storageVolume) GetAllIDsWithFilter(ctx context.Context, filter inventory.StorageVolumeFilter) ([]int, error) {
	const sqlStmt = `
SELECT storage_volumes.id
FROM storage_volumes
  INNER JOIN clusters ON storage_volumes.cluster_id = clusters.id
WHERE true
%s
ORDER BY storage_volumes.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster`)
		args = append(args, sql.Named("cluster", filter.Cluster))
	}

	if filter.Location != nil {
		whereClause = append(whereClause, ` AND storage_volumes.location = :location`)
		args = append(args, sql.Named("location", filter.Location))
	}

	if filter.Project != nil {
		whereClause = append(whereClause, ` AND storage_volumes.project_name = :project`)
		args = append(args, sql.Named("project", filter.Project))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []int
	for rows.Next() {
		var id int
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (r storageVolume) GetByID(ctx context.Context, id int) (inventory.StorageVolume, error) {
	const sqlStmt = `
SELECT
  id, cluster_id, location, project_name, storage_pool_name, name, storage_volumes.type, object, last_updated
FROM
  storage_volumes
WHERE id=:id;
`

	row := r.db.QueryRowContext(ctx, sqlStmt, sql.Named("id", id))
	if row.Err() != nil {
		return inventory.StorageVolume{}, sqlite.MapErr(row.Err())
	}

	return scanStorageVolume(row)
}

func (r storageVolume) DeleteByID(ctx context.Context, id int) error {
	const sqlStmt = `DELETE FROM storage_volumes WHERE id=:id;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("id", id))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r storageVolume) DeleteByClusterID(ctx context.Context, clusterID int) error {
	const sqlStmt = `DELETE FROM storage_volumes WHERE cluster_id=:clusterID;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("clusterID", clusterID))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r storageVolume) UpdateByID(ctx context.Context, in inventory.StorageVolume) (inventory.StorageVolume, error) {
	const sqlStmt = `
UPDATE storage_volumes SET cluster_id=:cluster_id, project_name=:project_name, storage_pool_name=:storage_pool_name, name=:name, type=:type, object=:object, last_updated=:last_updated
WHERE id=:id
RETURNING id, cluster_id, location, project_name, storage_pool_name, name, type, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StorageVolume{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("id", in.ID),
		sql.Named("cluster_id", in.ClusterID),
		sql.Named("project_name", in.ProjectName),
		sql.Named("storage_pool_name", in.StoragePoolName),
		sql.Named("name", in.Name),
		sql.Named("type", in.Type),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StorageVolume{}, sqlite.MapErr(row.Err())
	}

	return scanStorageVolume(row)
}

func scanStorageVolume(row interface{ Scan(dest ...any) error }) (inventory.StorageVolume, error) {
	var object []byte
	var storageVolume inventory.StorageVolume

	err := row.Scan(
		&storageVolume.ID,
		&storageVolume.ClusterID,
		&storageVolume.Location,
		&storageVolume.ProjectName,
		&storageVolume.StoragePoolName,
		&storageVolume.Name,
		&storageVolume.Type,
		&object,
		&storageVolume.LastUpdated,
	)
	if err != nil {
		return inventory.StorageVolume{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &storageVolume.Object)
	if err != nil {
		return inventory.StorageVolume{}, err
	}

	return storageVolume, nil
}
