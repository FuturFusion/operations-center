// Code generated by generate-inventory; DO NOT EDIT.

package sqlite_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/dbschema/seed"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite/entities"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
	"github.com/FuturFusion/operations-center/internal/transaction"
	"github.com/FuturFusion/operations-center/shared/api"
)

func TestStorageBucketDatabaseActions(t *testing.T) {
	testClusterA := provisioning.Cluster{
		Name:          "one",
		ConnectionURL: "https://cluster-one/",
		Certificate: `-----BEGIN CERTIFICATE-----
cluster A
-----END CERTIFICATE-----
`,
		ServerNames: []string{"one"},
		LastUpdated: time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusterB := provisioning.Cluster{
		Name:          "two",
		ConnectionURL: "https://cluster-two/",
		Certificate: `-----BEGIN CERTIFICATE-----
cluster B
-----END CERTIFICATE-----
`,
		ServerNames: []string{"two"},
		LastUpdated: time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusters := []provisioning.Cluster{testClusterA, testClusterB}

	testServerA := provisioning.Server{
		Name:          "one",
		Cluster:       ptr.To("one"),
		ConnectionURL: "https://server-one/",
		Certificate: `-----BEGIN CERTIFICATE-----
server-one
-----END CERTIFICATE-----
`,
		Type:        api.ServerTypeIncus,
		Status:      api.ServerStatusReady,
		LastUpdated: time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerB := provisioning.Server{
		Name:          "two",
		Cluster:       ptr.To("two"),
		ConnectionURL: "https://server-two/",
		Certificate: `-----BEGIN CERTIFICATE-----
server-two
-----END CERTIFICATE-----
`,
		Type:        api.ServerTypeIncus,
		Status:      api.ServerStatusReady,
		LastUpdated: time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServers := []provisioning.Server{testServerA, testServerB}

	storageBucketA := inventory.StorageBucket{
		Cluster:         "one",
		Server:          "one",
		ProjectName:     "one",
		StoragePoolName: "parent one",
		Name:            "one",
		Object:          incusapi.StorageBucket{},
		LastUpdated:     time.Now(),
	}

	storageBucketA.DeriveUUID()

	storageBucketB := inventory.StorageBucket{
		Cluster:         "two",
		Server:          "two",
		ProjectName:     "two",
		StoragePoolName: "parent one",
		Name:            "two",
		Object:          incusapi.StorageBucket{},
		LastUpdated:     time.Now(),
	}

	storageBucketB.DeriveUUID()

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	tx := transaction.Enable(db)
	entities.PreparedStmts, err = entities.PrepareStmts(tx, false)
	require.NoError(t, err)

	storageBucket := inventorySqlite.NewStorageBucket(tx)

	// Cannot add an storageBucket with an invalid server.
	_, err = storageBucket.Create(ctx, storageBucketA)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Seed provisioning
	err = seed.Provisioning(ctx, db, testClusters, testServers)
	require.NoError(t, err)

	// Add storage_buckets
	storageBucketA, err = storageBucket.Create(ctx, storageBucketA)
	require.NoError(t, err)
	require.Equal(t, "one", storageBucketA.Cluster)

	storageBucketB, err = storageBucket.Create(ctx, storageBucketB)
	require.NoError(t, err)
	require.Equal(t, "two", storageBucketB.Cluster)

	// Ensure we have two entries without filter
	storageBucketUUIDs, err := storageBucket.GetAllUUIDsWithFilter(ctx, inventory.StorageBucketFilter{})
	require.NoError(t, err)
	require.Len(t, storageBucketUUIDs, 2)
	require.ElementsMatch(t, []uuid.UUID{storageBucketA.UUID, storageBucketB.UUID}, storageBucketUUIDs)

	// Ensure we have two entries without filter
	dbStorageBucket, err := storageBucket.GetAllWithFilter(ctx, inventory.StorageBucketFilter{})
	require.NoError(t, err)
	require.Len(t, dbStorageBucket, 2)
	require.Equal(t, storageBucketA.Name, dbStorageBucket[0].Name)
	require.Equal(t, storageBucketB.Name, dbStorageBucket[1].Name)

	// Ensure we have one entry with filter for cluster, server, project, storage_pool and name.
	storageBucketUUIDs, err = storageBucket.GetAllUUIDsWithFilter(ctx, inventory.StorageBucketFilter{
		Cluster:         ptr.To("one"),
		Server:          ptr.To("one"),
		Project:         ptr.To("one"),
		StoragePoolName: ptr.To("parent one"),
		Name:            ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, storageBucketUUIDs, 1)
	require.ElementsMatch(t, []uuid.UUID{storageBucketA.UUID}, storageBucketUUIDs)

	// Ensure we have one entry with filter for cluster, server, project, storage_pool and name.
	dbStorageBucket, err = storageBucket.GetAllWithFilter(ctx, inventory.StorageBucketFilter{
		Cluster:         ptr.To("one"),
		Server:          ptr.To("one"),
		Project:         ptr.To("one"),
		StoragePoolName: ptr.To("parent one"),
		Name:            ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, dbStorageBucket, 1)
	require.Equal(t, "one", dbStorageBucket[0].Name)

	// Should get back storageBucketA unchanged.
	storageBucketA.Cluster = "one"
	dbStorageBucketA, err := storageBucket.GetByUUID(ctx, storageBucketA.UUID)
	require.NoError(t, err)
	require.Equal(t, storageBucketA, dbStorageBucketA)

	storageBucketB.LastUpdated = time.Now().UTC().Truncate(0)
	dbStorageBucketB, err := storageBucket.UpdateByUUID(ctx, storageBucketB)
	require.NoError(t, err)
	require.Equal(t, storageBucketB, dbStorageBucketB)

	// Delete storage_buckets by ID.
	err = storageBucket.DeleteByUUID(ctx, storageBucketA.UUID)
	require.NoError(t, err)

	// Can't delete an storage_buckets that doesn't exist.
	err = storageBucket.DeleteByUUID(ctx, storageBucketA.UUID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Can't add a duplicate storage_buckets.
	_, err = storageBucket.Create(ctx, storageBucketB)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Delete storage_buckets by cluster Name.
	err = storageBucket.DeleteByClusterName(ctx, "two")
	require.NoError(t, err)

	_, err = storageBucket.GetByUUID(ctx, storageBucketA.UUID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no storage_buckets remaining.
	storageBucketUUIDs, err = storageBucket.GetAllUUIDsWithFilter(ctx, inventory.StorageBucketFilter{})
	require.NoError(t, err)
	require.Zero(t, storageBucketUUIDs)
}
