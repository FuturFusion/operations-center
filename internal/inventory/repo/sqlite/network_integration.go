// Code generated by generate-inventory; DO NOT EDIT.

package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type networkIntegration struct {
	db sqlite.DBTX
}

var _ inventory.NetworkIntegrationRepo = &networkIntegration{}

func NewNetworkIntegration(db sqlite.DBTX) *networkIntegration {
	return &networkIntegration{
		db: db,
	}
}

func (r networkIntegration) Create(ctx context.Context, in inventory.NetworkIntegration) (inventory.NetworkIntegration, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id FROM clusters WHERE clusters.name = :cluster_name
)
INSERT INTO network_integrations (cluster_id, name, object, last_updated)
VALUES ( (SELECT cluster_id FROM _lookup), :name, :object, :last_updated)
RETURNING id, :cluster_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.NetworkIntegration{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("cluster_name", in.Cluster),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.NetworkIntegration{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkIntegration(row)
}

func (r networkIntegration) GetAllWithFilter(ctx context.Context, filter inventory.NetworkIntegrationFilter) (inventory.NetworkIntegrations, error) {
	const sqlStmt = `
SELECT
  network_integrations.id, clusters.name, network_integrations.name, network_integrations.object, network_integrations.last_updated
FROM network_integrations
  INNER JOIN clusters ON network_integrations.cluster_id = clusters.id
WHERE true
%s
ORDER BY clusters.name, network_integrations.name
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var networkIntegrations inventory.NetworkIntegrations
	for rows.Next() {
		var networkIntegration inventory.NetworkIntegration
		networkIntegration, err = scanNetworkIntegration(rows)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		networkIntegrations = append(networkIntegrations, networkIntegration)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return networkIntegrations, nil
}

func (r networkIntegration) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkIntegrationFilter) ([]int, error) {
	const sqlStmt = `
SELECT network_integrations.id
FROM network_integrations
  INNER JOIN clusters ON network_integrations.cluster_id = clusters.id
WHERE true
%s
ORDER BY network_integrations.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []int
	for rows.Next() {
		var id int
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (r networkIntegration) GetByID(ctx context.Context, id int) (inventory.NetworkIntegration, error) {
	const sqlStmt = `
SELECT
  network_integrations.id, clusters.name, network_integrations.name, network_integrations.object, network_integrations.last_updated
FROM
  network_integrations
  INNER JOIN clusters ON network_integrations.cluster_id = clusters.id
WHERE network_integrations.id=:id;
`

	row := r.db.QueryRowContext(ctx, sqlStmt, sql.Named("id", id))
	if row.Err() != nil {
		return inventory.NetworkIntegration{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkIntegration(row)
}

func (r networkIntegration) DeleteByID(ctx context.Context, id int) error {
	const sqlStmt = `DELETE FROM network_integrations WHERE id=:id;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("id", id))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r networkIntegration) DeleteByClusterName(ctx context.Context, cluster string) error {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id as cluster_id from clusters where name = :cluster_name
)
DELETE FROM network_integrations WHERE cluster_id=(SELECT cluster_id FROM _lookup);`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("cluster_name", cluster))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r networkIntegration) UpdateByID(ctx context.Context, in inventory.NetworkIntegration) (inventory.NetworkIntegration, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id FROM clusters WHERE clusters.name = :cluster_name
)
UPDATE network_integrations SET cluster_id=(SELECT cluster_id FROM _lookup), name=:name, object=:object, last_updated=:last_updated
WHERE id=:id
RETURNING id, :cluster_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.NetworkIntegration{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("id", in.ID),
		sql.Named("cluster_name", in.Cluster),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.NetworkIntegration{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkIntegration(row)
}

func scanNetworkIntegration(row interface{ Scan(dest ...any) error }) (inventory.NetworkIntegration, error) {
	var object []byte
	var networkIntegration inventory.NetworkIntegration

	err := row.Scan(
		&networkIntegration.ID,
		&networkIntegration.Cluster,
		&networkIntegration.Name,
		&object,
		&networkIntegration.LastUpdated,
	)
	if err != nil {
		return inventory.NetworkIntegration{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &networkIntegration.Object)
	if err != nil {
		return inventory.NetworkIntegration{}, err
	}

	return networkIntegration, nil
}
