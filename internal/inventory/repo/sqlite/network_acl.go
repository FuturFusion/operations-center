// Code generated by generate-inventory; DO NOT EDIT.

package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type networkACL struct {
	db sqlite.DBTX
}

var _ inventory.NetworkACLRepo = &networkACL{}

func NewNetworkACL(db sqlite.DBTX) *networkACL {
	return &networkACL{
		db: db,
	}
}

func (r networkACL) Create(ctx context.Context, in inventory.NetworkACL) (inventory.NetworkACL, error) {
	const sqlStmt = `
WITH _server AS (
  SELECT cluster_id FROM servers WHERE server_id = :server_id
)
INSERT INTO network_acls (server_id, project_name, name, object, last_updated)
VALUES(:server_id, :project_name, :name, :object, :last_updated)
RETURNING id, (SELECT cluster_id FROM _server) as cluster_id, server_id, project_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.NetworkACL{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("server_id", in.ServerID),
		sql.Named("project_name", in.ProjectName),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.NetworkACL{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkACL(row)
}

func (r networkACL) GetAllIDsWithFilter(ctx context.Context, filter inventory.NetworkACLFilter) ([]int, error) {
	const sqlStmt = `
SELECT network_acls.id
FROM network_acls
  INNER JOIN servers ON network_acls.server_id = servers.id
  INNER JOIN clusters ON servers.cluster_id = clusters.id
WHERE true
%s
ORDER BY network_acls.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster`)
		args = append(args, sql.Named("cluster", filter.Cluster))
	}

	if filter.Server != nil {
		whereClause = append(whereClause, ` AND servers.hostname = :server`)
		args = append(args, sql.Named("server", filter.Server))
	}

	if filter.Project != nil {
		whereClause = append(whereClause, ` AND network_acls.project_name = :project`)
		args = append(args, sql.Named("project", filter.Project))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []int
	for rows.Next() {
		var id int
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (r networkACL) GetByID(ctx context.Context, id int) (inventory.NetworkACL, error) {
	const sqlStmt = `
SELECT
  network_acls.id, servers.cluster_id as cluster_id, network_acls.server_id, network_acls.project_name, network_acls.name, network_acls.object, network_acls.last_updated
FROM
  network_acls
  INNER JOIN servers ON network_acls.server_id = servers.id
WHERE network_acls.id=:id;
`

	row := r.db.QueryRowContext(ctx, sqlStmt, sql.Named("id", id))
	if row.Err() != nil {
		return inventory.NetworkACL{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkACL(row)
}

func (r networkACL) DeleteByID(ctx context.Context, id int) error {
	const sqlStmt = `DELETE FROM network_acls WHERE id=:id;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("id", id))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r networkACL) DeleteByServerID(ctx context.Context, serverID int) error {
	const sqlStmt = `DELETE FROM network_acls WHERE server_id=:serverID;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("serverID", serverID))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r networkACL) UpdateByID(ctx context.Context, in inventory.NetworkACL) (inventory.NetworkACL, error) {
	const sqlStmt = `
WITH _server AS (
  SELECT cluster_id FROM servers WHERE server_id = :server_id
)
UPDATE network_acls SET server_id=:server_id, project_name=:project_name, name=:name, object=:object, last_updated=:last_updated
WHERE id=:id
RETURNING id, (SELECT cluster_id FROM _server) as cluster_id, server_id, project_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.NetworkACL{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("id", in.ID),
		sql.Named("server_id", in.ServerID),
		sql.Named("project_name", in.ProjectName),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.NetworkACL{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkACL(row)
}

func scanNetworkACL(row interface{ Scan(dest ...any) error }) (inventory.NetworkACL, error) {
	var object []byte
	var networkACL inventory.NetworkACL

	err := row.Scan(
		&networkACL.ID,
		&networkACL.ClusterID,
		&networkACL.ServerID,
		&networkACL.ProjectName,
		&networkACL.Name,
		&object,
		&networkACL.LastUpdated,
	)
	if err != nil {
		return inventory.NetworkACL{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &networkACL.Object)
	if err != nil {
		return inventory.NetworkACL{}, err
	}

	return networkACL, nil
}
