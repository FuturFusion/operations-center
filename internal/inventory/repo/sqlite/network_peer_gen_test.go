// Code generated by generate-inventory; DO NOT EDIT.

package sqlite_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	provisioningSqlite "github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite/entities"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
	"github.com/FuturFusion/operations-center/internal/transaction"
	"github.com/FuturFusion/operations-center/shared/api"
)

func TestNetworkPeerDatabaseActions(t *testing.T) {
	testToken := provisioning.Token{
		UsesRemaining: 10,
		ExpireAt:      time.Now().Add(1 * time.Minute),
	}

	testClusterA := provisioning.Cluster{
		Name:          "one",
		ConnectionURL: "https://cluster-one/",
		ServerNames:   []string{"one"},
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusterB := provisioning.Cluster{
		Name:          "two",
		ConnectionURL: "https://cluster-two/",
		ServerNames:   []string{"two"},
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerA := provisioning.Server{
		Name:          "one",
		ConnectionURL: "https://server-one/",
		Type:          api.ServerTypeIncus,
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerB := provisioning.Server{
		Name:          "two",
		ConnectionURL: "https://server-two/",
		Type:          api.ServerTypeIncus,
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	networkPeerA := inventory.NetworkPeer{
		Cluster:     "one",
		NetworkName: "parent one",
		Name:        "one",
		Object:      incusapi.NetworkPeer{},
		LastUpdated: time.Now(),
	}

	networkPeerA.DeriveUUID()

	networkPeerB := inventory.NetworkPeer{
		Cluster:     "two",
		NetworkName: "parent one",
		Name:        "two",
		Object:      incusapi.NetworkPeer{},
		LastUpdated: time.Now(),
	}

	networkPeerB.DeriveUUID()

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	tx := transaction.Enable(db)
	entities.PreparedStmts, err = entities.PrepareStmts(tx, false)
	require.NoError(t, err)

	tokenSvc := provisioning.NewTokenService(provisioningSqlite.NewToken(tx))
	serverSvc := provisioning.NewServerService(provisioningSqlite.NewServer(tx), tokenSvc)
	clusterSvc := provisioning.NewClusterService(provisioningSqlite.NewCluster(tx), serverSvc, nil)

	networkPeer := inventorySqlite.NewNetworkPeer(tx)

	// Cannot add an networkPeer with an invalid server.
	_, err = networkPeer.Create(ctx, networkPeerA)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Add token.
	testToken, err = tokenSvc.Create(ctx, testToken)
	require.NoError(t, err)

	// Add dummy servers.
	_, err = serverSvc.Create(ctx, testToken.UUID, testServerA)
	require.NoError(t, err)
	_, err = serverSvc.Create(ctx, testToken.UUID, testServerB)
	require.NoError(t, err)

	// Add dummy clusters.
	_, err = clusterSvc.Create(ctx, testClusterA)
	require.NoError(t, err)
	_, err = clusterSvc.Create(ctx, testClusterB)
	require.NoError(t, err)

	// Add network_peers
	networkPeerA, err = networkPeer.Create(ctx, networkPeerA)
	require.NoError(t, err)
	require.Equal(t, "one", networkPeerA.Cluster)

	networkPeerB, err = networkPeer.Create(ctx, networkPeerB)
	require.NoError(t, err)
	require.Equal(t, "two", networkPeerB.Cluster)

	// Ensure we have two entries without filter
	networkPeerUUIDs, err := networkPeer.GetAllUUIDsWithFilter(ctx, inventory.NetworkPeerFilter{})
	require.NoError(t, err)
	require.Len(t, networkPeerUUIDs, 2)
	require.ElementsMatch(t, []uuid.UUID{networkPeerA.UUID, networkPeerB.UUID}, networkPeerUUIDs)

	// Ensure we have two entries without filter
	dbNetworkPeer, err := networkPeer.GetAllWithFilter(ctx, inventory.NetworkPeerFilter{})
	require.NoError(t, err)
	require.Len(t, dbNetworkPeer, 2)
	require.Equal(t, networkPeerA.Name, dbNetworkPeer[0].Name)
	require.Equal(t, networkPeerB.Name, dbNetworkPeer[1].Name)

	// Ensure we have one entry with filter for cluster, server and project
	networkPeerUUIDs, err = networkPeer.GetAllUUIDsWithFilter(ctx, inventory.NetworkPeerFilter{
		Cluster: ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, networkPeerUUIDs, 1)
	require.ElementsMatch(t, []uuid.UUID{networkPeerA.UUID}, networkPeerUUIDs)

	// Ensure we have one entry with filter for cluster, server and project
	dbNetworkPeer, err = networkPeer.GetAllWithFilter(ctx, inventory.NetworkPeerFilter{
		Cluster: ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, dbNetworkPeer, 1)
	require.Equal(t, "one", dbNetworkPeer[0].Name)

	// Should get back networkPeerA unchanged.
	networkPeerA.Cluster = "one"
	dbNetworkPeerA, err := networkPeer.GetByUUID(ctx, networkPeerA.UUID)
	require.NoError(t, err)
	require.Equal(t, networkPeerA, dbNetworkPeerA)

	networkPeerB.LastUpdated = time.Now().UTC().Truncate(0)
	dbNetworkPeerB, err := networkPeer.UpdateByUUID(ctx, networkPeerB)
	require.NoError(t, err)
	require.Equal(t, networkPeerB, dbNetworkPeerB)

	// Delete network_peers by ID.
	err = networkPeer.DeleteByUUID(ctx, networkPeerA.UUID)
	require.NoError(t, err)

	// Delete network_peers by cluster Name.
	err = networkPeer.DeleteByClusterName(ctx, "two")
	require.NoError(t, err)

	_, err = networkPeer.GetByUUID(ctx, networkPeerA.UUID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no network_peers remaining.
	networkPeerUUIDs, err = networkPeer.GetAllUUIDsWithFilter(ctx, inventory.NetworkPeerFilter{})
	require.NoError(t, err)
	require.Zero(t, networkPeerUUIDs)
}
