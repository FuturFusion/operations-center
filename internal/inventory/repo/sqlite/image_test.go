// Code generated by generate-inventory; DO NOT EDIT.

package sqlite_test

import (
	"context"
	"encoding/json"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	provisioningSqlite "github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
	"github.com/FuturFusion/operations-center/shared/api"
)

func TestImageDatabaseActions(t *testing.T) {
	testClusterA := provisioning.Cluster{
		ID:              1,
		Name:            "one",
		ConnectionURL:   "https://cluster-one/",
		ServerHostnames: []string{"one", "two"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerA := provisioning.Server{
		ID:            1,
		ClusterID:     1,
		Hostname:      "one",
		Type:          api.ServerTypeIncus,
		ConnectionURL: "https://one/",
		HardwareData:  incusapi.Resources{},
		VersionData:   json.RawMessage(nil),
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerB := provisioning.Server{
		ID:            2,
		ClusterID:     1,
		Hostname:      "two",
		Type:          api.ServerTypeIncus,
		ConnectionURL: "https://one/",
		HardwareData:  incusapi.Resources{},
		VersionData:   json.RawMessage(nil),
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	imageA := inventory.Image{
		ServerID:    1,
		ProjectName: "one",
		Name:        "one",
		Object:      incusapi.Image{},
		LastUpdated: time.Now(),
	}

	imageB := inventory.Image{
		ServerID:    2,
		ProjectName: "two",
		Name:        "two",
		Object:      incusapi.Image{},
		LastUpdated: time.Now(),
	}

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	clusterSvc := provisioning.NewClusterService(provisioningSqlite.NewCluster(db))
	serverSvc := provisioning.NewServerService(provisioningSqlite.NewServer(db))

	image := inventorySqlite.NewImage(db)

	// Cannot add an image with an invalid server.
	_, err = image.Create(ctx, imageA)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Add dummy clusters
	_, err = clusterSvc.Create(ctx, testClusterA)
	require.NoError(t, err)

	// Add dummy servers.
	_, err = serverSvc.Create(ctx, testServerA)
	require.NoError(t, err)
	_, err = serverSvc.Create(ctx, testServerB)
	require.NoError(t, err)

	// Add images
	imageA, err = image.Create(ctx, imageA)
	require.NoError(t, err)
	require.Equal(t, 1, imageA.ClusterID)

	imageB, err = image.Create(ctx, imageB)
	require.NoError(t, err)
	require.Equal(t, 1, imageB.ClusterID)

	// Ensure we have two entries without filter
	imageIDs, err := image.GetAllIDsWithFilter(ctx, inventory.ImageFilter{})
	require.NoError(t, err)
	require.Len(t, imageIDs, 2)
	require.ElementsMatch(t, []int{1, 2}, imageIDs)

	// Ensure we have one entry with filter for cluster, server and project
	imageIDs, err = image.GetAllIDsWithFilter(ctx, inventory.ImageFilter{
		Cluster: ptr.To("one"),
		Server:  ptr.To("one"),
		Project: ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, imageIDs, 1)
	require.ElementsMatch(t, []int{1}, imageIDs)

	// Should get back imageA unchanged.
	imageA.ClusterID = 1
	dbImageA, err := image.GetByID(ctx, imageA.ID)
	require.NoError(t, err)
	require.Equal(t, imageA, dbImageA)

	// Delete images by server ID.
	err = image.DeleteByServerID(ctx, 1)
	require.NoError(t, err)
	err = image.DeleteByServerID(ctx, 2)
	require.NoError(t, err)

	_, err = image.GetByID(ctx, imageA.ID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no images remaining.
	imageIDs, err = image.GetAllIDsWithFilter(ctx, inventory.ImageFilter{})
	require.NoError(t, err)
	require.Zero(t, imageIDs)
}
