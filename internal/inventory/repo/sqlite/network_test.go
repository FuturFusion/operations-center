// Code generated by generate-inventory; DO NOT EDIT.

package sqlite_test

import (
	"context"
	"encoding/json"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	provisioningSqlite "github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
	"github.com/FuturFusion/operations-center/shared/api"
)

func TestNetworkDatabaseActions(t *testing.T) {
	testClusterA := provisioning.Cluster{
		ID:              1,
		Name:            "one",
		ConnectionURL:   "https://cluster-one/",
		ServerHostnames: []string{"one", "two"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerA := provisioning.Server{
		ID:            1,
		ClusterID:     1,
		Name:          "one",
		Type:          api.ServerTypeIncus,
		ConnectionURL: "https://one/",
		HardwareData:  incusapi.Resources{},
		VersionData:   json.RawMessage(nil),
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerB := provisioning.Server{
		ID:            2,
		ClusterID:     1,
		Name:          "two",
		Type:          api.ServerTypeIncus,
		ConnectionURL: "https://one/",
		HardwareData:  incusapi.Resources{},
		VersionData:   json.RawMessage(nil),
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	networkA := inventory.Network{
		ServerID:    1,
		ProjectName: "one",
		Name:        "one",
		Object:      incusapi.Network{},
		LastUpdated: time.Now(),
	}

	networkB := inventory.Network{
		ServerID:    2,
		ProjectName: "two",
		Name:        "two",
		Object:      incusapi.Network{},
		LastUpdated: time.Now(),
	}

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	clusterSvc := provisioning.NewClusterService(provisioningSqlite.NewCluster(db), nil)
	serverSvc := provisioning.NewServerService(provisioningSqlite.NewServer(db))

	network := inventorySqlite.NewNetwork(db)

	// Cannot add an network with an invalid server.
	_, err = network.Create(ctx, networkA)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Add dummy clusters
	_, err = clusterSvc.Create(ctx, testClusterA)
	require.NoError(t, err)

	// Add dummy servers.
	_, err = serverSvc.Create(ctx, testServerA)
	require.NoError(t, err)
	_, err = serverSvc.Create(ctx, testServerB)
	require.NoError(t, err)

	// Add networks
	networkA, err = network.Create(ctx, networkA)
	require.NoError(t, err)
	require.Equal(t, 1, networkA.ClusterID)

	networkB, err = network.Create(ctx, networkB)
	require.NoError(t, err)
	require.Equal(t, 1, networkB.ClusterID)

	// Ensure we have two entries without filter
	networkIDs, err := network.GetAllIDsWithFilter(ctx, inventory.NetworkFilter{})
	require.NoError(t, err)
	require.Len(t, networkIDs, 2)
	require.ElementsMatch(t, []int{1, 2}, networkIDs)

	// Ensure we have one entry with filter for cluster, server and project
	networkIDs, err = network.GetAllIDsWithFilter(ctx, inventory.NetworkFilter{
		Cluster: ptr.To("one"),
		Server:  ptr.To("one"),
		Project: ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, networkIDs, 1)
	require.ElementsMatch(t, []int{1}, networkIDs)

	// Should get back networkA unchanged.
	networkA.ClusterID = 1
	dbNetworkA, err := network.GetByID(ctx, networkA.ID)
	require.NoError(t, err)
	require.Equal(t, networkA, dbNetworkA)

	networkB.LastUpdated = time.Now().UTC().Truncate(0)
	dbNetworkB, err := network.UpdateByID(ctx, networkB)
	require.NoError(t, err)
	require.Equal(t, networkB, dbNetworkB)

	// Delete networks by ID.
	err = network.DeleteByID(ctx, 1)
	require.NoError(t, err)

	// Delete networks by server ID.
	err = network.DeleteByServerID(ctx, 2)
	require.NoError(t, err)

	_, err = network.GetByID(ctx, networkA.ID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no networks remaining.
	networkIDs, err = network.GetAllIDsWithFilter(ctx, inventory.NetworkFilter{})
	require.NoError(t, err)
	require.Zero(t, networkIDs)
}
