// Code generated by generate-inventory; DO NOT EDIT.

package sqlite_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	provisioningSqlite "github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
)

func TestInstanceDatabaseActions(t *testing.T) {
	testClusterA := provisioning.Cluster{
		ID:              1,
		Name:            "one",
		ConnectionURL:   "https://cluster-one/",
		ServerHostnames: []string{"one", "two"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusterB := provisioning.Cluster{
		ID:              2,
		Name:            "two",
		ConnectionURL:   "https://cluster-two/",
		ServerHostnames: []string{"three", "four"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	instanceA := inventory.Instance{
		ClusterID:   1,
		Location:    "one",
		ProjectName: "one",
		Name:        "one",
		Object:      incusapi.InstanceFull{},
		LastUpdated: time.Now(),
	}

	instanceB := inventory.Instance{
		ClusterID:   2,
		Location:    "two",
		ProjectName: "two",
		Name:        "two",
		Object:      incusapi.InstanceFull{},
		LastUpdated: time.Now(),
	}

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	clusterSvc := provisioning.NewClusterService(provisioningSqlite.NewCluster(db), nil)

	instance := inventorySqlite.NewInstance(db)

	// Cannot add an instance with an invalid server.
	_, err = instance.Create(ctx, instanceA)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Add dummy clusters.
	_, err = clusterSvc.Create(ctx, testClusterA)
	require.NoError(t, err)
	_, err = clusterSvc.Create(ctx, testClusterB)
	require.NoError(t, err)

	// Add instances
	instanceA, err = instance.Create(ctx, instanceA)
	require.NoError(t, err)
	require.Equal(t, 1, instanceA.ClusterID)

	instanceB, err = instance.Create(ctx, instanceB)
	require.NoError(t, err)
	require.Equal(t, 2, instanceB.ClusterID)

	// Ensure we have two entries without filter
	instanceIDs, err := instance.GetAllIDsWithFilter(ctx, inventory.InstanceFilter{})
	require.NoError(t, err)
	require.Len(t, instanceIDs, 2)
	require.ElementsMatch(t, []int{1, 2}, instanceIDs)

	// Ensure we have one entry with filter for cluster, server and project
	instanceIDs, err = instance.GetAllIDsWithFilter(ctx, inventory.InstanceFilter{
		Cluster:  ptr.To("one"),
		Location: ptr.To("one"),
		Project:  ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, instanceIDs, 1)
	require.ElementsMatch(t, []int{1}, instanceIDs)

	// Should get back instanceA unchanged.
	instanceA.ClusterID = 1
	dbInstanceA, err := instance.GetByID(ctx, instanceA.ID)
	require.NoError(t, err)
	require.Equal(t, instanceA, dbInstanceA)

	instanceB.LastUpdated = time.Now().UTC().Truncate(0)
	dbInstanceB, err := instance.UpdateByID(ctx, instanceB)
	require.NoError(t, err)
	require.Equal(t, instanceB, dbInstanceB)

	// Delete instances by ID.
	err = instance.DeleteByID(ctx, 1)
	require.NoError(t, err)

	// Delete instances by cluster ID.
	err = instance.DeleteByClusterID(ctx, 2)
	require.NoError(t, err)

	_, err = instance.GetByID(ctx, instanceA.ID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no instances remaining.
	instanceIDs, err = instance.GetAllIDsWithFilter(ctx, inventory.InstanceFilter{})
	require.NoError(t, err)
	require.Zero(t, instanceIDs)
}
