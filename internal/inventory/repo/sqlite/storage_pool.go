// Code generated by generate-inventory; DO NOT EDIT.

package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type storagePool struct {
	db sqlite.DBTX
}

var _ inventory.StoragePoolRepo = &storagePool{}

func NewStoragePool(db sqlite.DBTX) *storagePool {
	return &storagePool{
		db: db,
	}
}

func (i storagePool) Create(ctx context.Context, in inventory.StoragePool) (inventory.StoragePool, error) {
	const sqlStmt = `
WITH _server AS (
  SELECT cluster_id FROM servers WHERE server_id = :server_id
)
INSERT INTO storage_pools (server_id, name, object, last_updated)
VALUES(:server_id, :name, :object, :last_updated)
RETURNING id, (SELECT cluster_id FROM _server) as cluster_id, server_id, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StoragePool{}, err
	}

	row := i.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("server_id", in.ServerID),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StoragePool{}, sqlite.MapErr(row.Err())
	}

	return scanStoragePool(row)
}

func (i storagePool) GetAllIDsWithFilter(ctx context.Context, filter inventory.StoragePoolFilter) ([]int, error) {
	const sqlStmt = `
SELECT storage_pools.id
FROM storage_pools
  INNER JOIN servers ON storage_pools.server_id = servers.id
  INNER JOIN clusters ON servers.cluster_id = clusters.id
WHERE true
%s
ORDER BY storage_pools.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster`)
		args = append(args, sql.Named("cluster", filter.Cluster))
	}

	if filter.Server != nil {
		whereClause = append(whereClause, ` AND servers.hostname = :server`)
		args = append(args, sql.Named("server", filter.Server))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := i.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []int
	for rows.Next() {
		var id int
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (i storagePool) GetByID(ctx context.Context, id int) (inventory.StoragePool, error) {
	const sqlStmt = `
SELECT
  storage_pools.id, servers.cluster_id as cluster_id, storage_pools.server_id, storage_pools.name, storage_pools.object, storage_pools.last_updated
FROM
  storage_pools
  INNER JOIN servers ON storage_pools.server_id = servers.id
WHERE storage_pools.id=:id;
`

	row := i.db.QueryRowContext(ctx, sqlStmt, sql.Named("id", id))
	if row.Err() != nil {
		return inventory.StoragePool{}, sqlite.MapErr(row.Err())
	}

	return scanStoragePool(row)
}

func (i storagePool) DeleteByServerID(ctx context.Context, serverID int) error {
	const sqlStmt = `DELETE FROM storage_pools WHERE server_id=:serverID;`

	result, err := i.db.ExecContext(ctx, sqlStmt, sql.Named("serverID", serverID))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (i storagePool) UpdateByID(ctx context.Context, in inventory.StoragePool) (inventory.StoragePool, error) {
	const sqlStmt = `
WITH _server AS (
  SELECT cluster_id FROM servers WHERE server_id = :server_id
)
UPDATE storage_pools SET server_id=:server_id, name=:name, object=:object, last_updated=:last_updated
WHERE id=:id
RETURNING id, (SELECT cluster_id FROM _server) as cluster_id, server_id, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StoragePool{}, err
	}

	row := i.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("id", in.ID),
		sql.Named("server_id", in.ServerID),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StoragePool{}, sqlite.MapErr(row.Err())
	}

	return scanStoragePool(row)
}

func scanStoragePool(row interface{ Scan(dest ...any) error }) (inventory.StoragePool, error) {
	var object []byte
	var storagePool inventory.StoragePool

	err := row.Scan(
		&storagePool.ID,
		&storagePool.ClusterID,
		&storagePool.ServerID,
		&storagePool.Name,
		&object,
		&storagePool.LastUpdated,
	)
	if err != nil {
		return inventory.StoragePool{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &storagePool.Object)
	if err != nil {
		return inventory.StoragePool{}, err
	}

	return storagePool, nil
}
