// Code generated by generate-inventory; DO NOT EDIT.

package sqlite_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/dbschema/seed"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite/entities"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
	"github.com/FuturFusion/operations-center/internal/transaction"
	"github.com/FuturFusion/operations-center/shared/api"
)

func TestNetworkAddressSetDatabaseActions(t *testing.T) {
	testClusterA := provisioning.Cluster{
		Name:          "one",
		ConnectionURL: "https://cluster-one/",
		Certificate: `-----BEGIN CERTIFICATE-----
cluster A
-----END CERTIFICATE-----
`,
		ServerNames: []string{"one"},
		LastUpdated: time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusterB := provisioning.Cluster{
		Name:          "two",
		ConnectionURL: "https://cluster-two/",
		Certificate: `-----BEGIN CERTIFICATE-----
cluster B
-----END CERTIFICATE-----
`,
		ServerNames: []string{"two"},
		LastUpdated: time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusters := []provisioning.Cluster{testClusterA, testClusterB}

	testServerA := provisioning.Server{
		Name:          "one",
		Cluster:       ptr.To("one"),
		ConnectionURL: "https://server-one/",
		Certificate: `-----BEGIN CERTIFICATE-----
server-one
-----END CERTIFICATE-----
`,
		Type:        api.ServerTypeIncus,
		Status:      api.ServerStatusReady,
		LastUpdated: time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerB := provisioning.Server{
		Name:          "two",
		Cluster:       ptr.To("two"),
		ConnectionURL: "https://server-two/",
		Certificate: `-----BEGIN CERTIFICATE-----
server-two
-----END CERTIFICATE-----
`,
		Type:        api.ServerTypeIncus,
		Status:      api.ServerStatusReady,
		LastUpdated: time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServers := []provisioning.Server{testServerA, testServerB}

	networkAddressSetA := inventory.NetworkAddressSet{
		Cluster:     "one",
		ProjectName: "one",
		Name:        "one",
		Object:      incusapi.NetworkAddressSet{},
		LastUpdated: time.Now(),
	}

	networkAddressSetA.DeriveUUID()

	networkAddressSetB := inventory.NetworkAddressSet{
		Cluster:     "two",
		ProjectName: "two",
		Name:        "two",
		Object:      incusapi.NetworkAddressSet{},
		LastUpdated: time.Now(),
	}

	networkAddressSetB.DeriveUUID()

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	tx := transaction.Enable(db)
	entities.PreparedStmts, err = entities.PrepareStmts(tx, false)
	require.NoError(t, err)

	networkAddressSet := inventorySqlite.NewNetworkAddressSet(tx)

	// Cannot add an networkAddressSet with an invalid server.
	_, err = networkAddressSet.Create(ctx, networkAddressSetA)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Seed provisioning
	err = seed.Provisioning(ctx, db, testClusters, testServers)
	require.NoError(t, err)

	// Add network_address_sets
	networkAddressSetA, err = networkAddressSet.Create(ctx, networkAddressSetA)
	require.NoError(t, err)
	require.Equal(t, "one", networkAddressSetA.Cluster)

	networkAddressSetB, err = networkAddressSet.Create(ctx, networkAddressSetB)
	require.NoError(t, err)
	require.Equal(t, "two", networkAddressSetB.Cluster)

	// Ensure we have two entries without filter
	networkAddressSetUUIDs, err := networkAddressSet.GetAllUUIDsWithFilter(ctx, inventory.NetworkAddressSetFilter{})
	require.NoError(t, err)
	require.Len(t, networkAddressSetUUIDs, 2)
	require.ElementsMatch(t, []uuid.UUID{networkAddressSetA.UUID, networkAddressSetB.UUID}, networkAddressSetUUIDs)

	// Ensure we have two entries without filter
	dbNetworkAddressSet, err := networkAddressSet.GetAllWithFilter(ctx, inventory.NetworkAddressSetFilter{})
	require.NoError(t, err)
	require.Len(t, dbNetworkAddressSet, 2)
	require.Equal(t, networkAddressSetA.Name, dbNetworkAddressSet[0].Name)
	require.Equal(t, networkAddressSetB.Name, dbNetworkAddressSet[1].Name)

	// Ensure we have one entry with filter for cluster, server, project and name.
	networkAddressSetUUIDs, err = networkAddressSet.GetAllUUIDsWithFilter(ctx, inventory.NetworkAddressSetFilter{
		Cluster: ptr.To("one"),
		Project: ptr.To("one"),
		Name:    ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, networkAddressSetUUIDs, 1)
	require.ElementsMatch(t, []uuid.UUID{networkAddressSetA.UUID}, networkAddressSetUUIDs)

	// Ensure we have one entry with filter for cluster, server, project and name.
	dbNetworkAddressSet, err = networkAddressSet.GetAllWithFilter(ctx, inventory.NetworkAddressSetFilter{
		Cluster: ptr.To("one"),
		Project: ptr.To("one"),
		Name:    ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, dbNetworkAddressSet, 1)
	require.Equal(t, "one", dbNetworkAddressSet[0].Name)

	// Should get back networkAddressSetA unchanged.
	networkAddressSetA.Cluster = "one"
	dbNetworkAddressSetA, err := networkAddressSet.GetByUUID(ctx, networkAddressSetA.UUID)
	require.NoError(t, err)
	require.Equal(t, networkAddressSetA, dbNetworkAddressSetA)

	networkAddressSetB.LastUpdated = time.Now().UTC().Truncate(0)
	dbNetworkAddressSetB, err := networkAddressSet.UpdateByUUID(ctx, networkAddressSetB)
	require.NoError(t, err)
	require.Equal(t, networkAddressSetB, dbNetworkAddressSetB)

	// Delete network_address_sets by ID.
	err = networkAddressSet.DeleteByUUID(ctx, networkAddressSetA.UUID)
	require.NoError(t, err)

	// Can't delete an network_address_sets that doesn't exist.
	err = networkAddressSet.DeleteByUUID(ctx, networkAddressSetA.UUID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Can't add a duplicate network_address_sets.
	_, err = networkAddressSet.Create(ctx, networkAddressSetB)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Delete network_address_sets by cluster Name.
	err = networkAddressSet.DeleteByClusterName(ctx, "two")
	require.NoError(t, err)

	_, err = networkAddressSet.GetByUUID(ctx, networkAddressSetA.UUID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no network_address_sets remaining.
	networkAddressSetUUIDs, err = networkAddressSet.GetAllUUIDsWithFilter(ctx, inventory.NetworkAddressSetFilter{})
	require.NoError(t, err)
	require.Zero(t, networkAddressSetUUIDs)
}
