// Code generated by generate-inventory; DO NOT EDIT.

package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type storageBucket struct {
	db sqlite.DBTX
}

var _ inventory.StorageBucketRepo = &storageBucket{}

func NewStorageBucket(db sqlite.DBTX) *storageBucket {
	return &storageBucket{
		db: db,
	}
}

func (i storageBucket) Create(ctx context.Context, in inventory.StorageBucket) (inventory.StorageBucket, error) {
	const sqlStmt = `
WITH _server AS (
  SELECT cluster_id FROM servers WHERE server_id = :server_id
)
INSERT INTO storage_buckets (server_id, project_name, name, object, last_updated)
VALUES(:server_id, :project_name, :name, :object, :last_updated)
RETURNING id, (SELECT cluster_id FROM _server) as cluster_id, server_id, project_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StorageBucket{}, err
	}

	row := i.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("server_id", in.ServerID),
		sql.Named("project_name", in.ProjectName),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StorageBucket{}, sqlite.MapErr(row.Err())
	}

	return scanStorageBucket(row)
}

func (i storageBucket) GetAllIDs(ctx context.Context) ([]int, error) {
	const sqlStmt = `SELECT id FROM storage_buckets ORDER BY id`

	rows, err := i.db.QueryContext(ctx, sqlStmt)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []int
	for rows.Next() {
		var id int
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (i storageBucket) GetByID(ctx context.Context, id int) (inventory.StorageBucket, error) {
	const sqlStmt = `
SELECT
  storage_buckets.id, servers.cluster_id as cluster_id, storage_buckets.server_id, storage_buckets.project_name, storage_buckets.name, storage_buckets.object, storage_buckets.last_updated
FROM
  storage_buckets
  INNER JOIN servers ON storage_buckets.server_id = servers.id
WHERE storage_buckets.id=:id;
`

	row := i.db.QueryRowContext(ctx, sqlStmt, sql.Named("id", id))
	if row.Err() != nil {
		return inventory.StorageBucket{}, sqlite.MapErr(row.Err())
	}

	return scanStorageBucket(row)
}

func (i storageBucket) DeleteByServerID(ctx context.Context, serverID int) error {
	const sqlStmt = `DELETE FROM storage_buckets WHERE server_id=:serverID;`

	result, err := i.db.ExecContext(ctx, sqlStmt, sql.Named("serverID", serverID))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func scanStorageBucket(row interface{ Scan(dest ...any) error }) (inventory.StorageBucket, error) {
	var object []byte
	var storageBucket inventory.StorageBucket

	err := row.Scan(
		&storageBucket.ID,
		&storageBucket.ClusterID,
		&storageBucket.ServerID,
		&storageBucket.ProjectName,
		&storageBucket.Name,
		&object,
		&storageBucket.LastUpdated,
	)
	if err != nil {
		return inventory.StorageBucket{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &storageBucket.Object)
	if err != nil {
		return inventory.StorageBucket{}, err
	}

	return storageBucket, nil
}
