// Code generated by generate-inventory; DO NOT EDIT.

package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type storageBucket struct {
	db sqlite.DBTX
}

var _ inventory.StorageBucketRepo = &storageBucket{}

func NewStorageBucket(db sqlite.DBTX) *storageBucket {
	return &storageBucket{
		db: db,
	}
}

func (r storageBucket) Create(ctx context.Context, in inventory.StorageBucket) (inventory.StorageBucket, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id , (
    SELECT servers.id FROM clusters
      LEFT JOIN servers ON servers.cluster_id = clusters.id
    WHERE clusters.name = :cluster_name AND servers.name = :server_name
  ) AS server_id FROM clusters WHERE clusters.name = :cluster_name
)
INSERT INTO storage_buckets (uuid, cluster_id, server_id, project_name, storage_pool_name, name, object, last_updated)
VALUES (:uuid, (SELECT cluster_id FROM _lookup), (SELECT server_id FROM _lookup), :project_name, :storage_pool_name, :name, :object, :last_updated)
RETURNING id, :uuid, :cluster_name, :server_name, project_name, storage_pool_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StorageBucket{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("uuid", in.UUID),
		sql.Named("cluster_name", in.Cluster),
		sql.Named("server_name", in.Server),
		sql.Named("project_name", in.ProjectName),
		sql.Named("storage_pool_name", in.StoragePoolName),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StorageBucket{}, sqlite.MapErr(row.Err())
	}

	return scanStorageBucket(row)
}

func (r storageBucket) GetAllWithFilter(ctx context.Context, filter inventory.StorageBucketFilter) (inventory.StorageBuckets, error) {
	const sqlStmt = `
SELECT
  storage_buckets.id, storage_buckets.uuid, clusters.name, servers.name, storage_buckets.project_name, storage_buckets.storage_pool_name, storage_buckets.name, storage_buckets.object, storage_buckets.last_updated
FROM storage_buckets
  INNER JOIN clusters ON storage_buckets.cluster_id = clusters.id
  INNER JOIN servers ON storage_buckets.server_id = servers.id
WHERE true
%s
ORDER BY clusters.name, servers.name, storage_buckets.name
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

	if filter.Server != nil {
		whereClause = append(whereClause, ` AND servers.name = :server_name`)
		args = append(args, sql.Named("server_name", filter.Server))
	}

	if filter.Project != nil {
		whereClause = append(whereClause, ` AND storage_buckets.project_name = :project`)
		args = append(args, sql.Named("project", filter.Project))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var storageBuckets inventory.StorageBuckets
	for rows.Next() {
		var storageBucket inventory.StorageBucket
		storageBucket, err = scanStorageBucket(rows)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		storageBuckets = append(storageBuckets, storageBucket)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return storageBuckets, nil
}

func (r storageBucket) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.StorageBucketFilter) ([]uuid.UUID, error) {
	const sqlStmt = `
SELECT storage_buckets.uuid
FROM storage_buckets
  INNER JOIN clusters ON storage_buckets.cluster_id = clusters.id
  INNER JOIN servers ON storage_buckets.server_id = servers.id
WHERE true
%s
ORDER BY storage_buckets.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

	if filter.Server != nil {
		whereClause = append(whereClause, ` AND servers.name = :server_name`)
		args = append(args, sql.Named("server_name", filter.Server))
	}

	if filter.Project != nil {
		whereClause = append(whereClause, ` AND storage_buckets.project_name = :project`)
		args = append(args, sql.Named("project", filter.Project))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (r storageBucket) GetByUUID(ctx context.Context, id uuid.UUID) (inventory.StorageBucket, error) {
	const sqlStmt = `
SELECT
  storage_buckets.id, storage_buckets.uuid, clusters.name, servers.name, storage_buckets.project_name, storage_buckets.storage_pool_name, storage_buckets.name, storage_buckets.object, storage_buckets.last_updated
FROM
  storage_buckets
  INNER JOIN clusters ON storage_buckets.cluster_id = clusters.id
  INNER JOIN servers ON storage_buckets.server_id = servers.id
WHERE storage_buckets.uuid=:uuid;
`

	row := r.db.QueryRowContext(ctx, sqlStmt, sql.Named("uuid", id))
	if row.Err() != nil {
		return inventory.StorageBucket{}, sqlite.MapErr(row.Err())
	}

	return scanStorageBucket(row)
}

func (r storageBucket) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	const sqlStmt = `DELETE FROM storage_buckets WHERE uuid=:uuid;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("uuid", id))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r storageBucket) DeleteByClusterName(ctx context.Context, cluster string) error {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id as cluster_id from clusters where name = :cluster_name
)
DELETE FROM storage_buckets WHERE cluster_id=(SELECT cluster_id FROM _lookup);`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("cluster_name", cluster))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r storageBucket) UpdateByUUID(ctx context.Context, in inventory.StorageBucket) (inventory.StorageBucket, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id , (
    SELECT servers.id FROM clusters
      LEFT JOIN servers ON servers.cluster_id = clusters.id
    WHERE clusters.name = :cluster_name AND servers.name = :server_name
  ) AS server_id FROM clusters WHERE clusters.name = :cluster_name
)
UPDATE storage_buckets SET uuid=:uuid, cluster_id=(SELECT cluster_id FROM _lookup), server_id=(SELECT server_id FROM _lookup), project_name=:project_name, storage_pool_name=:storage_pool_name, name=:name, object=:object, last_updated=:last_updated
WHERE uuid=:uuid
RETURNING id, :uuid, :cluster_name, :server_name, project_name, storage_pool_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StorageBucket{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("uuid", in.UUID),
		sql.Named("cluster_name", in.Cluster),
		sql.Named("server_name", in.Server),
		sql.Named("project_name", in.ProjectName),
		sql.Named("storage_pool_name", in.StoragePoolName),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StorageBucket{}, sqlite.MapErr(row.Err())
	}

	return scanStorageBucket(row)
}

func scanStorageBucket(row interface{ Scan(dest ...any) error }) (inventory.StorageBucket, error) {
	var object []byte
	var storageBucket inventory.StorageBucket

	err := row.Scan(
		&storageBucket.ID,
		&storageBucket.UUID,
		&storageBucket.Cluster,
		&storageBucket.Server,
		&storageBucket.ProjectName,
		&storageBucket.StoragePoolName,
		&storageBucket.Name,
		&object,
		&storageBucket.LastUpdated,
	)
	if err != nil {
		return inventory.StorageBucket{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &storageBucket.Object)
	if err != nil {
		return inventory.StorageBucket{}, err
	}

	return storageBucket, nil
}
