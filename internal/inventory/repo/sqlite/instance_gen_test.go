// Code generated by generate-inventory; DO NOT EDIT.

package sqlite_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	provisioningSqlite "github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite/entities"
	"github.com/FuturFusion/operations-center/internal/ptr"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
	"github.com/FuturFusion/operations-center/internal/transaction"
	"github.com/FuturFusion/operations-center/shared/api"
)

func TestInstanceDatabaseActions(t *testing.T) {
	testToken := provisioning.Token{
		UsesRemaining: 10,
		ExpireAt:      time.Now().Add(1 * time.Minute),
	}

	testClusterA := provisioning.Cluster{
		Name:          "one",
		ConnectionURL: "https://cluster-one/",
		ServerNames:   []string{"one"},
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testClusterB := provisioning.Cluster{
		Name:          "two",
		ConnectionURL: "https://cluster-two/",
		ServerNames:   []string{"two"},
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerA := provisioning.Server{
		Name:          "one",
		ConnectionURL: "https://server-one/",
		Type:          api.ServerTypeIncus,
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerB := provisioning.Server{
		Name:          "two",
		ConnectionURL: "https://server-two/",
		Type:          api.ServerTypeIncus,
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	instanceA := inventory.Instance{
		Cluster:     "one",
		Server:      "one",
		ProjectName: "one",
		Name:        "one",
		Object:      incusapi.InstanceFull{},
		LastUpdated: time.Now(),
	}

	instanceA.DeriveUUID()

	instanceB := inventory.Instance{
		Cluster:     "two",
		Server:      "two",
		ProjectName: "two",
		Name:        "two",
		Object:      incusapi.InstanceFull{},
		LastUpdated: time.Now(),
	}

	instanceB.DeriveUUID()

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	tx := transaction.Enable(db)
	entities.PreparedStmts, err = entities.PrepareStmts(tx, false)
	require.NoError(t, err)

	tokenSvc := provisioning.NewTokenService(provisioningSqlite.NewToken(tx))
	serverSvc := provisioning.NewServerService(provisioningSqlite.NewServer(tx), tokenSvc)
	clusterSvc := provisioning.NewClusterService(provisioningSqlite.NewCluster(tx), serverSvc, nil)

	instance := inventorySqlite.NewInstance(tx)

	// Cannot add an instance with an invalid server.
	_, err = instance.Create(ctx, instanceA)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Add token.
	testToken, err = tokenSvc.Create(ctx, testToken)
	require.NoError(t, err)

	// Add dummy servers.
	_, err = serverSvc.Create(ctx, testToken.UUID, testServerA)
	require.NoError(t, err)
	_, err = serverSvc.Create(ctx, testToken.UUID, testServerB)
	require.NoError(t, err)

	// Add dummy clusters.
	_, err = clusterSvc.Create(ctx, testClusterA)
	require.NoError(t, err)
	_, err = clusterSvc.Create(ctx, testClusterB)
	require.NoError(t, err)

	// Add instances
	instanceA, err = instance.Create(ctx, instanceA)
	require.NoError(t, err)
	require.Equal(t, "one", instanceA.Cluster)

	instanceB, err = instance.Create(ctx, instanceB)
	require.NoError(t, err)
	require.Equal(t, "two", instanceB.Cluster)

	// Ensure we have two entries without filter
	instanceUUIDs, err := instance.GetAllUUIDsWithFilter(ctx, inventory.InstanceFilter{})
	require.NoError(t, err)
	require.Len(t, instanceUUIDs, 2)
	require.ElementsMatch(t, []uuid.UUID{instanceA.UUID, instanceB.UUID}, instanceUUIDs)

	// Ensure we have two entries without filter
	dbInstance, err := instance.GetAllWithFilter(ctx, inventory.InstanceFilter{})
	require.NoError(t, err)
	require.Len(t, dbInstance, 2)
	require.Equal(t, instanceA.Name, dbInstance[0].Name)
	require.Equal(t, instanceB.Name, dbInstance[1].Name)

	// Ensure we have one entry with filter for cluster, server and project
	instanceUUIDs, err = instance.GetAllUUIDsWithFilter(ctx, inventory.InstanceFilter{
		Cluster: ptr.To("one"),
		Server:  ptr.To("one"),
		Project: ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, instanceUUIDs, 1)
	require.ElementsMatch(t, []uuid.UUID{instanceA.UUID}, instanceUUIDs)

	// Ensure we have one entry with filter for cluster, server and project
	dbInstance, err = instance.GetAllWithFilter(ctx, inventory.InstanceFilter{
		Cluster: ptr.To("one"),
		Server:  ptr.To("one"),
		Project: ptr.To("one"),
	})
	require.NoError(t, err)
	require.Len(t, dbInstance, 1)
	require.Equal(t, "one", dbInstance[0].Name)

	// Should get back instanceA unchanged.
	instanceA.Cluster = "one"
	dbInstanceA, err := instance.GetByUUID(ctx, instanceA.UUID)
	require.NoError(t, err)
	require.Equal(t, instanceA, dbInstanceA)

	instanceB.LastUpdated = time.Now().UTC().Truncate(0)
	dbInstanceB, err := instance.UpdateByUUID(ctx, instanceB)
	require.NoError(t, err)
	require.Equal(t, instanceB, dbInstanceB)

	// Delete instances by ID.
	err = instance.DeleteByUUID(ctx, instanceA.UUID)
	require.NoError(t, err)

	// Delete instances by cluster Name.
	err = instance.DeleteByClusterName(ctx, "two")
	require.NoError(t, err)

	_, err = instance.GetByUUID(ctx, instanceA.UUID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no instances remaining.
	instanceUUIDs, err = instance.GetAllUUIDsWithFilter(ctx, inventory.InstanceFilter{})
	require.NoError(t, err)
	require.Zero(t, instanceUUIDs)
}
