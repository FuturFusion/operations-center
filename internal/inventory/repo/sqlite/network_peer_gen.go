// Code generated by generate-inventory; DO NOT EDIT.

package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type networkPeer struct {
	db sqlite.DBTX
}

var _ inventory.NetworkPeerRepo = &networkPeer{}

func NewNetworkPeer(db sqlite.DBTX) *networkPeer {
	return &networkPeer{
		db: db,
	}
}

func (r networkPeer) Create(ctx context.Context, in inventory.NetworkPeer) (inventory.NetworkPeer, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id FROM clusters WHERE clusters.name = :cluster_name
)
INSERT INTO network_peers (uuid, cluster_id, network_name, name, object, last_updated)
VALUES (:uuid, (SELECT cluster_id FROM _lookup), :network_name, :name, :object, :last_updated)
RETURNING id, :uuid, :cluster_name, network_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.NetworkPeer{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("uuid", in.UUID),
		sql.Named("cluster_name", in.Cluster),
		sql.Named("network_name", in.NetworkName),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.NetworkPeer{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkPeer(row)
}

func (r networkPeer) GetAllWithFilter(ctx context.Context, filter inventory.NetworkPeerFilter) (inventory.NetworkPeers, error) {
	const sqlStmt = `
SELECT
  network_peers.id, network_peers.uuid, clusters.name, network_peers.network_name, network_peers.name, network_peers.object, network_peers.last_updated
FROM network_peers
  INNER JOIN clusters ON network_peers.cluster_id = clusters.id
WHERE true
%s
ORDER BY clusters.name, network_peers.name
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

	if filter.Name != nil {
		whereClause = append(whereClause, ` AND network_peers.name = :name`)
		args = append(args, sql.Named("name", filter.Name))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var networkPeers inventory.NetworkPeers
	for rows.Next() {
		var networkPeer inventory.NetworkPeer
		networkPeer, err = scanNetworkPeer(rows)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		networkPeers = append(networkPeers, networkPeer)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return networkPeers, nil
}

func (r networkPeer) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.NetworkPeerFilter) ([]uuid.UUID, error) {
	const sqlStmt = `
SELECT network_peers.uuid
FROM network_peers
  INNER JOIN clusters ON network_peers.cluster_id = clusters.id
WHERE true
%s
ORDER BY network_peers.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

	if filter.Name != nil {
		whereClause = append(whereClause, ` AND network_peers.name = :name`)
		args = append(args, sql.Named("name", filter.Name))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (r networkPeer) GetByUUID(ctx context.Context, id uuid.UUID) (inventory.NetworkPeer, error) {
	const sqlStmt = `
SELECT
  network_peers.id, network_peers.uuid, clusters.name, network_peers.network_name, network_peers.name, network_peers.object, network_peers.last_updated
FROM
  network_peers
  INNER JOIN clusters ON network_peers.cluster_id = clusters.id
WHERE network_peers.uuid=:uuid;
`

	row := r.db.QueryRowContext(ctx, sqlStmt, sql.Named("uuid", id))
	if row.Err() != nil {
		return inventory.NetworkPeer{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkPeer(row)
}

func (r networkPeer) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	const sqlStmt = `DELETE FROM network_peers WHERE uuid=:uuid;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("uuid", id))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r networkPeer) DeleteByClusterName(ctx context.Context, cluster string) error {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id as cluster_id from clusters where name = :cluster_name
)
DELETE FROM network_peers WHERE cluster_id=(SELECT cluster_id FROM _lookup);`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("cluster_name", cluster))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r networkPeer) UpdateByUUID(ctx context.Context, in inventory.NetworkPeer) (inventory.NetworkPeer, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id FROM clusters WHERE clusters.name = :cluster_name
)
UPDATE network_peers SET uuid=:uuid, cluster_id=(SELECT cluster_id FROM _lookup), network_name=:network_name, name=:name, object=:object, last_updated=:last_updated
WHERE uuid=:uuid
RETURNING id, :uuid, :cluster_name, network_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.NetworkPeer{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("uuid", in.UUID),
		sql.Named("cluster_name", in.Cluster),
		sql.Named("network_name", in.NetworkName),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.NetworkPeer{}, sqlite.MapErr(row.Err())
	}

	return scanNetworkPeer(row)
}

func scanNetworkPeer(row interface{ Scan(dest ...any) error }) (inventory.NetworkPeer, error) {
	var object []byte
	var networkPeer inventory.NetworkPeer

	err := row.Scan(
		&networkPeer.ID,
		&networkPeer.UUID,
		&networkPeer.Cluster,
		&networkPeer.NetworkName,
		&networkPeer.Name,
		&object,
		&networkPeer.LastUpdated,
	)
	if err != nil {
		return inventory.NetworkPeer{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &networkPeer.Object)
	if err != nil {
		return inventory.NetworkPeer{}, err
	}

	return networkPeer, nil
}
