// Code generated by generate-inventory; DO NOT EDIT.

package sqlite_test

import (
	"context"
	"encoding/json"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/dbschema"
	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	inventorySqlite "github.com/FuturFusion/operations-center/internal/inventory/repo/sqlite"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	provisioningSqlite "github.com/FuturFusion/operations-center/internal/provisioning/repo/sqlite"
	dbdriver "github.com/FuturFusion/operations-center/internal/sqlite"
	"github.com/FuturFusion/operations-center/shared/api"
)

func TestNetworkZoneDatabaseActions(t *testing.T) {
	testClusterA := provisioning.Cluster{
		ID:              1,
		Name:            "one",
		ConnectionURL:   "https://cluster-one/",
		ServerHostnames: []string{"one", "two"},
		LastUpdated:     time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	testServerA := provisioning.Server{
		ID:            1,
		ClusterID:     1,
		Hostname:      "one",
		Type:          api.ServerTypeIncus,
		ConnectionURL: "https://one/",
		HardwareData:  incusapi.Resources{},
		VersionData:   json.RawMessage(nil),
		LastUpdated:   time.Now().UTC().Truncate(0), // Truncate to remove the monotonic clock.
	}

	networkZoneA := inventory.NetworkZone{
		ServerID:    1,
		ProjectName: "one",
		Name:        "one",
		Object:      incusapi.NetworkZone{},
		LastUpdated: time.Now(),
	}

	networkZoneB := inventory.NetworkZone{
		ServerID:    1,
		ProjectName: "two",
		Name:        "two",
		Object:      incusapi.NetworkZone{},
		LastUpdated: time.Now(),
	}

	ctx := context.Background()

	// Create a new temporary database.
	tmpDir := t.TempDir()
	db, err := dbdriver.Open(tmpDir)
	require.NoError(t, err)

	t.Cleanup(func() {
		err = db.Close()
		require.NoError(t, err)
	})

	_, err = dbschema.Ensure(ctx, db, tmpDir)
	require.NoError(t, err)

	clusterSvc := provisioning.NewClusterService(provisioningSqlite.NewCluster(db))
	serverSvc := provisioning.NewServerService(provisioningSqlite.NewServer(db))

	networkZone := inventorySqlite.NewNetworkZone(db)

	// Cannot add an networkZone with an invalid server.
	_, err = networkZone.Create(ctx, networkZoneA)
	require.ErrorIs(t, err, domain.ErrConstraintViolation)

	// Add dummy clusters
	_, err = clusterSvc.Create(ctx, testClusterA)
	require.NoError(t, err)

	// Add dummy server.
	_, err = serverSvc.Create(ctx, testServerA)
	require.NoError(t, err)

	// Add network_zones
	networkZoneA, err = networkZone.Create(ctx, networkZoneA)
	require.NoError(t, err)
	require.Equal(t, 1, networkZoneA.ClusterID)

	networkZoneB, err = networkZone.Create(ctx, networkZoneB)
	require.NoError(t, err)
	require.Equal(t, 1, networkZoneB.ClusterID)

	// Ensure we have two entries
	networkZoneIDs, err := networkZone.GetAllIDs(ctx)
	require.NoError(t, err)
	require.Len(t, networkZoneIDs, 2)
	require.ElementsMatch(t, []int{1, 2}, networkZoneIDs)

	// Should get back networkZoneA unchanged.
	networkZoneA.ClusterID = 1
	dbNetworkZoneA, err := networkZone.GetByID(ctx, networkZoneA.ID)
	require.NoError(t, err)
	require.Equal(t, networkZoneA, dbNetworkZoneA)

	// Delete network_zones by server ID.
	err = networkZone.DeleteByServerID(ctx, 1)
	require.NoError(t, err)

	_, err = networkZone.GetByID(ctx, networkZoneA.ID)
	require.ErrorIs(t, err, domain.ErrNotFound)

	// Should have no network_zones remaining.
	networkZoneIDs, err = networkZone.GetAllIDs(ctx)
	require.NoError(t, err)
	require.Zero(t, networkZoneIDs)
}
