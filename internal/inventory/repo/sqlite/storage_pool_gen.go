// Code generated by generate-inventory; DO NOT EDIT.

package sqlite

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/sqlite"
)

type storagePool struct {
	db sqlite.DBTX
}

var _ inventory.StoragePoolRepo = &storagePool{}

func NewStoragePool(db sqlite.DBTX) *storagePool {
	return &storagePool{
		db: db,
	}
}

func (r storagePool) Create(ctx context.Context, in inventory.StoragePool) (inventory.StoragePool, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id FROM clusters WHERE clusters.name = :cluster_name
)
INSERT INTO storage_pools (uuid, cluster_id, name, object, last_updated)
VALUES (:uuid, (SELECT cluster_id FROM _lookup), :name, :object, :last_updated)
RETURNING id, :uuid, :cluster_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StoragePool{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("uuid", in.UUID),
		sql.Named("cluster_name", in.Cluster),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StoragePool{}, sqlite.MapErr(row.Err())
	}

	return scanStoragePool(row)
}

func (r storagePool) GetAllWithFilter(ctx context.Context, filter inventory.StoragePoolFilter) (inventory.StoragePools, error) {
	const sqlStmt = `
SELECT
  storage_pools.id, storage_pools.uuid, clusters.name, storage_pools.name, storage_pools.object, storage_pools.last_updated
FROM storage_pools
  INNER JOIN clusters ON storage_pools.cluster_id = clusters.id
WHERE true
%s
ORDER BY clusters.name, storage_pools.name
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

	if filter.Name != nil {
		whereClause = append(whereClause, ` AND storage_pools.name = :name`)
		args = append(args, sql.Named("name", filter.Name))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var storagePools inventory.StoragePools
	for rows.Next() {
		var storagePool inventory.StoragePool
		storagePool, err = scanStoragePool(rows)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		storagePools = append(storagePools, storagePool)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return storagePools, nil
}

func (r storagePool) GetAllUUIDsWithFilter(ctx context.Context, filter inventory.StoragePoolFilter) ([]uuid.UUID, error) {
	const sqlStmt = `
SELECT storage_pools.uuid
FROM storage_pools
  INNER JOIN clusters ON storage_pools.cluster_id = clusters.id
WHERE true
%s
ORDER BY storage_pools.id
`

	var whereClause []string
	var args []any

	if filter.Cluster != nil {
		whereClause = append(whereClause, ` AND clusters.name = :cluster_name`)
		args = append(args, sql.Named("cluster_name", filter.Cluster))
	}

	if filter.Name != nil {
		whereClause = append(whereClause, ` AND storage_pools.name = :name`)
		args = append(args, sql.Named("name", filter.Name))
	}

	sqlStmtComplete := fmt.Sprintf(sqlStmt, strings.Join(whereClause, " "))

	rows, err := r.db.QueryContext(ctx, sqlStmtComplete, args...)
	if err != nil {
		return nil, sqlite.MapErr(err)
	}

	defer func() { _ = rows.Close() }()

	var ids []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		err := rows.Scan(&id)
		if err != nil {
			return nil, sqlite.MapErr(err)
		}

		ids = append(ids, id)
	}

	if rows.Err() != nil {
		return nil, sqlite.MapErr(rows.Err())
	}

	return ids, nil
}

func (r storagePool) GetByUUID(ctx context.Context, id uuid.UUID) (inventory.StoragePool, error) {
	const sqlStmt = `
SELECT
  storage_pools.id, storage_pools.uuid, clusters.name, storage_pools.name, storage_pools.object, storage_pools.last_updated
FROM
  storage_pools
  INNER JOIN clusters ON storage_pools.cluster_id = clusters.id
WHERE storage_pools.uuid=:uuid;
`

	row := r.db.QueryRowContext(ctx, sqlStmt, sql.Named("uuid", id))
	if row.Err() != nil {
		return inventory.StoragePool{}, sqlite.MapErr(row.Err())
	}

	return scanStoragePool(row)
}

func (r storagePool) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	const sqlStmt = `DELETE FROM storage_pools WHERE uuid=:uuid;`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("uuid", id))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r storagePool) DeleteByClusterName(ctx context.Context, cluster string) error {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id as cluster_id from clusters where name = :cluster_name
)
DELETE FROM storage_pools WHERE cluster_id=(SELECT cluster_id FROM _lookup);`

	result, err := r.db.ExecContext(ctx, sqlStmt, sql.Named("cluster_name", cluster))
	if err != nil {
		return sqlite.MapErr(err)
	}

	affectedRows, err := result.RowsAffected()
	if err != nil {
		return sqlite.MapErr(err)
	}

	if affectedRows == 0 {
		return domain.ErrNotFound
	}

	return nil
}

func (r storagePool) UpdateByUUID(ctx context.Context, in inventory.StoragePool) (inventory.StoragePool, error) {
	const sqlStmt = `
WITH _lookup AS (
  SELECT id AS cluster_id FROM clusters WHERE clusters.name = :cluster_name
)
UPDATE storage_pools SET uuid=:uuid, cluster_id=(SELECT cluster_id FROM _lookup), name=:name, object=:object, last_updated=:last_updated
WHERE uuid=:uuid
RETURNING id, :uuid, :cluster_name, name, object, last_updated;
`

	marshaledObject, err := json.Marshal(in.Object)
	if err != nil {
		return inventory.StoragePool{}, err
	}

	row := r.db.QueryRowContext(ctx, sqlStmt,
		sql.Named("uuid", in.UUID),
		sql.Named("cluster_name", in.Cluster),
		sql.Named("name", in.Name),
		sql.Named("object", marshaledObject),
		sql.Named("last_updated", in.LastUpdated),
	)
	if row.Err() != nil {
		return inventory.StoragePool{}, sqlite.MapErr(row.Err())
	}

	return scanStoragePool(row)
}

func scanStoragePool(row interface{ Scan(dest ...any) error }) (inventory.StoragePool, error) {
	var object []byte
	var storagePool inventory.StoragePool

	err := row.Scan(
		&storagePool.ID,
		&storagePool.UUID,
		&storagePool.Cluster,
		&storagePool.Name,
		&object,
		&storagePool.LastUpdated,
	)
	if err != nil {
		return inventory.StoragePool{}, sqlite.MapErr(err)
	}

	err = json.Unmarshal(object, &storagePool.Object)
	if err != nil {
		return inventory.StoragePool{}, err
	}

	return storagePool, nil
}
