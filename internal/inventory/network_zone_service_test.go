// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestNetworkZoneService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkZoneRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkZoneFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			networkZoneSvc := inventory.NewNetworkZoneService(repo, nil, nil, inventory.NetworkZoneWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkZoneIDs, err := networkZoneSvc.GetAllIDsWithFilter(context.Background(), inventory.NetworkZoneFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkZoneIDs, tc.count)
		})
	}
}

func TestNetworkZoneService_GetByID(t *testing.T) {
	tests := []struct {
		name                   string
		idArg                  int
		repoGetByIDNetworkZone inventory.NetworkZone
		repoGetByIDErr         error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDNetworkZone: inventory.NetworkZone{
				ID:          1,
				Cluster:     "one",
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.NetworkZone{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkZoneRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkZone, error) {
					return tc.repoGetByIDNetworkZone, tc.repoGetByIDErr
				},
			}

			networkZoneSvc := inventory.NewNetworkZoneService(repo, nil, nil, inventory.NetworkZoneWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkZone, err := networkZoneSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDNetworkZone, networkZone)
		})
	}
}

func TestNetworkZoneService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                                     string
		clusterSvcGetByIDCluster                 provisioning.Cluster
		clusterSvcGetByIDErr                     error
		networkZoneClientGetNetworkZoneByName    incusapi.NetworkZone
		networkZoneClientGetNetworkZoneByNameErr error
		repoGetByIDNetworkZone                   inventory.NetworkZone
		repoGetByIDErr                           error
		repoUpdateByIDErr                        error
		repoDeleteByIDErr                        error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDNetworkZone: inventory.NetworkZone{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZoneByName: incusapi.NetworkZone{
				Name:    "networkZone one",
				Project: "project one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - networkZone get by name - not found",
			repoGetByIDNetworkZone: inventory.NetworkZone{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZoneByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - networkZone get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDNetworkZone: inventory.NetworkZone{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkZone get by name",
			repoGetByIDNetworkZone: inventory.NetworkZone{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZoneByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkZone get by name - not found - delete by id",
			repoGetByIDNetworkZone: inventory.NetworkZone{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZoneByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr:                        boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDNetworkZone: inventory.NetworkZone{
				ID:      1,
				Cluster: "one",
				Name:    "", // invalid
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZoneByName: incusapi.NetworkZone{
				Name:    "networkZone one",
				Project: "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDNetworkZone: inventory.NetworkZone{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZoneByName: incusapi.NetworkZone{
				Name:    "networkZone one",
				Project: "project one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkZoneRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkZone, error) {
					return tc.repoGetByIDNetworkZone, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, networkZone inventory.NetworkZone) (inventory.NetworkZone, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkZone.LastUpdated)
					return inventory.NetworkZone{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkZoneClient := &serverMock.NetworkZoneServerClientMock{
				GetNetworkZoneByNameFunc: func(ctx context.Context, connectionURL string, networkZoneName string) (incusapi.NetworkZone, error) {
					require.Equal(t, tc.repoGetByIDNetworkZone.Name, networkZoneName)
					return tc.networkZoneClientGetNetworkZoneByName, tc.networkZoneClientGetNetworkZoneByNameErr
				},
			}

			networkZoneSvc := inventory.NewNetworkZoneService(repo, clusterSvc, networkZoneClient, inventory.NetworkZoneWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkZoneSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkZoneService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                string
		clusterSvcGetByIDCluster            provisioning.Cluster
		clusterSvcGetByIDErr                error
		networkZoneClientGetNetworkZones    []incusapi.NetworkZone
		networkZoneClientGetNetworkZonesErr error
		repoDeleteByClusterNameErr          error
		repoCreateErr                       error
		serviceOptions                      []inventory.NetworkZoneServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZones: []incusapi.NetworkZone{
				{
					Name:    "networkZone one",
					Project: "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkZone client get NetworkZones",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZonesErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_zones delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZones: []incusapi.NetworkZone{
				{
					Name:    "networkZone one",
					Project: "project one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZones: []incusapi.NetworkZone{
				{
					Name:    "", // invalid
					Project: "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkZone create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkZoneClientGetNetworkZones: []incusapi.NetworkZone{
				{
					Name:    "networkZone one",
					Project: "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkZoneRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, networkZone inventory.NetworkZone) (inventory.NetworkZone, error) {
					return inventory.NetworkZone{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (provisioning.Cluster, error) {
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkZoneClient := &serverMock.NetworkZoneServerClientMock{
				GetNetworkZonesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error) {
					return tc.networkZoneClientGetNetworkZones, tc.networkZoneClientGetNetworkZonesErr
				},
			}

			networkZoneSvc := inventory.NewNetworkZoneService(repo, clusterSvc, networkZoneClient,
				append(
					tc.serviceOptions,
					inventory.NetworkZoneWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkZoneSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
