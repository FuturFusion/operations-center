// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestProjectService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProjectRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.ProjectFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			projectSvc := inventory.NewProjectService(repo, nil, nil, nil, inventory.ProjectWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			projectHostnames, err := projectSvc.GetAllIDsWithFilter(context.Background(), inventory.ProjectFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, projectHostnames, tc.count)
		})
	}
}

func TestProjectService_GetByID(t *testing.T) {
	tests := []struct {
		name               string
		idArg              int
		repoGetByIDProject inventory.Project
		repoGetByIDErr     error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDProject: inventory.Project{
				ID:          1,
				ServerID:    1,
				Name:        "one",
				Object:      incusapi.Project{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProjectRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Project, error) {
					return tc.repoGetByIDProject, tc.repoGetByIDErr
				},
			}

			projectSvc := inventory.NewProjectService(repo, nil, nil, nil, inventory.ProjectWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			project, err := projectSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDProject, project)
		})
	}
}

func TestProjectService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                             string
		serverSvcGetByIDServer           provisioning.Server
		serverSvcGetByIDErr              error
		projectClientGetProjectByName    incusapi.Project
		projectClientGetProjectByNameErr error
		repoGetByIDProject               inventory.Project
		repoGetByIDErr                   error
		repoUpdateByIDErr                error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDProject: inventory.Project{
				ID:       1,
				ServerID: 1,
				Name:     "one",
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjectByName: incusapi.Project{
				Name: "project one",
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - project get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server get by ID",
			repoGetByIDProject: inventory.Project{
				ID:       1,
				ServerID: 1,
				Name:     "one",
			},
			serverSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - project get by name",
			repoGetByIDProject: inventory.Project{
				ID:       1,
				ServerID: 1,
				Name:     "one",
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjectByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDProject: inventory.Project{
				ID:       1,
				ServerID: 1,
				Name:     "", // invalid
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjectByName: incusapi.Project{
				Name: "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDProject: inventory.Project{
				ID:       1,
				ServerID: 1,
				Name:     "one",
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjectByName: incusapi.Project{
				Name: "project one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProjectRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Project, error) {
					return tc.repoGetByIDProject, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, project inventory.Project) (inventory.Project, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), project.LastUpdated)
					return inventory.Project{}, tc.repoUpdateByIDErr
				},
			}

			serverSvc := &serviceMock.ServerServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
					require.Equal(t, 1, id)
					return tc.serverSvcGetByIDServer, tc.serverSvcGetByIDErr
				},
			}

			projectClient := &serverMock.ProjectServerClientMock{
				GetProjectByNameFunc: func(ctx context.Context, connectionURL string, projectName string) (incusapi.Project, error) {
					require.Equal(t, tc.repoGetByIDProject.Name, projectName)
					return tc.projectClientGetProjectByName, tc.projectClientGetProjectByNameErr
				},
			}

			projectSvc := inventory.NewProjectService(repo, nil, serverSvc, projectClient, inventory.ProjectWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := projectSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestProjectService_SyncAll(t *testing.T) {
	// Includes also SyncCluster and SyncServer
	tests := []struct {
		name                              string
		clusterSvcGetAllClusters          provisioning.Clusters
		clusterSvcGetAllErr               error
		serverSvcGetAllByClusterIDServers provisioning.Servers
		serverSvcGetAllByClusterIDErr     error
		serverSvcGetByIDServer            provisioning.Server
		serverSvcGetByIDErr               error
		projectClientGetProjects          []incusapi.Project
		projectClientGetProjectsErr       error
		repoDeleteByServerIDErr           error
		repoCreateErr                     error
		serviceOptions                    []inventory.ProjectServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjects: []incusapi.Project{
				{
					Name: "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                "error - cluster service get all",
			clusterSvcGetAllErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server service get all by cluster ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server service get by ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - project client get Projects",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjectsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - projects delete by server ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjects: []incusapi.Project{
				{
					Name: "project one",
				},
			},
			repoDeleteByServerIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjects: []incusapi.Project{
				{
					Name: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - project create",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			projectClientGetProjects: []incusapi.Project{
				{
					Name: "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProjectRepoMock{
				DeleteByServerIDFunc: func(ctx context.Context, serverID int) error {
					return tc.repoDeleteByServerIDErr
				},
				CreateFunc: func(ctx context.Context, project inventory.Project) (inventory.Project, error) {
					return inventory.Project{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ClusterServiceMock{
				GetAllFunc: func(ctx context.Context) (provisioning.Clusters, error) {
					return tc.clusterSvcGetAllClusters, tc.clusterSvcGetAllErr
				},
			}

			serverSvc := &serviceMock.ServerServiceMock{
				GetAllByClusterIDFunc: func(ctx context.Context, clusterID int) (provisioning.Servers, error) {
					return tc.serverSvcGetAllByClusterIDServers, tc.serverSvcGetAllByClusterIDErr
				},
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
					return tc.serverSvcGetByIDServer, tc.serverSvcGetByIDErr
				},
			}

			projectClient := &serverMock.ProjectServerClientMock{
				GetProjectsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Project, error) {
					return tc.projectClientGetProjects, tc.projectClientGetProjectsErr
				},
			}

			projectSvc := inventory.NewProjectService(repo, clusterSvc, serverSvc, projectClient,
				append(
					tc.serviceOptions,
					inventory.ProjectWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := projectSvc.SyncAll(context.Background())

			// Assert
			tc.assertErr(t, err)
		})
	}
}
