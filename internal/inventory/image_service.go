// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type imageService struct {
	repo        ImageRepo
	clusterSvc  ProvisioningClusterService
	imageClient ImageServerClient

	now func() time.Time
}

var _ ImageService = &imageService{}

type ImageServiceOption func(s *imageService)

func NewImageService(repo ImageRepo, clusterSvc ProvisioningClusterService, client ImageServerClient, opts ...ImageServiceOption) imageService {
	imageSvc := imageService{
		repo:        repo,
		clusterSvc:  clusterSvc,
		imageClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&imageSvc)
	}

	return imageSvc
}

func (s imageService) GetAllIDsWithFilter(ctx context.Context, filter ImageFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s imageService) GetByID(ctx context.Context, id int) (Image, error) {
	return s.repo.GetByID(ctx, id)
}

func (s imageService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		image, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, image.Cluster)
		if err != nil {
			return err
		}

		retrievedImage, err := s.imageClient.GetImageByName(ctx, cluster.ConnectionURL, image.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, image.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		image.ProjectName = retrievedImage.Project
		image.Object = retrievedImage
		image.LastUpdated = s.now()

		err = image.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, image)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s imageService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedImages, err := s.imageClient.GetImages(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedImage := range retrievedImages {
			image := Image{
				Cluster:     name,
				ProjectName: retrievedImage.Project,
				Name:        retrievedImage.Filename,
				Object:      retrievedImage,
				LastUpdated: s.now(),
			}

			err = image.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, image)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
