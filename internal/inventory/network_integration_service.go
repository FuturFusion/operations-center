// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkIntegrationService struct {
	repo                     NetworkIntegrationRepo
	clusterSvc               ClusterService
	serverSvc                ServerService
	networkIntegrationClient NetworkIntegrationServerClient

	now func() time.Time
}

var _ NetworkIntegrationService = &networkIntegrationService{}

type NetworkIntegrationServiceOption func(s *networkIntegrationService)

func NewNetworkIntegrationService(repo NetworkIntegrationRepo, clusterSvc ClusterService, serverSvc ServerService, client NetworkIntegrationServerClient, opts ...NetworkIntegrationServiceOption) networkIntegrationService {
	networkIntegrationSvc := networkIntegrationService{
		repo:                     repo,
		clusterSvc:               clusterSvc,
		serverSvc:                serverSvc,
		networkIntegrationClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkIntegrationSvc)
	}

	return networkIntegrationSvc
}

func (s networkIntegrationService) GetAllIDsWithFilter(ctx context.Context, filter NetworkIntegrationFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s networkIntegrationService) GetByID(ctx context.Context, id int) (NetworkIntegration, error) {
	return s.repo.GetByID(ctx, id)
}

func (s networkIntegrationService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkIntegration, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		server, err := s.serverSvc.GetByID(ctx, networkIntegration.ServerID)
		if err != nil {
			return err
		}

		serverNetworkIntegration, err := s.networkIntegrationClient.GetNetworkIntegrationByName(ctx, server.ConnectionURL, networkIntegration.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, networkIntegration.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkIntegration.Object = serverNetworkIntegration
		networkIntegration.LastUpdated = s.now()

		err = networkIntegration.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, networkIntegration)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkIntegrationService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s networkIntegrationService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s networkIntegrationService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	serverNetworkIntegrations, err := s.networkIntegrationClient.GetNetworkIntegrations(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByServerID(ctx, serverID)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, serverNetworkIntegration := range serverNetworkIntegrations {
			networkIntegration := NetworkIntegration{
				ClusterID:   server.ClusterID,
				ServerID:    serverID,
				Name:        serverNetworkIntegration.Name,
				Object:      serverNetworkIntegration,
				LastUpdated: s.now(),
			}

			err = networkIntegration.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, networkIntegration)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
