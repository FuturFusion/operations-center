// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type storagePoolService struct {
	repo              StoragePoolRepo
	clusterSvc        ProvisioningClusterService
	storagePoolClient StoragePoolServerClient

	clusterSyncFilterFunc func(storagePool StoragePool) bool

	now func() time.Time
}

var _ StoragePoolService = &storagePoolService{}

type StoragePoolServiceOption func(s *storagePoolService)

func StoragePoolWithSyncFilter(clusterSyncFilterFunc func(storagePool StoragePool) bool) StoragePoolServiceOption {
	return func(s *storagePoolService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewStoragePoolService(repo StoragePoolRepo, clusterSvc ProvisioningClusterService, client StoragePoolServerClient, opts ...StoragePoolServiceOption) storagePoolService {
	storagePoolSvc := storagePoolService{
		repo:              repo,
		clusterSvc:        clusterSvc,
		storagePoolClient: client,

		clusterSyncFilterFunc: func(storagePool StoragePool) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&storagePoolSvc)
	}

	return storagePoolSvc
}

func (s storagePoolService) GetAllWithFilter(ctx context.Context, filter StoragePoolFilter) (StoragePools, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(StoragePool{})}...)
		if err != nil {
			return nil, err
		}
	}

	storagePools, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredStoragePools StoragePools
	if filter.Expression != nil {
		for _, storagePool := range storagePools {
			output, err := expr.Run(filterExpression, storagePool)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredStoragePools = append(filteredStoragePools, storagePool)
			}
		}

		return filteredStoragePools, nil
	}

	return storagePools, nil
}

func (s storagePoolService) GetAllUUIDsWithFilter(ctx context.Context, filter StoragePoolFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	storagePoolsUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredStoragePoolsUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, storagePoolUUID := range storagePoolsUUIDs {
			output, err := expr.Run(filterExpression, Env{storagePoolUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredStoragePoolsUUIDs = append(filteredStoragePoolsUUIDs, storagePoolUUID)
			}
		}

		return filteredStoragePoolsUUIDs, nil
	}

	return storagePoolsUUIDs, nil
}

func (s storagePoolService) GetByUUID(ctx context.Context, id uuid.UUID) (StoragePool, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s storagePoolService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		storagePool, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		endpoint, err := s.clusterSvc.GetEndpoint(ctx, storagePool.Cluster)
		if err != nil {
			return err
		}

		retrievedStoragePool, err := s.storagePoolClient.GetStoragePoolByName(ctx, endpoint, storagePool.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, storagePool.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		storagePool.Object = retrievedStoragePool
		storagePool.LastUpdated = s.now()
		storagePool.DeriveUUID()

		err = storagePool.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, storagePool)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s storagePoolService) ResyncByName(ctx context.Context, clusterName string, event domain.LifecycleEvent) error {
	if event.ResourceType != "storage-pool" {
		return nil
	}

	UUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, StoragePoolFilter{
		Cluster: &clusterName,
		Name:    &event.Source.Name,
	})
	if err != nil {
		return err
	}

	if len(UUIDs) == 0 {
		// This inventory is not found, try to fetch it from source and create it.
		endpoint, err := s.clusterSvc.GetEndpoint(ctx, clusterName)
		if err != nil {
			return err
		}

		retrievedStoragePool, err := s.storagePoolClient.GetStoragePoolByName(ctx, endpoint, event.Source.Name)
		if err != nil {
			return err
		}

		storagePool := StoragePool{
			Cluster:     clusterName,
			Name:        retrievedStoragePool.Name,
			Object:      retrievedStoragePool,
			LastUpdated: s.now(),
		}

		storagePool.DeriveUUID()

		if s.clusterSyncFilterFunc(storagePool) {
			return nil
		}

		err = storagePool.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.Create(ctx, storagePool)
		if err != nil {
			return err
		}

		return nil
	}

	var errs []error
	for _, UUID := range UUIDs {
		err := s.ResyncByUUID(ctx, UUID)
		errs = append(errs, err)
	}

	err = errors.Join(errs...)
	if err != nil {
		return fmt.Errorf("Failed to resync instance by name: %w", errors.Join(errs...))
	}

	return nil
}

func (s storagePoolService) SyncCluster(ctx context.Context, name string) error {
	endpoint, err := s.clusterSvc.GetEndpoint(ctx, name)
	if err != nil {
		return err
	}

	retrievedStoragePools, err := s.storagePoolClient.GetStoragePools(ctx, endpoint)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedStoragePool := range retrievedStoragePools {
			storagePool := StoragePool{
				Cluster:     name,
				Name:        retrievedStoragePool.Name,
				Object:      retrievedStoragePool,
				LastUpdated: s.now(),
			}

			storagePool.DeriveUUID()

			if s.clusterSyncFilterFunc(storagePool) {
				continue
			}

			err = storagePool.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, storagePool)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
