// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type profileService struct {
	repo          ProfileRepo
	clusterSvc    ClusterService
	serverSvc     ServerService
	profileClient ProfileServerClient

	now func() time.Time
}

var _ ProfileService = &profileService{}

type ProfileServiceOption func(s *profileService)

func NewProfileService(repo ProfileRepo, clusterSvc ClusterService, serverSvc ServerService, client ProfileServerClient, opts ...ProfileServiceOption) profileService {
	profileSvc := profileService{
		repo:          repo,
		clusterSvc:    clusterSvc,
		serverSvc:     serverSvc,
		profileClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&profileSvc)
	}

	return profileSvc
}

func (s profileService) GetAllIDsWithFilter(ctx context.Context, filter ProfileFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s profileService) GetByID(ctx context.Context, id int) (Profile, error) {
	return s.repo.GetByID(ctx, id)
}

func (s profileService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		profile, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		server, err := s.serverSvc.GetByID(ctx, profile.ServerID)
		if err != nil {
			return err
		}

		serverProfile, err := s.profileClient.GetProfileByName(ctx, server.ConnectionURL, profile.Name)
		// FIXME: how to differentiate general errors from "not found" errors?
		// TODO: if the Profile is not found, it needs to be removed from the inventory.
		if err != nil {
			return err
		}

		profile.ProjectName = serverProfile.Project
		profile.Object = serverProfile
		profile.LastUpdated = s.now()

		err = profile.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, profile)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s profileService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s profileService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s profileService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	serverProfiles, err := s.profileClient.GetProfiles(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByServerID(ctx, serverID)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, serverProfile := range serverProfiles {
			profile := Profile{
				ClusterID:   server.ClusterID,
				ServerID:    serverID,
				ProjectName: serverProfile.Project,
				Name:        serverProfile.Name,
				Object:      serverProfile,
				LastUpdated: s.now(),
			}

			err = profile.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, profile)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
