// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type profileService struct {
	repo          ProfileRepo
	clusterSvc    ProvisioningClusterService
	profileClient ProfileServerClient

	now func() time.Time
}

var _ ProfileService = &profileService{}

type ProfileServiceOption func(s *profileService)

func NewProfileService(repo ProfileRepo, clusterSvc ProvisioningClusterService, client ProfileServerClient, opts ...ProfileServiceOption) profileService {
	profileSvc := profileService{
		repo:          repo,
		clusterSvc:    clusterSvc,
		profileClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&profileSvc)
	}

	return profileSvc
}

func (s profileService) GetAllIDsWithFilter(ctx context.Context, filter ProfileFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s profileService) GetByID(ctx context.Context, id int) (Profile, error) {
	return s.repo.GetByID(ctx, id)
}

func (s profileService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		profile, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, profile.Cluster)
		if err != nil {
			return err
		}

		retrievedProfile, err := s.profileClient.GetProfileByName(ctx, cluster.ConnectionURL, profile.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, profile.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		profile.ProjectName = retrievedProfile.Project
		profile.Object = retrievedProfile
		profile.LastUpdated = s.now()

		err = profile.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, profile)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s profileService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedProfiles, err := s.profileClient.GetProfiles(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedProfile := range retrievedProfiles {
			profile := Profile{
				Cluster:     name,
				ProjectName: retrievedProfile.Project,
				Name:        retrievedProfile.Name,
				Object:      retrievedProfile,
				LastUpdated: s.now(),
			}

			err = profile.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, profile)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
