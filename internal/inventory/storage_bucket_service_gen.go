// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type storageBucketService struct {
	repo                StorageBucketRepo
	clusterSvc          ProvisioningClusterService
	storagePoolClient   StoragePoolServerClient
	storageBucketClient StorageBucketServerClient
	isParentFiltered    func(incusapi.StoragePool) bool

	clusterSyncFilterFunc func(storageBucket StorageBucket) bool

	now func() time.Time
}

var _ StorageBucketService = &storageBucketService{}

type StorageBucketServiceOption func(s *storageBucketService)

func StorageBucketWithSyncFilter(clusterSyncFilterFunc func(storageBucket StorageBucket) bool) StorageBucketServiceOption {
	return func(s *storageBucketService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func StorageBucketWithParentFilter(f func(incusapi.StoragePool) bool) StorageBucketServiceOption {
	return func(s *storageBucketService) {
		s.isParentFiltered = f
	}
}

func NewStorageBucketService(repo StorageBucketRepo, clusterSvc ProvisioningClusterService, client StorageBucketServerClient, parentClient StoragePoolServerClient, opts ...StorageBucketServiceOption) storageBucketService {
	storageBucketSvc := storageBucketService{
		repo:                repo,
		clusterSvc:          clusterSvc,
		storagePoolClient:   parentClient,
		storageBucketClient: client,

		clusterSyncFilterFunc: func(storageBucket StorageBucket) bool {
			return false
		},

		isParentFiltered: func(_ incusapi.StoragePool) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&storageBucketSvc)
	}

	return storageBucketSvc
}

func (s storageBucketService) GetAllWithFilter(ctx context.Context, filter StorageBucketFilter) (StorageBuckets, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(StorageBucket{})}...)
		if err != nil {
			return nil, err
		}
	}

	storageBuckets, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredStorageBuckets StorageBuckets
	if filter.Expression != nil {
		for _, storageBucket := range storageBuckets {
			output, err := expr.Run(filterExpression, storageBucket)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredStorageBuckets = append(filteredStorageBuckets, storageBucket)
			}
		}

		return filteredStorageBuckets, nil
	}

	return storageBuckets, nil
}

func (s storageBucketService) GetAllUUIDsWithFilter(ctx context.Context, filter StorageBucketFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	storageBucketsUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredStorageBucketsUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, storageBucketUUID := range storageBucketsUUIDs {
			output, err := expr.Run(filterExpression, Env{storageBucketUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredStorageBucketsUUIDs = append(filteredStorageBucketsUUIDs, storageBucketUUID)
			}
		}

		return filteredStorageBucketsUUIDs, nil
	}

	return storageBucketsUUIDs, nil
}

func (s storageBucketService) GetByUUID(ctx context.Context, id uuid.UUID) (StorageBucket, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s storageBucketService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		storageBucket, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		endpoint, err := s.clusterSvc.GetEndpoint(ctx, storageBucket.Cluster)
		if err != nil {
			return err
		}

		retrievedStorageBucket, err := s.storageBucketClient.GetStorageBucketByName(ctx, endpoint, storageBucket.StoragePoolName, storageBucket.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, storageBucket.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		storageBucket.Server = retrievedStorageBucket.Location
		storageBucket.ProjectName = retrievedStorageBucket.Project
		storageBucket.Object = retrievedStorageBucket
		storageBucket.LastUpdated = s.now()
		storageBucket.DeriveUUID()

		err = storageBucket.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, storageBucket)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s storageBucketService) SyncCluster(ctx context.Context, name string) error {
	endpoint, err := s.clusterSvc.GetEndpoint(ctx, name)
	if err != nil {
		return err
	}

	retrievedStoragePools, err := s.storagePoolClient.GetStoragePools(ctx, endpoint)
	if err != nil {
		return err
	}

	for _, storagePool := range retrievedStoragePools {
		if s.isParentFiltered(storagePool) {
			continue
		}

		retrievedStorageBuckets, err := s.storageBucketClient.GetStorageBuckets(ctx, endpoint, storagePool.Name)
		if err != nil {
			return err
		}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			err = s.repo.DeleteByClusterName(ctx, name)
			if err != nil && !errors.Is(err, domain.ErrNotFound) {
				return err
			}

			for _, retrievedStorageBucket := range retrievedStorageBuckets {
				storageBucket := StorageBucket{
					Cluster:         name,
					Server:          retrievedStorageBucket.Location,
					ProjectName:     retrievedStorageBucket.Project,
					StoragePoolName: storagePool.Name,
					Name:            retrievedStorageBucket.Name,
					Object:          retrievedStorageBucket,
					LastUpdated:     s.now(),
				}

				storageBucket.DeriveUUID()

				if s.clusterSyncFilterFunc(storageBucket) {
					continue
				}

				err = storageBucket.Validate()
				if err != nil {
					return err
				}

				_, err := s.repo.Create(ctx, storageBucket)
				if err != nil {
					return err
				}
			}

			return nil
		})
		if err != nil {
			return err
		}
	}

	return nil
}
