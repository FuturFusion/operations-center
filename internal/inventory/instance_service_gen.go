// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type instanceService struct {
	repo           InstanceRepo
	clusterSvc     ProvisioningClusterService
	instanceClient InstanceServerClient

	clusterSyncFilterFunc func(instance Instance) bool

	now func() time.Time
}

var _ InstanceService = &instanceService{}

type InstanceServiceOption func(s *instanceService)

func InstanceWithSyncFilter(clusterSyncFilterFunc func(instance Instance) bool) InstanceServiceOption {
	return func(s *instanceService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewInstanceService(repo InstanceRepo, clusterSvc ProvisioningClusterService, client InstanceServerClient, opts ...InstanceServiceOption) instanceService {
	instanceSvc := instanceService{
		repo:           repo,
		clusterSvc:     clusterSvc,
		instanceClient: client,

		clusterSyncFilterFunc: func(instance Instance) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&instanceSvc)
	}

	return instanceSvc
}

func (s instanceService) GetAllWithFilter(ctx context.Context, filter InstanceFilter) (Instances, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Instance{})}...)
		if err != nil {
			return nil, err
		}
	}

	instances, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredInstances Instances
	if filter.Expression != nil {
		for _, instance := range instances {
			output, err := expr.Run(filterExpression, instance)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredInstances = append(filteredInstances, instance)
			}
		}

		return filteredInstances, nil
	}

	return instances, nil
}

func (s instanceService) GetAllUUIDsWithFilter(ctx context.Context, filter InstanceFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	instancesUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredInstancesUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, instanceUUID := range instancesUUIDs {
			output, err := expr.Run(filterExpression, Env{instanceUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredInstancesUUIDs = append(filteredInstancesUUIDs, instanceUUID)
			}
		}

		return filteredInstancesUUIDs, nil
	}

	return instancesUUIDs, nil
}

func (s instanceService) GetByUUID(ctx context.Context, id uuid.UUID) (Instance, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s instanceService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		instance, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, instance.Cluster)
		if err != nil {
			return err
		}

		retrievedInstance, err := s.instanceClient.GetInstanceByName(ctx, cluster.ConnectionURL, instance.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, instance.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		instance.Server = retrievedInstance.Location
		instance.ProjectName = retrievedInstance.Project
		instance.Object = retrievedInstance
		instance.LastUpdated = s.now()
		instance.DeriveUUID()

		err = instance.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, instance)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s instanceService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedInstances, err := s.instanceClient.GetInstances(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedInstance := range retrievedInstances {
			instance := Instance{
				Cluster:     name,
				Server:      retrievedInstance.Location,
				ProjectName: retrievedInstance.Project,
				Name:        retrievedInstance.Name,
				Object:      retrievedInstance,
				LastUpdated: s.now(),
			}

			instance.DeriveUUID()

			if s.clusterSyncFilterFunc(instance) {
				continue
			}

			err = instance.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, instance)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
