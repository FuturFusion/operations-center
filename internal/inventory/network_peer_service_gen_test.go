// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestNetworkPeerService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.NetworkPeers
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.NetworkPeers{
				inventory.NetworkPeer{
					Name: "one",
				},
				inventory.NetworkPeer{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.NetworkPeers{
				inventory.NetworkPeer{
					Name: "one",
				},
				inventory.NetworkPeer{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.NetworkPeers{
				inventory.NetworkPeer{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.NetworkPeers{
				inventory.NetworkPeer{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.NetworkPeers{
				inventory.NetworkPeer{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, i ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.NetworkPeerFilter) (inventory.NetworkPeers, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, nil, nil, nil, inventory.NetworkPeerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkPeer, err := networkPeerSvc.GetAllWithFilter(context.Background(), inventory.NetworkPeerFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkPeer, tc.count)
		})
	}
}

func TestNetworkPeerService_GetAllUUIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                         string
		filterExpression             *string
		repoGetAllUUIDsWithFilter    []uuid.UUID
		repoGetAllUUIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`UUID == "6c652183-8d93-4c7d-9510-cd2ae54f31fd"`),
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: func(tt require.TestingT, err error, i ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                         "error - repo",
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkPeerFilter) ([]uuid.UUID, error) {
					return tc.repoGetAllUUIDsWithFilter, tc.repoGetAllUUIDsWithFilterErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, nil, nil, nil, inventory.NetworkPeerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkPeerUUIDs, err := networkPeerSvc.GetAllUUIDsWithFilter(context.Background(), inventory.NetworkPeerFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkPeerUUIDs, tc.count)
		})
	}
}

func TestNetworkPeerService_GetByUUID(t *testing.T) {
	tests := []struct {
		name                     string
		idArg                    uuid.UUID
		repoGetByUUIDNetworkPeer inventory.NetworkPeer
		repoGetByUUIDErr         error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDNetworkPeer: inventory.NetworkPeer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				NetworkName: "parent one",
				Name:        "one",
				Object:      incusapi.NetworkPeer{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:             "error - repo",
			idArg:            uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkPeer, error) {
					return tc.repoGetByUUIDNetworkPeer, tc.repoGetByUUIDErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, nil, nil, nil, inventory.NetworkPeerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkPeer, err := networkPeerSvc.GetByUUID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByUUIDNetworkPeer, networkPeer)
		})
	}
}

func TestNetworkPeerService_ResyncByUUID(t *testing.T) {
	tests := []struct {
		name                                     string
		clusterSvcGetByIDCluster                 provisioning.Cluster
		clusterSvcGetByIDErr                     error
		networkPeerClientGetNetworkPeerByName    incusapi.NetworkPeer
		networkPeerClientGetNetworkPeerByNameErr error
		repoGetByUUIDNetworkPeer                 inventory.NetworkPeer
		repoGetByUUIDErr                         error
		repoUpdateByUUIDErr                      error
		repoDeleteByUUIDErr                      error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByUUIDNetworkPeer: inventory.NetworkPeer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByName: incusapi.NetworkPeer{
				Name: "networkPeer one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - networkPeer get by name - not found",
			repoGetByUUIDNetworkPeer: inventory.NetworkPeer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:             "error - networkPeer get by UUID",
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByUUIDNetworkPeer: inventory.NetworkPeer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkPeer get by name",
			repoGetByUUIDNetworkPeer: inventory.NetworkPeer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkPeer get by name - not found - delete by uuid",
			repoGetByUUIDNetworkPeer: inventory.NetworkPeer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByNameErr: domain.ErrNotFound,
			repoDeleteByUUIDErr:                      boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByUUIDNetworkPeer: inventory.NetworkPeer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "", // invalid
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByName: incusapi.NetworkPeer{
				Name: "networkPeer one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by UUID",
			repoGetByUUIDNetworkPeer: inventory.NetworkPeer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByName: incusapi.NetworkPeer{
				Name: "networkPeer one",
			},
			repoUpdateByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkPeer, error) {
					return tc.repoGetByUUIDNetworkPeer, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkPeer.LastUpdated)
					return inventory.NetworkPeer{}, tc.repoUpdateByUUIDErr
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return tc.repoDeleteByUUIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkPeerClient := &serverMock.NetworkPeerServerClientMock{
				GetNetworkPeerByNameFunc: func(ctx context.Context, connectionURL string, networkName string, networkPeerName string) (incusapi.NetworkPeer, error) {
					require.Equal(t, tc.repoGetByUUIDNetworkPeer.Name, networkPeerName)
					require.Equal(t, "network", networkName)
					return tc.networkPeerClientGetNetworkPeerByName, tc.networkPeerClientGetNetworkPeerByNameErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, clusterSvc, networkPeerClient, nil, inventory.NetworkPeerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkPeerSvc.ResyncByUUID(context.Background(), uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`))

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkPeerService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                string
		clusterSvcGetByIDCluster            provisioning.Cluster
		clusterSvcGetByIDErr                error
		networkClientGetNetworks            []incusapi.Network
		networkClientGetNetworksErr         error
		networkPeerClientGetNetworkPeers    []incusapi.NetworkPeer
		networkPeerClientGetNetworkPeersErr error
		repoDeleteByClusterNameErr          error
		repoCreateErr                       error
		serviceOptions                      []inventory.NetworkPeerServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "networkPeer one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with parent filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
				{
					Name: "filtered",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "networkPeer one",
				},
			},
			serviceOptions: []inventory.NetworkPeerServiceOption{
				inventory.NetworkPeerWithParentFilter(func(parent incusapi.Network) bool {
					return parent.Name == "filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "networkPeer one",
				},
				{
					Name: "networkPeer filtered",
				},
			},
			serviceOptions: []inventory.NetworkPeerServiceOption{
				inventory.NetworkPeerWithSyncFilter(func(networkPeer inventory.NetworkPeer) bool {
					return networkPeer.Name == "networkPeer filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network client get Networks",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworksErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkPeer client get NetworkPeers",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeersErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_peers delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "networkPeer one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkPeer create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "networkPeer one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
					return inventory.NetworkPeer{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkClient := &serverMock.NetworkServerClientMock{
				GetNetworksFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
					return tc.networkClientGetNetworks, tc.networkClientGetNetworksErr
				},
			}

			networkPeerClient := &serverMock.NetworkPeerServerClientMock{
				GetNetworkPeersFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkPeer, error) {
					return tc.networkPeerClientGetNetworkPeers, tc.networkPeerClientGetNetworkPeersErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, clusterSvc, networkPeerClient, networkClient,
				append(
					tc.serviceOptions,
					inventory.NetworkPeerWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkPeerSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
