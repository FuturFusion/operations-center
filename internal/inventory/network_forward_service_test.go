// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestNetworkForwardService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.NetworkForwards
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.NetworkForwards{
				inventory.NetworkForward{
					Name: "one",
				},
				inventory.NetworkForward{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.NetworkForwards{
				inventory.NetworkForward{
					Name: "one",
				},
				inventory.NetworkForward{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.NetworkForwards{
				inventory.NetworkForward{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.NetworkForwards{
				inventory.NetworkForward{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.NetworkForwards{
				inventory.NetworkForward{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, i ...interface{}) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkForwardRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.NetworkForwardFilter) (inventory.NetworkForwards, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			networkForwardSvc := inventory.NewNetworkForwardService(repo, nil, nil, nil, inventory.NetworkForwardWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkForward, err := networkForwardSvc.GetAllWithFilter(context.Background(), inventory.NetworkForwardFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkForward, tc.count)
		})
	}
}

func TestNetworkForwardService_GetAllIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                       string
		filterExpression           *string
		repoGetAllIDsWithFilter    []int
		repoGetAllIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllIDsWithFilter: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`ID < 2`),
			repoGetAllIDsWithFilter: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllIDsWithFilter: []int{
				1,
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllIDsWithFilter: []int{
				1,
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllIDsWithFilter: []int{
				1,
			},

			assertErr: func(tt require.TestingT, err error, i ...interface{}) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                       "error - repo",
			repoGetAllIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkForwardRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkForwardFilter) ([]int, error) {
					return tc.repoGetAllIDsWithFilter, tc.repoGetAllIDsWithFilterErr
				},
			}

			networkForwardSvc := inventory.NewNetworkForwardService(repo, nil, nil, nil, inventory.NetworkForwardWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkForwardIDs, err := networkForwardSvc.GetAllIDsWithFilter(context.Background(), inventory.NetworkForwardFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkForwardIDs, tc.count)
		})
	}
}

func TestNetworkForwardService_GetByID(t *testing.T) {
	tests := []struct {
		name                      string
		idArg                     int
		repoGetByIDNetworkForward inventory.NetworkForward
		repoGetByIDErr            error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDNetworkForward: inventory.NetworkForward{
				ID:          1,
				Cluster:     "one",
				NetworkName: "parent one",
				Name:        "one",
				Object:      incusapi.NetworkForward{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkForwardRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkForward, error) {
					return tc.repoGetByIDNetworkForward, tc.repoGetByIDErr
				},
			}

			networkForwardSvc := inventory.NewNetworkForwardService(repo, nil, nil, nil, inventory.NetworkForwardWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkForward, err := networkForwardSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDNetworkForward, networkForward)
		})
	}
}

func TestNetworkForwardService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                                           string
		clusterSvcGetByIDCluster                       provisioning.Cluster
		clusterSvcGetByIDErr                           error
		networkForwardClientGetNetworkForwardByName    incusapi.NetworkForward
		networkForwardClientGetNetworkForwardByNameErr error
		repoGetByIDNetworkForward                      inventory.NetworkForward
		repoGetByIDErr                                 error
		repoUpdateByIDErr                              error
		repoDeleteByIDErr                              error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDNetworkForward: inventory.NetworkForward{
				ID:          1,
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkForwardClientGetNetworkForwardByName: incusapi.NetworkForward{
				ListenAddress: "networkForward one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - networkForward get by name - not found",
			repoGetByIDNetworkForward: inventory.NetworkForward{
				ID:          1,
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkForwardClientGetNetworkForwardByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - networkForward get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDNetworkForward: inventory.NetworkForward{
				ID:          1,
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkForward get by name",
			repoGetByIDNetworkForward: inventory.NetworkForward{
				ID:          1,
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkForwardClientGetNetworkForwardByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkForward get by name - not found - delete by id",
			repoGetByIDNetworkForward: inventory.NetworkForward{
				ID:          1,
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkForwardClientGetNetworkForwardByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDNetworkForward: inventory.NetworkForward{
				ID:          1,
				Cluster:     "one",
				Name:        "", // invalid
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkForwardClientGetNetworkForwardByName: incusapi.NetworkForward{
				ListenAddress: "networkForward one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDNetworkForward: inventory.NetworkForward{
				ID:          1,
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkForwardClientGetNetworkForwardByName: incusapi.NetworkForward{
				ListenAddress: "networkForward one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkForwardRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkForward, error) {
					return tc.repoGetByIDNetworkForward, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, networkForward inventory.NetworkForward) (inventory.NetworkForward, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkForward.LastUpdated)
					return inventory.NetworkForward{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkForwardClient := &serverMock.NetworkForwardServerClientMock{
				GetNetworkForwardByNameFunc: func(ctx context.Context, connectionURL string, networkName string, networkForwardName string) (incusapi.NetworkForward, error) {
					require.Equal(t, tc.repoGetByIDNetworkForward.Name, networkForwardName)
					require.Equal(t, "network", networkName)
					return tc.networkForwardClientGetNetworkForwardByName, tc.networkForwardClientGetNetworkForwardByNameErr
				},
			}

			networkForwardSvc := inventory.NewNetworkForwardService(repo, clusterSvc, networkForwardClient, nil, inventory.NetworkForwardWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkForwardSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkForwardService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                      string
		clusterSvcGetByIDCluster                  provisioning.Cluster
		clusterSvcGetByIDErr                      error
		networkClientGetNetworks                  []incusapi.Network
		networkClientGetNetworksErr               error
		networkForwardClientGetNetworkForwards    []incusapi.NetworkForward
		networkForwardClientGetNetworkForwardsErr error
		repoDeleteByClusterNameErr                error
		repoCreateErr                             error
		serviceOptions                            []inventory.NetworkForwardServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkForwardClientGetNetworkForwards: []incusapi.NetworkForward{
				{
					ListenAddress: "networkForward one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with parent filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
				{
					Name: "filtered",
				},
			},
			networkForwardClientGetNetworkForwards: []incusapi.NetworkForward{
				{
					ListenAddress: "networkForward one",
				},
			},
			serviceOptions: []inventory.NetworkForwardServiceOption{
				inventory.NetworkForwardWithParentFilter(func(parent incusapi.Network) bool {
					return parent.Name == "filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkForwardClientGetNetworkForwards: []incusapi.NetworkForward{
				{
					ListenAddress: "networkForward one",
				},
				{
					ListenAddress: "networkForward filtered",
				},
			},
			serviceOptions: []inventory.NetworkForwardServiceOption{
				inventory.NetworkForwardWithSyncFilter(func(networkForward inventory.NetworkForward) bool {
					return networkForward.Name == "networkForward filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network client get Networks",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworksErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkForward client get NetworkForwards",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkForwardClientGetNetworkForwardsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_forwards delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkForwardClientGetNetworkForwards: []incusapi.NetworkForward{
				{
					ListenAddress: "networkForward one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkForwardClientGetNetworkForwards: []incusapi.NetworkForward{
				{
					ListenAddress: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkForward create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkForwardClientGetNetworkForwards: []incusapi.NetworkForward{
				{
					ListenAddress: "networkForward one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkForwardRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, networkForward inventory.NetworkForward) (inventory.NetworkForward, error) {
					return inventory.NetworkForward{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkClient := &serverMock.NetworkServerClientMock{
				GetNetworksFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
					return tc.networkClientGetNetworks, tc.networkClientGetNetworksErr
				},
			}

			networkForwardClient := &serverMock.NetworkForwardServerClientMock{
				GetNetworkForwardsFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkForward, error) {
					return tc.networkForwardClientGetNetworkForwards, tc.networkForwardClientGetNetworkForwardsErr
				},
			}

			networkForwardSvc := inventory.NewNetworkForwardService(repo, clusterSvc, networkForwardClient, networkClient,
				append(
					tc.serviceOptions,
					inventory.NetworkForwardWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkForwardSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
