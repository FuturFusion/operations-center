// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestNetworkAddressSetService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.NetworkAddressSets
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.NetworkAddressSets{
				inventory.NetworkAddressSet{
					Name: "one",
				},
				inventory.NetworkAddressSet{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.NetworkAddressSets{
				inventory.NetworkAddressSet{
					Name: "one",
				},
				inventory.NetworkAddressSet{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.NetworkAddressSets{
				inventory.NetworkAddressSet{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.NetworkAddressSets{
				inventory.NetworkAddressSet{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.NetworkAddressSets{
				inventory.NetworkAddressSet{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkAddressSetRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.NetworkAddressSetFilter) (inventory.NetworkAddressSets, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			networkAddressSetSvc := inventory.NewNetworkAddressSetService(repo, nil, nil, inventory.NetworkAddressSetWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkAddressSet, err := networkAddressSetSvc.GetAllWithFilter(context.Background(), inventory.NetworkAddressSetFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkAddressSet, tc.count)
		})
	}
}

func TestNetworkAddressSetService_GetAllUUIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                         string
		filterExpression             *string
		repoGetAllUUIDsWithFilter    []uuid.UUID
		repoGetAllUUIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`UUID == "6c652183-8d93-4c7d-9510-cd2ae54f31fd"`),
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                         "error - repo",
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkAddressSetRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkAddressSetFilter) ([]uuid.UUID, error) {
					return tc.repoGetAllUUIDsWithFilter, tc.repoGetAllUUIDsWithFilterErr
				},
			}

			networkAddressSetSvc := inventory.NewNetworkAddressSetService(repo, nil, nil, inventory.NetworkAddressSetWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkAddressSetUUIDs, err := networkAddressSetSvc.GetAllUUIDsWithFilter(context.Background(), inventory.NetworkAddressSetFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkAddressSetUUIDs, tc.count)
		})
	}
}

func TestNetworkAddressSetService_GetByUUID(t *testing.T) {
	tests := []struct {
		name                           string
		idArg                          uuid.UUID
		repoGetByUUIDNetworkAddressSet inventory.NetworkAddressSet
		repoGetByUUIDErr               error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDNetworkAddressSet: inventory.NetworkAddressSet{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.NetworkAddressSet{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:             "error - repo",
			idArg:            uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkAddressSetRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkAddressSet, error) {
					return tc.repoGetByUUIDNetworkAddressSet, tc.repoGetByUUIDErr
				},
			}

			networkAddressSetSvc := inventory.NewNetworkAddressSetService(repo, nil, nil, inventory.NetworkAddressSetWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkAddressSet, err := networkAddressSetSvc.GetByUUID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByUUIDNetworkAddressSet, networkAddressSet)
		})
	}
}

func TestNetworkAddressSetService_ResyncByUUID(t *testing.T) {
	tests := []struct {
		name                                                 string
		clusterSvcGetEndpoint                                provisioning.Endpoint
		clusterSvcGetEndpointErr                             error
		networkAddressSetClientGetNetworkAddressSetByName    incusapi.NetworkAddressSet
		networkAddressSetClientGetNetworkAddressSetByNameErr error
		repoGetByUUIDNetworkAddressSet                       inventory.NetworkAddressSet
		repoGetByUUIDErr                                     error
		repoUpdateByUUIDErr                                  error
		repoDeleteByUUIDErr                                  error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByUUIDNetworkAddressSet: inventory.NetworkAddressSet{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientGetNetworkAddressSetByName: incusapi.NetworkAddressSet{
				NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
					Name: "networkAddressSet one",
				},
				Project: "project one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - networkAddressSet get by name - not found",
			repoGetByUUIDNetworkAddressSet: inventory.NetworkAddressSet{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientGetNetworkAddressSetByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:             "error - networkAddressSet get by UUID",
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByUUIDNetworkAddressSet: inventory.NetworkAddressSet{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpointErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkAddressSet get by name",
			repoGetByUUIDNetworkAddressSet: inventory.NetworkAddressSet{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientGetNetworkAddressSetByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkAddressSet get by name - not found - delete by uuid",
			repoGetByUUIDNetworkAddressSet: inventory.NetworkAddressSet{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientGetNetworkAddressSetByNameErr: domain.ErrNotFound,
			repoDeleteByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByUUIDNetworkAddressSet: inventory.NetworkAddressSet{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "", // invalid
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientGetNetworkAddressSetByName: incusapi.NetworkAddressSet{
				NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
					Name: "networkAddressSet one",
				},
				Project: "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by UUID",
			repoGetByUUIDNetworkAddressSet: inventory.NetworkAddressSet{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				ProjectName: "project one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientGetNetworkAddressSetByName: incusapi.NetworkAddressSet{
				NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
					Name: "networkAddressSet one",
				},
				Project: "project one",
			},
			repoUpdateByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkAddressSetRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkAddressSet, error) {
					return tc.repoGetByUUIDNetworkAddressSet, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, networkAddressSet inventory.NetworkAddressSet) (inventory.NetworkAddressSet, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkAddressSet.LastUpdated)
					return inventory.NetworkAddressSet{}, tc.repoUpdateByUUIDErr
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return tc.repoDeleteByUUIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					require.Equal(t, "one", name)
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			networkAddressSetClient := &serverMock.NetworkAddressSetServerClientMock{
				GetNetworkAddressSetByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkAddressSetName string) (incusapi.NetworkAddressSet, error) {
					require.Equal(t, tc.repoGetByUUIDNetworkAddressSet.Name, networkAddressSetName)
					require.Equal(t, tc.repoGetByUUIDNetworkAddressSet.ProjectName, projectName)
					return tc.networkAddressSetClientGetNetworkAddressSetByName, tc.networkAddressSetClientGetNetworkAddressSetByNameErr
				},
			}

			networkAddressSetSvc := inventory.NewNetworkAddressSetService(repo, clusterSvc, networkAddressSetClient, inventory.NetworkAddressSetWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkAddressSetSvc.ResyncByUUID(context.Background(), uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`))

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkAddressSetService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                            string
		clusterSvcGetEndpoint                           provisioning.Endpoint
		clusterSvcGetEndpointErr                        error
		networkAddressSetClientHasExtension             bool
		networkAddressSetClientGetNetworkAddressSets    []incusapi.NetworkAddressSet
		networkAddressSetClientGetNetworkAddressSetsErr error
		repoDeleteByClusterNameErr                      error
		repoCreateErr                                   error
		serviceOptions                                  []inventory.NetworkAddressSetServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientHasExtension: true,
			networkAddressSetClientGetNetworkAddressSets: []incusapi.NetworkAddressSet{
				{
					NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
						Name: "networkAddressSet one",
					},
					Project: "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientHasExtension: true,
			networkAddressSetClientGetNetworkAddressSets: []incusapi.NetworkAddressSet{
				{
					NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
						Name: "networkAddressSet one",
					},
					Project: "project one",
				},
				{
					NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
						Name: "networkAddressSet filtered",
					},
					Project: "project one",
				},
			},
			serviceOptions: []inventory.NetworkAddressSetServiceOption{
				inventory.NetworkAddressSetWithSyncFilter(func(networkAddressSet inventory.NetworkAddressSet) bool {
					return networkAddressSet.Name == "networkAddressSet filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name: "success - does not have extension",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientHasExtension: false,

			assertErr: require.NoError,
		},
		{
			name:                     "error - cluster service get by ID",
			clusterSvcGetEndpointErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkAddressSet client get NetworkAddressSets",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientHasExtension:             true,
			networkAddressSetClientGetNetworkAddressSetsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_address_sets delete by cluster ID",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientHasExtension: true,
			networkAddressSetClientGetNetworkAddressSets: []incusapi.NetworkAddressSet{
				{
					NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
						Name: "networkAddressSet one",
					},
					Project: "project one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientHasExtension: true,
			networkAddressSetClientGetNetworkAddressSets: []incusapi.NetworkAddressSet{
				{
					NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
						Name: "", // invalid
					},
					Project: "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkAddressSet create",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			networkAddressSetClientHasExtension: true,
			networkAddressSetClientGetNetworkAddressSets: []incusapi.NetworkAddressSet{
				{
					NetworkAddressSetPost: incusapi.NetworkAddressSetPost{
						Name: "networkAddressSet one",
					},
					Project: "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkAddressSetRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, networkAddressSet inventory.NetworkAddressSet) (inventory.NetworkAddressSet, error) {
					return inventory.NetworkAddressSet{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			networkAddressSetClient := &serverMock.NetworkAddressSetServerClientMock{
				HasExtensionFunc: func(ctx context.Context, endpoint provisioning.Endpoint, extension string) bool {
					return tc.networkAddressSetClientHasExtension
				},
				GetNetworkAddressSetsFunc: func(ctx context.Context, endpoint provisioning.Endpoint) ([]incusapi.NetworkAddressSet, error) {
					return tc.networkAddressSetClientGetNetworkAddressSets, tc.networkAddressSetClientGetNetworkAddressSetsErr
				},
			}

			networkAddressSetSvc := inventory.NewNetworkAddressSetService(repo, clusterSvc, networkAddressSetClient,
				append(
					tc.serviceOptions,
					inventory.NetworkAddressSetWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkAddressSetSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
