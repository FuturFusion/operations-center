// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkPeerService struct {
	repo              NetworkPeerRepo
	clusterSvc        ProvisioningClusterService
	networkClient     NetworkServerClient
	networkPeerClient NetworkPeerServerClient
	isParentFiltered  func(incusapi.Network) bool

	clusterSyncFilterFunc func(networkPeer NetworkPeer) bool

	now func() time.Time
}

var _ NetworkPeerService = &networkPeerService{}

type NetworkPeerServiceOption func(s *networkPeerService)

func NetworkPeerWithSyncFilter(clusterSyncFilterFunc func(networkPeer NetworkPeer) bool) NetworkPeerServiceOption {
	return func(s *networkPeerService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NetworkPeerWithParentFilter(f func(incusapi.Network) bool) NetworkPeerServiceOption {
	return func(s *networkPeerService) {
		s.isParentFiltered = f
	}
}

func NewNetworkPeerService(repo NetworkPeerRepo, clusterSvc ProvisioningClusterService, client NetworkPeerServerClient, parentClient NetworkServerClient, opts ...NetworkPeerServiceOption) networkPeerService {
	networkPeerSvc := networkPeerService{
		repo:              repo,
		clusterSvc:        clusterSvc,
		networkClient:     parentClient,
		networkPeerClient: client,

		clusterSyncFilterFunc: func(networkPeer NetworkPeer) bool {
			return false
		},

		isParentFiltered: func(_ incusapi.Network) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkPeerSvc)
	}

	return networkPeerSvc
}

func (s networkPeerService) GetAllWithFilter(ctx context.Context, filter NetworkPeerFilter) (NetworkPeers, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(NetworkPeer{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkPeers, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkPeers NetworkPeers
	if filter.Expression != nil {
		for _, networkPeer := range networkPeers {
			output, err := expr.Run(filterExpression, networkPeer)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkPeers = append(filteredNetworkPeers, networkPeer)
			}
		}

		return filteredNetworkPeers, nil
	}

	return networkPeers, nil
}

func (s networkPeerService) GetAllUUIDsWithFilter(ctx context.Context, filter NetworkPeerFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkPeersUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkPeersUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, networkPeerUUID := range networkPeersUUIDs {
			output, err := expr.Run(filterExpression, Env{networkPeerUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkPeersUUIDs = append(filteredNetworkPeersUUIDs, networkPeerUUID)
			}
		}

		return filteredNetworkPeersUUIDs, nil
	}

	return networkPeersUUIDs, nil
}

func (s networkPeerService) GetByUUID(ctx context.Context, id uuid.UUID) (NetworkPeer, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s networkPeerService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkPeer, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, networkPeer.Cluster)
		if err != nil {
			return err
		}

		retrievedNetworkPeer, err := s.networkPeerClient.GetNetworkPeerByName(ctx, cluster.ConnectionURL, networkPeer.NetworkName, networkPeer.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, networkPeer.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkPeer.Object = retrievedNetworkPeer
		networkPeer.LastUpdated = s.now()
		networkPeer.DeriveUUID()

		err = networkPeer.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, networkPeer)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkPeerService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedNetworks, err := s.networkClient.GetNetworks(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	for _, network := range retrievedNetworks {
		if s.isParentFiltered(network) {
			continue
		}

		retrievedNetworkPeers, err := s.networkPeerClient.GetNetworkPeers(ctx, cluster.ConnectionURL, network.Name)
		if err != nil {
			return err
		}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			err = s.repo.DeleteByClusterName(ctx, name)
			if err != nil && !errors.Is(err, domain.ErrNotFound) {
				return err
			}

			for _, retrievedNetworkPeer := range retrievedNetworkPeers {
				networkPeer := NetworkPeer{
					Cluster:     name,
					NetworkName: network.Name,
					Name:        retrievedNetworkPeer.Name,
					Object:      retrievedNetworkPeer,
					LastUpdated: s.now(),
				}

				networkPeer.DeriveUUID()

				if s.clusterSyncFilterFunc(networkPeer) {
					continue
				}

				err = networkPeer.Validate()
				if err != nil {
					return err
				}

				_, err := s.repo.Create(ctx, networkPeer)
				if err != nil {
					return err
				}
			}

			return nil
		})
		if err != nil {
			return err
		}
	}

	return nil
}
