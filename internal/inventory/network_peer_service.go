// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkPeerService struct {
	repo              NetworkPeerRepo
	clusterSvc        ClusterService
	serverSvc         ServerService
	networkClient     NetworkServerClient
	networkPeerClient NetworkPeerServerClient

	now func() time.Time
}

var _ NetworkPeerService = &networkPeerService{}

type NetworkPeerServiceOption func(s *networkPeerService)

func NewNetworkPeerService(repo NetworkPeerRepo, clusterSvc ClusterService, serverSvc ServerService, client NetworkPeerServerClient, parentClient NetworkServerClient, opts ...NetworkPeerServiceOption) networkPeerService {
	networkPeerSvc := networkPeerService{
		repo:              repo,
		clusterSvc:        clusterSvc,
		serverSvc:         serverSvc,
		networkClient:     parentClient,
		networkPeerClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkPeerSvc)
	}

	return networkPeerSvc
}

func (s networkPeerService) GetAllIDsWithFilter(ctx context.Context, filter NetworkPeerFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s networkPeerService) GetByID(ctx context.Context, id int) (NetworkPeer, error) {
	return s.repo.GetByID(ctx, id)
}

func (s networkPeerService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkPeer, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		server, err := s.serverSvc.GetByID(ctx, networkPeer.ServerID)
		if err != nil {
			return err
		}

		serverNetworkPeer, err := s.networkPeerClient.GetNetworkPeerByName(ctx, server.ConnectionURL, networkPeer.NetworkName, networkPeer.Name)
		// FIXME: how to differentiate general errors from "not found" errors?
		// TODO: if the NetworkPeer is not found, it needs to be removed from the inventory.
		if err != nil {
			return err
		}

		networkPeer.Object = serverNetworkPeer
		networkPeer.LastUpdated = s.now()

		err = networkPeer.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, networkPeer)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkPeerService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s networkPeerService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s networkPeerService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	serverNetworks, err := s.networkClient.GetNetworks(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	for _, network := range serverNetworks {
		serverNetworkPeers, err := s.networkPeerClient.GetNetworkPeers(ctx, server.ConnectionURL, network.Name)
		if err != nil {
			return err
		}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			err = s.repo.DeleteByServerID(ctx, serverID)
			if err != nil && !errors.Is(err, domain.ErrNotFound) {
				return err
			}

			for _, serverNetworkPeer := range serverNetworkPeers {
				networkPeer := NetworkPeer{
					ClusterID:   server.ClusterID,
					ServerID:    serverID,
					NetworkName: network.Name,
					Name:        serverNetworkPeer.Name,
					Object:      serverNetworkPeer,
					LastUpdated: s.now(),
				}

				err = networkPeer.Validate()
				if err != nil {
					return err
				}

				_, err := s.repo.Create(ctx, networkPeer)
				if err != nil {
					return err
				}
			}

			return nil
		})
		if err != nil {
			return err
		}

	}

	return nil
}
