// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestProfileService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.Profiles
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.Profiles{
				inventory.Profile{
					Name: "one",
				},
				inventory.Profile{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.Profiles{
				inventory.Profile{
					Name: "one",
				},
				inventory.Profile{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.Profiles{
				inventory.Profile{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.Profiles{
				inventory.Profile{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.Profiles{
				inventory.Profile{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, i ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.ProfileFilter) (inventory.Profiles, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, nil, nil, inventory.ProfileWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			profile, err := profileSvc.GetAllWithFilter(context.Background(), inventory.ProfileFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, profile, tc.count)
		})
	}
}

func TestProfileService_GetAllUUIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                         string
		filterExpression             *string
		repoGetAllUUIDsWithFilter    []uuid.UUID
		repoGetAllUUIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`UUID == "6c652183-8d93-4c7d-9510-cd2ae54f31fd"`),
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: func(tt require.TestingT, err error, i ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                         "error - repo",
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.ProfileFilter) ([]uuid.UUID, error) {
					return tc.repoGetAllUUIDsWithFilter, tc.repoGetAllUUIDsWithFilterErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, nil, nil, inventory.ProfileWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			profileUUIDs, err := profileSvc.GetAllUUIDsWithFilter(context.Background(), inventory.ProfileFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, profileUUIDs, tc.count)
		})
	}
}

func TestProfileService_GetByUUID(t *testing.T) {
	tests := []struct {
		name                 string
		idArg                uuid.UUID
		repoGetByUUIDProfile inventory.Profile
		repoGetByUUIDErr     error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDProfile: inventory.Profile{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.Profile{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:             "error - repo",
			idArg:            uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.Profile, error) {
					return tc.repoGetByUUIDProfile, tc.repoGetByUUIDErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, nil, nil, inventory.ProfileWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			profile, err := profileSvc.GetByUUID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByUUIDProfile, profile)
		})
	}
}

func TestProfileService_ResyncByUUID(t *testing.T) {
	tests := []struct {
		name                             string
		clusterSvcGetEndpoint            provisioning.Endpoint
		clusterSvcGetEndpointErr         error
		profileClientGetProfileByName    incusapi.Profile
		profileClientGetProfileByNameErr error
		repoGetByUUIDProfile             inventory.Profile
		repoGetByUUIDErr                 error
		repoUpdateByUUIDErr              error
		repoDeleteByUUIDErr              error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByUUIDProfile: inventory.Profile{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfileByName: incusapi.Profile{
				Name:    "profile one",
				Project: "project one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - profile get by name - not found",
			repoGetByUUIDProfile: inventory.Profile{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfileByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:             "error - profile get by UUID",
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByUUIDProfile: inventory.Profile{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetEndpointErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profile get by name",
			repoGetByUUIDProfile: inventory.Profile{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfileByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profile get by name - not found - delete by uuid",
			repoGetByUUIDProfile: inventory.Profile{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfileByNameErr: domain.ErrNotFound,
			repoDeleteByUUIDErr:              boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByUUIDProfile: inventory.Profile{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "", // invalid
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfileByName: incusapi.Profile{
				Name:    "profile one",
				Project: "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by UUID",
			repoGetByUUIDProfile: inventory.Profile{
				UUID:    uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfileByName: incusapi.Profile{
				Name:    "profile one",
				Project: "project one",
			},
			repoUpdateByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.Profile, error) {
					return tc.repoGetByUUIDProfile, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, profile inventory.Profile) (inventory.Profile, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), profile.LastUpdated)
					return inventory.Profile{}, tc.repoUpdateByUUIDErr
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return tc.repoDeleteByUUIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					require.Equal(t, "one", name)
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			profileClient := &serverMock.ProfileServerClientMock{
				GetProfileByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, profileName string) (incusapi.Profile, error) {
					require.Equal(t, tc.repoGetByUUIDProfile.Name, profileName)
					return tc.profileClientGetProfileByName, tc.profileClientGetProfileByNameErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, clusterSvc, profileClient, inventory.ProfileWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := profileSvc.ResyncByUUID(context.Background(), uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`))

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestProfileService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                        string
		clusterSvcGetEndpoint       provisioning.Endpoint
		clusterSvcGetEndpointErr    error
		profileClientGetProfiles    []incusapi.Profile
		profileClientGetProfilesErr error
		repoDeleteByClusterNameErr  error
		repoCreateErr               error
		serviceOptions              []inventory.ProfileServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "profile one",
					Project: "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "profile one",
					Project: "project one",
				},
				{
					Name:    "profile filtered",
					Project: "project one",
				},
			},
			serviceOptions: []inventory.ProfileServiceOption{
				inventory.ProfileWithSyncFilter(func(profile inventory.Profile) bool {
					return profile.Name == "profile filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                     "error - cluster service get by ID",
			clusterSvcGetEndpointErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profile client get Profiles",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfilesErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profiles delete by cluster ID",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "profile one",
					Project: "project one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "", // invalid
					Project: "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - profile create",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "profile one",
					Project: "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, profile inventory.Profile) (inventory.Profile, error) {
					return inventory.Profile{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			profileClient := &serverMock.ProfileServerClientMock{
				GetProfilesFunc: func(ctx context.Context, endpoint provisioning.Endpoint) ([]incusapi.Profile, error) {
					return tc.profileClientGetProfiles, tc.profileClientGetProfilesErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, clusterSvc, profileClient,
				append(
					tc.serviceOptions,
					inventory.ProfileWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := profileSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
