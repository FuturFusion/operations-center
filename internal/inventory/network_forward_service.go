// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkForwardService struct {
	repo                 NetworkForwardRepo
	clusterSvc           ClusterService
	serverSvc            ServerService
	networkClient        NetworkServerClient
	networkForwardClient NetworkForwardServerClient

	isParentFilted func(incusapi.Network) bool

	now func() time.Time
}

var _ NetworkForwardService = &networkForwardService{}

type NetworkForwardServiceOption func(s *networkForwardService)

func NetworkForwardWithParentFilter(f func(incusapi.Network) bool) NetworkForwardServiceOption {
	return func(s *networkForwardService) {
		s.isParentFilted = f
	}
}

func NewNetworkForwardService(repo NetworkForwardRepo, clusterSvc ClusterService, serverSvc ServerService, client NetworkForwardServerClient, parentClient NetworkServerClient, opts ...NetworkForwardServiceOption) networkForwardService {
	networkForwardSvc := networkForwardService{
		repo:                 repo,
		clusterSvc:           clusterSvc,
		serverSvc:            serverSvc,
		networkClient:        parentClient,
		networkForwardClient: client,

		isParentFilted: func(_ incusapi.Network) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkForwardSvc)
	}

	return networkForwardSvc
}

func (s networkForwardService) GetAllIDsWithFilter(ctx context.Context, filter NetworkForwardFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s networkForwardService) GetByID(ctx context.Context, id int) (NetworkForward, error) {
	return s.repo.GetByID(ctx, id)
}

func (s networkForwardService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkForward, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		server, err := s.serverSvc.GetByID(ctx, networkForward.ServerID)
		if err != nil {
			return err
		}

		serverNetworkForward, err := s.networkForwardClient.GetNetworkForwardByName(ctx, server.ConnectionURL, networkForward.NetworkName, networkForward.Name)
		// FIXME: how to differentiate general errors from "not found" errors?
		// TODO: if the NetworkForward is not found, it needs to be removed from the inventory.
		if err != nil {
			return err
		}

		networkForward.Object = serverNetworkForward
		networkForward.LastUpdated = s.now()

		err = networkForward.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, networkForward)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkForwardService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s networkForwardService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s networkForwardService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	serverNetworks, err := s.networkClient.GetNetworks(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	for _, network := range serverNetworks {
		if s.isParentFilted(network) {
			continue
		}

		serverNetworkForwards, err := s.networkForwardClient.GetNetworkForwards(ctx, server.ConnectionURL, network.Name)
		if err != nil {
			return err
		}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			err = s.repo.DeleteByServerID(ctx, serverID)
			if err != nil && !errors.Is(err, domain.ErrNotFound) {
				return err
			}

			for _, serverNetworkForward := range serverNetworkForwards {
				networkForward := NetworkForward{
					ClusterID:   server.ClusterID,
					ServerID:    serverID,
					NetworkName: network.Name,
					Name:        serverNetworkForward.ListenAddress,
					Object:      serverNetworkForward,
					LastUpdated: s.now(),
				}

				err = networkForward.Validate()
				if err != nil {
					return err
				}

				_, err := s.repo.Create(ctx, networkForward)
				if err != nil {
					return err
				}
			}

			return nil
		})
		if err != nil {
			return err
		}
	}

	return nil
}
