// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that NetworkACLServerClientMock does implement inventory.NetworkACLServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.NetworkACLServerClient = &NetworkACLServerClientMock{}

// NetworkACLServerClientMock is a mock implementation of inventory.NetworkACLServerClient.
//
//	func TestSomethingThatUsesNetworkACLServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkACLServerClient
//		mockedNetworkACLServerClient := &NetworkACLServerClientMock{
//			GetNetworkACLByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkACLName string) (api.NetworkACL, error) {
//				panic("mock out the GetNetworkACLByName method")
//			},
//			GetNetworkACLsFunc: func(ctx context.Context, endpoint provisioning.Endpoint) ([]api.NetworkACL, error) {
//				panic("mock out the GetNetworkACLs method")
//			},
//		}
//
//		// use mockedNetworkACLServerClient in code that requires inventory.NetworkACLServerClient
//		// and then make assertions.
//
//	}
type NetworkACLServerClientMock struct {
	// GetNetworkACLByNameFunc mocks the GetNetworkACLByName method.
	GetNetworkACLByNameFunc func(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkACLName string) (api.NetworkACL, error)

	// GetNetworkACLsFunc mocks the GetNetworkACLs method.
	GetNetworkACLsFunc func(ctx context.Context, endpoint provisioning.Endpoint) ([]api.NetworkACL, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNetworkACLByName holds details about calls to the GetNetworkACLByName method.
		GetNetworkACLByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
			// ProjectName is the projectName argument value.
			ProjectName string
			// NetworkACLName is the networkACLName argument value.
			NetworkACLName string
		}
		// GetNetworkACLs holds details about calls to the GetNetworkACLs method.
		GetNetworkACLs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
		}
	}
	lockGetNetworkACLByName sync.RWMutex
	lockGetNetworkACLs      sync.RWMutex
}

// GetNetworkACLByName calls GetNetworkACLByNameFunc.
func (mock *NetworkACLServerClientMock) GetNetworkACLByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkACLName string) (api.NetworkACL, error) {
	if mock.GetNetworkACLByNameFunc == nil {
		panic("NetworkACLServerClientMock.GetNetworkACLByNameFunc: method is nil but NetworkACLServerClient.GetNetworkACLByName was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Endpoint       provisioning.Endpoint
		ProjectName    string
		NetworkACLName string
	}{
		Ctx:            ctx,
		Endpoint:       endpoint,
		ProjectName:    projectName,
		NetworkACLName: networkACLName,
	}
	mock.lockGetNetworkACLByName.Lock()
	mock.calls.GetNetworkACLByName = append(mock.calls.GetNetworkACLByName, callInfo)
	mock.lockGetNetworkACLByName.Unlock()
	return mock.GetNetworkACLByNameFunc(ctx, endpoint, projectName, networkACLName)
}

// GetNetworkACLByNameCalls gets all the calls that were made to GetNetworkACLByName.
// Check the length with:
//
//	len(mockedNetworkACLServerClient.GetNetworkACLByNameCalls())
func (mock *NetworkACLServerClientMock) GetNetworkACLByNameCalls() []struct {
	Ctx            context.Context
	Endpoint       provisioning.Endpoint
	ProjectName    string
	NetworkACLName string
} {
	var calls []struct {
		Ctx            context.Context
		Endpoint       provisioning.Endpoint
		ProjectName    string
		NetworkACLName string
	}
	mock.lockGetNetworkACLByName.RLock()
	calls = mock.calls.GetNetworkACLByName
	mock.lockGetNetworkACLByName.RUnlock()
	return calls
}

// GetNetworkACLs calls GetNetworkACLsFunc.
func (mock *NetworkACLServerClientMock) GetNetworkACLs(ctx context.Context, endpoint provisioning.Endpoint) ([]api.NetworkACL, error) {
	if mock.GetNetworkACLsFunc == nil {
		panic("NetworkACLServerClientMock.GetNetworkACLsFunc: method is nil but NetworkACLServerClient.GetNetworkACLs was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockGetNetworkACLs.Lock()
	mock.calls.GetNetworkACLs = append(mock.calls.GetNetworkACLs, callInfo)
	mock.lockGetNetworkACLs.Unlock()
	return mock.GetNetworkACLsFunc(ctx, endpoint)
}

// GetNetworkACLsCalls gets all the calls that were made to GetNetworkACLs.
// Check the length with:
//
//	len(mockedNetworkACLServerClient.GetNetworkACLsCalls())
func (mock *NetworkACLServerClientMock) GetNetworkACLsCalls() []struct {
	Ctx      context.Context
	Endpoint provisioning.Endpoint
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}
	mock.lockGetNetworkACLs.RLock()
	calls = mock.calls.GetNetworkACLs
	mock.lockGetNetworkACLs.RUnlock()
	return calls
}
