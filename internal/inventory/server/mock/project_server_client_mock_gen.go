// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that ProjectServerClientMock does implement inventory.ProjectServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.ProjectServerClient = &ProjectServerClientMock{}

// ProjectServerClientMock is a mock implementation of inventory.ProjectServerClient.
//
//	func TestSomethingThatUsesProjectServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.ProjectServerClient
//		mockedProjectServerClient := &ProjectServerClientMock{
//			GetProjectByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, projectName string) (api.Project, error) {
//				panic("mock out the GetProjectByName method")
//			},
//			GetProjectsFunc: func(ctx context.Context, endpoint provisioning.Endpoint) ([]api.Project, error) {
//				panic("mock out the GetProjects method")
//			},
//		}
//
//		// use mockedProjectServerClient in code that requires inventory.ProjectServerClient
//		// and then make assertions.
//
//	}
type ProjectServerClientMock struct {
	// GetProjectByNameFunc mocks the GetProjectByName method.
	GetProjectByNameFunc func(ctx context.Context, endpoint provisioning.Endpoint, projectName string) (api.Project, error)

	// GetProjectsFunc mocks the GetProjects method.
	GetProjectsFunc func(ctx context.Context, endpoint provisioning.Endpoint) ([]api.Project, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetProjectByName holds details about calls to the GetProjectByName method.
		GetProjectByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
			// ProjectName is the projectName argument value.
			ProjectName string
		}
		// GetProjects holds details about calls to the GetProjects method.
		GetProjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
		}
	}
	lockGetProjectByName sync.RWMutex
	lockGetProjects      sync.RWMutex
}

// GetProjectByName calls GetProjectByNameFunc.
func (mock *ProjectServerClientMock) GetProjectByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string) (api.Project, error) {
	if mock.GetProjectByNameFunc == nil {
		panic("ProjectServerClientMock.GetProjectByNameFunc: method is nil but ProjectServerClient.GetProjectByName was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Endpoint    provisioning.Endpoint
		ProjectName string
	}{
		Ctx:         ctx,
		Endpoint:    endpoint,
		ProjectName: projectName,
	}
	mock.lockGetProjectByName.Lock()
	mock.calls.GetProjectByName = append(mock.calls.GetProjectByName, callInfo)
	mock.lockGetProjectByName.Unlock()
	return mock.GetProjectByNameFunc(ctx, endpoint, projectName)
}

// GetProjectByNameCalls gets all the calls that were made to GetProjectByName.
// Check the length with:
//
//	len(mockedProjectServerClient.GetProjectByNameCalls())
func (mock *ProjectServerClientMock) GetProjectByNameCalls() []struct {
	Ctx         context.Context
	Endpoint    provisioning.Endpoint
	ProjectName string
} {
	var calls []struct {
		Ctx         context.Context
		Endpoint    provisioning.Endpoint
		ProjectName string
	}
	mock.lockGetProjectByName.RLock()
	calls = mock.calls.GetProjectByName
	mock.lockGetProjectByName.RUnlock()
	return calls
}

// GetProjects calls GetProjectsFunc.
func (mock *ProjectServerClientMock) GetProjects(ctx context.Context, endpoint provisioning.Endpoint) ([]api.Project, error) {
	if mock.GetProjectsFunc == nil {
		panic("ProjectServerClientMock.GetProjectsFunc: method is nil but ProjectServerClient.GetProjects was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockGetProjects.Lock()
	mock.calls.GetProjects = append(mock.calls.GetProjects, callInfo)
	mock.lockGetProjects.Unlock()
	return mock.GetProjectsFunc(ctx, endpoint)
}

// GetProjectsCalls gets all the calls that were made to GetProjects.
// Check the length with:
//
//	len(mockedProjectServerClient.GetProjectsCalls())
func (mock *ProjectServerClientMock) GetProjectsCalls() []struct {
	Ctx      context.Context
	Endpoint provisioning.Endpoint
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}
	mock.lockGetProjects.RLock()
	calls = mock.calls.GetProjects
	mock.lockGetProjects.RUnlock()
	return calls
}
