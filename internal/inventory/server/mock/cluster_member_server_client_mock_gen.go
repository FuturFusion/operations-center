// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure, that ClusterMemberServerClientMock does implement inventory.ClusterMemberServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.ClusterMemberServerClient = &ClusterMemberServerClientMock{}

// ClusterMemberServerClientMock is a mock implementation of inventory.ClusterMemberServerClient.
//
//	func TestSomethingThatUsesClusterMemberServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.ClusterMemberServerClient
//		mockedClusterMemberServerClient := &ClusterMemberServerClientMock{
//			GetClusterMemberByNameFunc: func(ctx context.Context, connectionURL string, clusterMemberName string) (api.ClusterMember, error) {
//				panic("mock out the GetClusterMemberByName method")
//			},
//			GetClusterMembersFunc: func(ctx context.Context, connectionURL string) ([]api.ClusterMember, error) {
//				panic("mock out the GetClusterMembers method")
//			},
//		}
//
//		// use mockedClusterMemberServerClient in code that requires inventory.ClusterMemberServerClient
//		// and then make assertions.
//
//	}
type ClusterMemberServerClientMock struct {
	// GetClusterMemberByNameFunc mocks the GetClusterMemberByName method.
	GetClusterMemberByNameFunc func(ctx context.Context, connectionURL string, clusterMemberName string) (api.ClusterMember, error)

	// GetClusterMembersFunc mocks the GetClusterMembers method.
	GetClusterMembersFunc func(ctx context.Context, connectionURL string) ([]api.ClusterMember, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetClusterMemberByName holds details about calls to the GetClusterMemberByName method.
		GetClusterMemberByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// ClusterMemberName is the clusterMemberName argument value.
			ClusterMemberName string
		}
		// GetClusterMembers holds details about calls to the GetClusterMembers method.
		GetClusterMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
	}
	lockGetClusterMemberByName sync.RWMutex
	lockGetClusterMembers      sync.RWMutex
}

// GetClusterMemberByName calls GetClusterMemberByNameFunc.
func (mock *ClusterMemberServerClientMock) GetClusterMemberByName(ctx context.Context, connectionURL string, clusterMemberName string) (api.ClusterMember, error) {
	if mock.GetClusterMemberByNameFunc == nil {
		panic("ClusterMemberServerClientMock.GetClusterMemberByNameFunc: method is nil but ClusterMemberServerClient.GetClusterMemberByName was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ConnectionURL     string
		ClusterMemberName string
	}{
		Ctx:               ctx,
		ConnectionURL:     connectionURL,
		ClusterMemberName: clusterMemberName,
	}
	mock.lockGetClusterMemberByName.Lock()
	mock.calls.GetClusterMemberByName = append(mock.calls.GetClusterMemberByName, callInfo)
	mock.lockGetClusterMemberByName.Unlock()
	return mock.GetClusterMemberByNameFunc(ctx, connectionURL, clusterMemberName)
}

// GetClusterMemberByNameCalls gets all the calls that were made to GetClusterMemberByName.
// Check the length with:
//
//	len(mockedClusterMemberServerClient.GetClusterMemberByNameCalls())
func (mock *ClusterMemberServerClientMock) GetClusterMemberByNameCalls() []struct {
	Ctx               context.Context
	ConnectionURL     string
	ClusterMemberName string
} {
	var calls []struct {
		Ctx               context.Context
		ConnectionURL     string
		ClusterMemberName string
	}
	mock.lockGetClusterMemberByName.RLock()
	calls = mock.calls.GetClusterMemberByName
	mock.lockGetClusterMemberByName.RUnlock()
	return calls
}

// GetClusterMembers calls GetClusterMembersFunc.
func (mock *ClusterMemberServerClientMock) GetClusterMembers(ctx context.Context, connectionURL string) ([]api.ClusterMember, error) {
	if mock.GetClusterMembersFunc == nil {
		panic("ClusterMemberServerClientMock.GetClusterMembersFunc: method is nil but ClusterMemberServerClient.GetClusterMembers was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetClusterMembers.Lock()
	mock.calls.GetClusterMembers = append(mock.calls.GetClusterMembers, callInfo)
	mock.lockGetClusterMembers.Unlock()
	return mock.GetClusterMembersFunc(ctx, connectionURL)
}

// GetClusterMembersCalls gets all the calls that were made to GetClusterMembers.
// Check the length with:
//
//	len(mockedClusterMemberServerClient.GetClusterMembersCalls())
func (mock *ClusterMemberServerClientMock) GetClusterMembersCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetClusterMembers.RLock()
	calls = mock.calls.GetClusterMembers
	mock.lockGetClusterMembers.RUnlock()
	return calls
}
