// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that NetworkServerClientMock does implement inventory.NetworkServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.NetworkServerClient = &NetworkServerClientMock{}

// NetworkServerClientMock is a mock implementation of inventory.NetworkServerClient.
//
//	func TestSomethingThatUsesNetworkServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkServerClient
//		mockedNetworkServerClient := &NetworkServerClientMock{
//			GetNetworkByNameFunc: func(ctx context.Context, connectionURL string, networkName string) (api.Network, error) {
//				panic("mock out the GetNetworkByName method")
//			},
//			GetNetworksFunc: func(ctx context.Context, connectionURL string) ([]api.Network, error) {
//				panic("mock out the GetNetworks method")
//			},
//		}
//
//		// use mockedNetworkServerClient in code that requires inventory.NetworkServerClient
//		// and then make assertions.
//
//	}
type NetworkServerClientMock struct {
	// GetNetworkByNameFunc mocks the GetNetworkByName method.
	GetNetworkByNameFunc func(ctx context.Context, connectionURL string, networkName string) (api.Network, error)

	// GetNetworksFunc mocks the GetNetworks method.
	GetNetworksFunc func(ctx context.Context, connectionURL string) ([]api.Network, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNetworkByName holds details about calls to the GetNetworkByName method.
		GetNetworkByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// NetworkName is the networkName argument value.
			NetworkName string
		}
		// GetNetworks holds details about calls to the GetNetworks method.
		GetNetworks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
	}
	lockGetNetworkByName sync.RWMutex
	lockGetNetworks      sync.RWMutex
}

// GetNetworkByName calls GetNetworkByNameFunc.
func (mock *NetworkServerClientMock) GetNetworkByName(ctx context.Context, connectionURL string, networkName string) (api.Network, error) {
	if mock.GetNetworkByNameFunc == nil {
		panic("NetworkServerClientMock.GetNetworkByNameFunc: method is nil but NetworkServerClient.GetNetworkByName was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
		NetworkName:   networkName,
	}
	mock.lockGetNetworkByName.Lock()
	mock.calls.GetNetworkByName = append(mock.calls.GetNetworkByName, callInfo)
	mock.lockGetNetworkByName.Unlock()
	return mock.GetNetworkByNameFunc(ctx, connectionURL, networkName)
}

// GetNetworkByNameCalls gets all the calls that were made to GetNetworkByName.
// Check the length with:
//
//	len(mockedNetworkServerClient.GetNetworkByNameCalls())
func (mock *NetworkServerClientMock) GetNetworkByNameCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
	NetworkName   string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}
	mock.lockGetNetworkByName.RLock()
	calls = mock.calls.GetNetworkByName
	mock.lockGetNetworkByName.RUnlock()
	return calls
}

// GetNetworks calls GetNetworksFunc.
func (mock *NetworkServerClientMock) GetNetworks(ctx context.Context, connectionURL string) ([]api.Network, error) {
	if mock.GetNetworksFunc == nil {
		panic("NetworkServerClientMock.GetNetworksFunc: method is nil but NetworkServerClient.GetNetworks was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworks.Lock()
	mock.calls.GetNetworks = append(mock.calls.GetNetworks, callInfo)
	mock.lockGetNetworks.Unlock()
	return mock.GetNetworksFunc(ctx, connectionURL)
}

// GetNetworksCalls gets all the calls that were made to GetNetworks.
// Check the length with:
//
//	len(mockedNetworkServerClient.GetNetworksCalls())
func (mock *NetworkServerClientMock) GetNetworksCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworks.RLock()
	calls = mock.calls.GetNetworks
	mock.lockGetNetworks.RUnlock()
	return calls
}
