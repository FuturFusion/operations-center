// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that StorageBucketServerClientMock does implement inventory.StorageBucketServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.StorageBucketServerClient = &StorageBucketServerClientMock{}

// StorageBucketServerClientMock is a mock implementation of inventory.StorageBucketServerClient.
//
//	func TestSomethingThatUsesStorageBucketServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.StorageBucketServerClient
//		mockedStorageBucketServerClient := &StorageBucketServerClientMock{
//			GetStorageBucketByNameFunc: func(ctx context.Context, connectionURL string, storagePoolName string, storageBucketName string) (api.StorageBucket, error) {
//				panic("mock out the GetStorageBucketByName method")
//			},
//			GetStorageBucketsFunc: func(ctx context.Context, connectionURL string, storagePoolName string) ([]api.StorageBucket, error) {
//				panic("mock out the GetStorageBuckets method")
//			},
//		}
//
//		// use mockedStorageBucketServerClient in code that requires inventory.StorageBucketServerClient
//		// and then make assertions.
//
//	}
type StorageBucketServerClientMock struct {
	// GetStorageBucketByNameFunc mocks the GetStorageBucketByName method.
	GetStorageBucketByNameFunc func(ctx context.Context, connectionURL string, storagePoolName string, storageBucketName string) (api.StorageBucket, error)

	// GetStorageBucketsFunc mocks the GetStorageBuckets method.
	GetStorageBucketsFunc func(ctx context.Context, connectionURL string, storagePoolName string) ([]api.StorageBucket, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetStorageBucketByName holds details about calls to the GetStorageBucketByName method.
		GetStorageBucketByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
			// StorageBucketName is the storageBucketName argument value.
			StorageBucketName string
		}
		// GetStorageBuckets holds details about calls to the GetStorageBuckets method.
		GetStorageBuckets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
		}
	}
	lockGetStorageBucketByName sync.RWMutex
	lockGetStorageBuckets      sync.RWMutex
}

// GetStorageBucketByName calls GetStorageBucketByNameFunc.
func (mock *StorageBucketServerClientMock) GetStorageBucketByName(ctx context.Context, connectionURL string, storagePoolName string, storageBucketName string) (api.StorageBucket, error) {
	if mock.GetStorageBucketByNameFunc == nil {
		panic("StorageBucketServerClientMock.GetStorageBucketByNameFunc: method is nil but StorageBucketServerClient.GetStorageBucketByName was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ConnectionURL     string
		StoragePoolName   string
		StorageBucketName string
	}{
		Ctx:               ctx,
		ConnectionURL:     connectionURL,
		StoragePoolName:   storagePoolName,
		StorageBucketName: storageBucketName,
	}
	mock.lockGetStorageBucketByName.Lock()
	mock.calls.GetStorageBucketByName = append(mock.calls.GetStorageBucketByName, callInfo)
	mock.lockGetStorageBucketByName.Unlock()
	return mock.GetStorageBucketByNameFunc(ctx, connectionURL, storagePoolName, storageBucketName)
}

// GetStorageBucketByNameCalls gets all the calls that were made to GetStorageBucketByName.
// Check the length with:
//
//	len(mockedStorageBucketServerClient.GetStorageBucketByNameCalls())
func (mock *StorageBucketServerClientMock) GetStorageBucketByNameCalls() []struct {
	Ctx               context.Context
	ConnectionURL     string
	StoragePoolName   string
	StorageBucketName string
} {
	var calls []struct {
		Ctx               context.Context
		ConnectionURL     string
		StoragePoolName   string
		StorageBucketName string
	}
	mock.lockGetStorageBucketByName.RLock()
	calls = mock.calls.GetStorageBucketByName
	mock.lockGetStorageBucketByName.RUnlock()
	return calls
}

// GetStorageBuckets calls GetStorageBucketsFunc.
func (mock *StorageBucketServerClientMock) GetStorageBuckets(ctx context.Context, connectionURL string, storagePoolName string) ([]api.StorageBucket, error) {
	if mock.GetStorageBucketsFunc == nil {
		panic("StorageBucketServerClientMock.GetStorageBucketsFunc: method is nil but StorageBucketServerClient.GetStorageBuckets was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		ConnectionURL   string
		StoragePoolName string
	}{
		Ctx:             ctx,
		ConnectionURL:   connectionURL,
		StoragePoolName: storagePoolName,
	}
	mock.lockGetStorageBuckets.Lock()
	mock.calls.GetStorageBuckets = append(mock.calls.GetStorageBuckets, callInfo)
	mock.lockGetStorageBuckets.Unlock()
	return mock.GetStorageBucketsFunc(ctx, connectionURL, storagePoolName)
}

// GetStorageBucketsCalls gets all the calls that were made to GetStorageBuckets.
// Check the length with:
//
//	len(mockedStorageBucketServerClient.GetStorageBucketsCalls())
func (mock *StorageBucketServerClientMock) GetStorageBucketsCalls() []struct {
	Ctx             context.Context
	ConnectionURL   string
	StoragePoolName string
} {
	var calls []struct {
		Ctx             context.Context
		ConnectionURL   string
		StoragePoolName string
	}
	mock.lockGetStorageBuckets.RLock()
	calls = mock.calls.GetStorageBuckets
	mock.lockGetStorageBuckets.RUnlock()
	return calls
}
