// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that StorageVolumeServerClientMock does implement inventory.StorageVolumeServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.StorageVolumeServerClient = &StorageVolumeServerClientMock{}

// StorageVolumeServerClientMock is a mock implementation of inventory.StorageVolumeServerClient.
//
//	func TestSomethingThatUsesStorageVolumeServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.StorageVolumeServerClient
//		mockedStorageVolumeServerClient := &StorageVolumeServerClientMock{
//			GetStorageVolumeByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageVolumeName string, storageVolumeType string) (api.StorageVolume, error) {
//				panic("mock out the GetStorageVolumeByName method")
//			},
//			GetStorageVolumesFunc: func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageVolume, error) {
//				panic("mock out the GetStorageVolumes method")
//			},
//		}
//
//		// use mockedStorageVolumeServerClient in code that requires inventory.StorageVolumeServerClient
//		// and then make assertions.
//
//	}
type StorageVolumeServerClientMock struct {
	// GetStorageVolumeByNameFunc mocks the GetStorageVolumeByName method.
	GetStorageVolumeByNameFunc func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageVolumeName string, storageVolumeType string) (api.StorageVolume, error)

	// GetStorageVolumesFunc mocks the GetStorageVolumes method.
	GetStorageVolumesFunc func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageVolume, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetStorageVolumeByName holds details about calls to the GetStorageVolumeByName method.
		GetStorageVolumeByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
			// StorageVolumeName is the storageVolumeName argument value.
			StorageVolumeName string
			// StorageVolumeType is the storageVolumeType argument value.
			StorageVolumeType string
		}
		// GetStorageVolumes holds details about calls to the GetStorageVolumes method.
		GetStorageVolumes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
		}
	}
	lockGetStorageVolumeByName sync.RWMutex
	lockGetStorageVolumes      sync.RWMutex
}

// GetStorageVolumeByName calls GetStorageVolumeByNameFunc.
func (mock *StorageVolumeServerClientMock) GetStorageVolumeByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageVolumeName string, storageVolumeType string) (api.StorageVolume, error) {
	if mock.GetStorageVolumeByNameFunc == nil {
		panic("StorageVolumeServerClientMock.GetStorageVolumeByNameFunc: method is nil but StorageVolumeServerClient.GetStorageVolumeByName was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Cluster           provisioning.Cluster
		StoragePoolName   string
		StorageVolumeName string
		StorageVolumeType string
	}{
		Ctx:               ctx,
		Cluster:           cluster,
		StoragePoolName:   storagePoolName,
		StorageVolumeName: storageVolumeName,
		StorageVolumeType: storageVolumeType,
	}
	mock.lockGetStorageVolumeByName.Lock()
	mock.calls.GetStorageVolumeByName = append(mock.calls.GetStorageVolumeByName, callInfo)
	mock.lockGetStorageVolumeByName.Unlock()
	return mock.GetStorageVolumeByNameFunc(ctx, cluster, storagePoolName, storageVolumeName, storageVolumeType)
}

// GetStorageVolumeByNameCalls gets all the calls that were made to GetStorageVolumeByName.
// Check the length with:
//
//	len(mockedStorageVolumeServerClient.GetStorageVolumeByNameCalls())
func (mock *StorageVolumeServerClientMock) GetStorageVolumeByNameCalls() []struct {
	Ctx               context.Context
	Cluster           provisioning.Cluster
	StoragePoolName   string
	StorageVolumeName string
	StorageVolumeType string
} {
	var calls []struct {
		Ctx               context.Context
		Cluster           provisioning.Cluster
		StoragePoolName   string
		StorageVolumeName string
		StorageVolumeType string
	}
	mock.lockGetStorageVolumeByName.RLock()
	calls = mock.calls.GetStorageVolumeByName
	mock.lockGetStorageVolumeByName.RUnlock()
	return calls
}

// GetStorageVolumes calls GetStorageVolumesFunc.
func (mock *StorageVolumeServerClientMock) GetStorageVolumes(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageVolume, error) {
	if mock.GetStorageVolumesFunc == nil {
		panic("StorageVolumeServerClientMock.GetStorageVolumesFunc: method is nil but StorageVolumeServerClient.GetStorageVolumes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		StoragePoolName string
	}{
		Ctx:             ctx,
		Cluster:         cluster,
		StoragePoolName: storagePoolName,
	}
	mock.lockGetStorageVolumes.Lock()
	mock.calls.GetStorageVolumes = append(mock.calls.GetStorageVolumes, callInfo)
	mock.lockGetStorageVolumes.Unlock()
	return mock.GetStorageVolumesFunc(ctx, cluster, storagePoolName)
}

// GetStorageVolumesCalls gets all the calls that were made to GetStorageVolumes.
// Check the length with:
//
//	len(mockedStorageVolumeServerClient.GetStorageVolumesCalls())
func (mock *StorageVolumeServerClientMock) GetStorageVolumesCalls() []struct {
	Ctx             context.Context
	Cluster         provisioning.Cluster
	StoragePoolName string
} {
	var calls []struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		StoragePoolName string
	}
	mock.lockGetStorageVolumes.RLock()
	calls = mock.calls.GetStorageVolumes
	mock.lockGetStorageVolumes.RUnlock()
	return calls
}
