// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that InstanceServerClientMock does implement inventory.InstanceServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.InstanceServerClient = &InstanceServerClientMock{}

// InstanceServerClientMock is a mock implementation of inventory.InstanceServerClient.
//
//	func TestSomethingThatUsesInstanceServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.InstanceServerClient
//		mockedInstanceServerClient := &InstanceServerClientMock{
//			GetInstanceByNameFunc: func(ctx context.Context, connectionURL string, instanceName string) (api.InstanceFull, error) {
//				panic("mock out the GetInstanceByName method")
//			},
//			GetInstancesFunc: func(ctx context.Context, connectionURL string) ([]api.InstanceFull, error) {
//				panic("mock out the GetInstances method")
//			},
//		}
//
//		// use mockedInstanceServerClient in code that requires inventory.InstanceServerClient
//		// and then make assertions.
//
//	}
type InstanceServerClientMock struct {
	// GetInstanceByNameFunc mocks the GetInstanceByName method.
	GetInstanceByNameFunc func(ctx context.Context, connectionURL string, instanceName string) (api.InstanceFull, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(ctx context.Context, connectionURL string) ([]api.InstanceFull, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetInstanceByName holds details about calls to the GetInstanceByName method.
		GetInstanceByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// InstanceName is the instanceName argument value.
			InstanceName string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
	}
	lockGetInstanceByName sync.RWMutex
	lockGetInstances      sync.RWMutex
}

// GetInstanceByName calls GetInstanceByNameFunc.
func (mock *InstanceServerClientMock) GetInstanceByName(ctx context.Context, connectionURL string, instanceName string) (api.InstanceFull, error) {
	if mock.GetInstanceByNameFunc == nil {
		panic("InstanceServerClientMock.GetInstanceByNameFunc: method is nil but InstanceServerClient.GetInstanceByName was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
		InstanceName  string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
		InstanceName:  instanceName,
	}
	mock.lockGetInstanceByName.Lock()
	mock.calls.GetInstanceByName = append(mock.calls.GetInstanceByName, callInfo)
	mock.lockGetInstanceByName.Unlock()
	return mock.GetInstanceByNameFunc(ctx, connectionURL, instanceName)
}

// GetInstanceByNameCalls gets all the calls that were made to GetInstanceByName.
// Check the length with:
//
//	len(mockedInstanceServerClient.GetInstanceByNameCalls())
func (mock *InstanceServerClientMock) GetInstanceByNameCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
	InstanceName  string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
		InstanceName  string
	}
	mock.lockGetInstanceByName.RLock()
	calls = mock.calls.GetInstanceByName
	mock.lockGetInstanceByName.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *InstanceServerClientMock) GetInstances(ctx context.Context, connectionURL string) ([]api.InstanceFull, error) {
	if mock.GetInstancesFunc == nil {
		panic("InstanceServerClientMock.GetInstancesFunc: method is nil but InstanceServerClient.GetInstances was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	mock.lockGetInstances.Unlock()
	return mock.GetInstancesFunc(ctx, connectionURL)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//
//	len(mockedInstanceServerClient.GetInstancesCalls())
func (mock *InstanceServerClientMock) GetInstancesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetInstances.RLock()
	calls = mock.calls.GetInstances
	mock.lockGetInstances.RUnlock()
	return calls
}
