// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that NetworkForwardServerClientMock does implement inventory.NetworkForwardServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.NetworkForwardServerClient = &NetworkForwardServerClientMock{}

// NetworkForwardServerClientMock is a mock implementation of inventory.NetworkForwardServerClient.
//
//	func TestSomethingThatUsesNetworkForwardServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkForwardServerClient
//		mockedNetworkForwardServerClient := &NetworkForwardServerClientMock{
//			GetNetworkForwardByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string, networkForwardName string) (api.NetworkForward, error) {
//				panic("mock out the GetNetworkForwardByName method")
//			},
//			GetNetworkForwardsFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkForward, error) {
//				panic("mock out the GetNetworkForwards method")
//			},
//		}
//
//		// use mockedNetworkForwardServerClient in code that requires inventory.NetworkForwardServerClient
//		// and then make assertions.
//
//	}
type NetworkForwardServerClientMock struct {
	// GetNetworkForwardByNameFunc mocks the GetNetworkForwardByName method.
	GetNetworkForwardByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string, networkForwardName string) (api.NetworkForward, error)

	// GetNetworkForwardsFunc mocks the GetNetworkForwards method.
	GetNetworkForwardsFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkForward, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNetworkForwardByName holds details about calls to the GetNetworkForwardByName method.
		GetNetworkForwardByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
			// NetworkForwardName is the networkForwardName argument value.
			NetworkForwardName string
		}
		// GetNetworkForwards holds details about calls to the GetNetworkForwards method.
		GetNetworkForwards []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
		}
	}
	lockGetNetworkForwardByName sync.RWMutex
	lockGetNetworkForwards      sync.RWMutex
}

// GetNetworkForwardByName calls GetNetworkForwardByNameFunc.
func (mock *NetworkForwardServerClientMock) GetNetworkForwardByName(ctx context.Context, cluster provisioning.Cluster, networkName string, networkForwardName string) (api.NetworkForward, error) {
	if mock.GetNetworkForwardByNameFunc == nil {
		panic("NetworkForwardServerClientMock.GetNetworkForwardByNameFunc: method is nil but NetworkForwardServerClient.GetNetworkForwardByName was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		Cluster            provisioning.Cluster
		NetworkName        string
		NetworkForwardName string
	}{
		Ctx:                ctx,
		Cluster:            cluster,
		NetworkName:        networkName,
		NetworkForwardName: networkForwardName,
	}
	mock.lockGetNetworkForwardByName.Lock()
	mock.calls.GetNetworkForwardByName = append(mock.calls.GetNetworkForwardByName, callInfo)
	mock.lockGetNetworkForwardByName.Unlock()
	return mock.GetNetworkForwardByNameFunc(ctx, cluster, networkName, networkForwardName)
}

// GetNetworkForwardByNameCalls gets all the calls that were made to GetNetworkForwardByName.
// Check the length with:
//
//	len(mockedNetworkForwardServerClient.GetNetworkForwardByNameCalls())
func (mock *NetworkForwardServerClientMock) GetNetworkForwardByNameCalls() []struct {
	Ctx                context.Context
	Cluster            provisioning.Cluster
	NetworkName        string
	NetworkForwardName string
} {
	var calls []struct {
		Ctx                context.Context
		Cluster            provisioning.Cluster
		NetworkName        string
		NetworkForwardName string
	}
	mock.lockGetNetworkForwardByName.RLock()
	calls = mock.calls.GetNetworkForwardByName
	mock.lockGetNetworkForwardByName.RUnlock()
	return calls
}

// GetNetworkForwards calls GetNetworkForwardsFunc.
func (mock *NetworkForwardServerClientMock) GetNetworkForwards(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkForward, error) {
	if mock.GetNetworkForwardsFunc == nil {
		panic("NetworkForwardServerClientMock.GetNetworkForwardsFunc: method is nil but NetworkForwardServerClient.GetNetworkForwards was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}{
		Ctx:         ctx,
		Cluster:     cluster,
		NetworkName: networkName,
	}
	mock.lockGetNetworkForwards.Lock()
	mock.calls.GetNetworkForwards = append(mock.calls.GetNetworkForwards, callInfo)
	mock.lockGetNetworkForwards.Unlock()
	return mock.GetNetworkForwardsFunc(ctx, cluster, networkName)
}

// GetNetworkForwardsCalls gets all the calls that were made to GetNetworkForwards.
// Check the length with:
//
//	len(mockedNetworkForwardServerClient.GetNetworkForwardsCalls())
func (mock *NetworkForwardServerClientMock) GetNetworkForwardsCalls() []struct {
	Ctx         context.Context
	Cluster     provisioning.Cluster
	NetworkName string
} {
	var calls []struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}
	mock.lockGetNetworkForwards.RLock()
	calls = mock.calls.GetNetworkForwards
	mock.lockGetNetworkForwards.RUnlock()
	return calls
}
