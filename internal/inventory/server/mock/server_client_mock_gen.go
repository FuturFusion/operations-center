// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that ServerClientMock does implement inventory.ServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.ServerClient = &ServerClientMock{}

// ServerClientMock is a mock implementation of inventory.ServerClient.
//
//	func TestSomethingThatUsesServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.ServerClient
//		mockedServerClient := &ServerClientMock{
//			GetImageByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, imageName string) (api.Image, error) {
//				panic("mock out the GetImageByName method")
//			},
//			GetImagesFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.Image, error) {
//				panic("mock out the GetImages method")
//			},
//			GetInstanceByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, instanceName string) (api.InstanceFull, error) {
//				panic("mock out the GetInstanceByName method")
//			},
//			GetInstancesFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.InstanceFull, error) {
//				panic("mock out the GetInstances method")
//			},
//			GetNetworkACLByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkACLName string) (api.NetworkACL, error) {
//				panic("mock out the GetNetworkACLByName method")
//			},
//			GetNetworkACLsFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkACL, error) {
//				panic("mock out the GetNetworkACLs method")
//			},
//			GetNetworkAddressSetByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkAddressSetName string) (api.NetworkAddressSet, error) {
//				panic("mock out the GetNetworkAddressSetByName method")
//			},
//			GetNetworkAddressSetsFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkAddressSet, error) {
//				panic("mock out the GetNetworkAddressSets method")
//			},
//			GetNetworkByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string) (api.Network, error) {
//				panic("mock out the GetNetworkByName method")
//			},
//			GetNetworkForwardByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string, networkForwardName string) (api.NetworkForward, error) {
//				panic("mock out the GetNetworkForwardByName method")
//			},
//			GetNetworkForwardsFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkForward, error) {
//				panic("mock out the GetNetworkForwards method")
//			},
//			GetNetworkIntegrationByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkIntegrationName string) (api.NetworkIntegration, error) {
//				panic("mock out the GetNetworkIntegrationByName method")
//			},
//			GetNetworkIntegrationsFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkIntegration, error) {
//				panic("mock out the GetNetworkIntegrations method")
//			},
//			GetNetworkLoadBalancerByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string, networkLoadBalancerName string) (api.NetworkLoadBalancer, error) {
//				panic("mock out the GetNetworkLoadBalancerByName method")
//			},
//			GetNetworkLoadBalancersFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkLoadBalancer, error) {
//				panic("mock out the GetNetworkLoadBalancers method")
//			},
//			GetNetworkPeerByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string, networkPeerName string) (api.NetworkPeer, error) {
//				panic("mock out the GetNetworkPeerByName method")
//			},
//			GetNetworkPeersFunc: func(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkPeer, error) {
//				panic("mock out the GetNetworkPeers method")
//			},
//			GetNetworkZoneByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, networkZoneName string) (api.NetworkZone, error) {
//				panic("mock out the GetNetworkZoneByName method")
//			},
//			GetNetworkZonesFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkZone, error) {
//				panic("mock out the GetNetworkZones method")
//			},
//			GetNetworksFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.Network, error) {
//				panic("mock out the GetNetworks method")
//			},
//			GetProfileByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, profileName string) (api.Profile, error) {
//				panic("mock out the GetProfileByName method")
//			},
//			GetProfilesFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.Profile, error) {
//				panic("mock out the GetProfiles method")
//			},
//			GetProjectByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, projectName string) (api.Project, error) {
//				panic("mock out the GetProjectByName method")
//			},
//			GetProjectsFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.Project, error) {
//				panic("mock out the GetProjects method")
//			},
//			GetStorageBucketByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageBucketName string) (api.StorageBucket, error) {
//				panic("mock out the GetStorageBucketByName method")
//			},
//			GetStorageBucketsFunc: func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageBucket, error) {
//				panic("mock out the GetStorageBuckets method")
//			},
//			GetStoragePoolByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) (api.StoragePool, error) {
//				panic("mock out the GetStoragePoolByName method")
//			},
//			GetStoragePoolsFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]api.StoragePool, error) {
//				panic("mock out the GetStoragePools method")
//			},
//			GetStorageVolumeByNameFunc: func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageVolumeName string, storageVolumeType string) (api.StorageVolume, error) {
//				panic("mock out the GetStorageVolumeByName method")
//			},
//			GetStorageVolumesFunc: func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageVolume, error) {
//				panic("mock out the GetStorageVolumes method")
//			},
//			HasExtensionFunc: func(ctx context.Context, cluster provisioning.Cluster, extension string) bool {
//				panic("mock out the HasExtension method")
//			},
//		}
//
//		// use mockedServerClient in code that requires inventory.ServerClient
//		// and then make assertions.
//
//	}
type ServerClientMock struct {
	// GetImageByNameFunc mocks the GetImageByName method.
	GetImageByNameFunc func(ctx context.Context, cluster provisioning.Cluster, imageName string) (api.Image, error)

	// GetImagesFunc mocks the GetImages method.
	GetImagesFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.Image, error)

	// GetInstanceByNameFunc mocks the GetInstanceByName method.
	GetInstanceByNameFunc func(ctx context.Context, cluster provisioning.Cluster, instanceName string) (api.InstanceFull, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.InstanceFull, error)

	// GetNetworkACLByNameFunc mocks the GetNetworkACLByName method.
	GetNetworkACLByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkACLName string) (api.NetworkACL, error)

	// GetNetworkACLsFunc mocks the GetNetworkACLs method.
	GetNetworkACLsFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkACL, error)

	// GetNetworkAddressSetByNameFunc mocks the GetNetworkAddressSetByName method.
	GetNetworkAddressSetByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkAddressSetName string) (api.NetworkAddressSet, error)

	// GetNetworkAddressSetsFunc mocks the GetNetworkAddressSets method.
	GetNetworkAddressSetsFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkAddressSet, error)

	// GetNetworkByNameFunc mocks the GetNetworkByName method.
	GetNetworkByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string) (api.Network, error)

	// GetNetworkForwardByNameFunc mocks the GetNetworkForwardByName method.
	GetNetworkForwardByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string, networkForwardName string) (api.NetworkForward, error)

	// GetNetworkForwardsFunc mocks the GetNetworkForwards method.
	GetNetworkForwardsFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkForward, error)

	// GetNetworkIntegrationByNameFunc mocks the GetNetworkIntegrationByName method.
	GetNetworkIntegrationByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkIntegrationName string) (api.NetworkIntegration, error)

	// GetNetworkIntegrationsFunc mocks the GetNetworkIntegrations method.
	GetNetworkIntegrationsFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkIntegration, error)

	// GetNetworkLoadBalancerByNameFunc mocks the GetNetworkLoadBalancerByName method.
	GetNetworkLoadBalancerByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string, networkLoadBalancerName string) (api.NetworkLoadBalancer, error)

	// GetNetworkLoadBalancersFunc mocks the GetNetworkLoadBalancers method.
	GetNetworkLoadBalancersFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkLoadBalancer, error)

	// GetNetworkPeerByNameFunc mocks the GetNetworkPeerByName method.
	GetNetworkPeerByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string, networkPeerName string) (api.NetworkPeer, error)

	// GetNetworkPeersFunc mocks the GetNetworkPeers method.
	GetNetworkPeersFunc func(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkPeer, error)

	// GetNetworkZoneByNameFunc mocks the GetNetworkZoneByName method.
	GetNetworkZoneByNameFunc func(ctx context.Context, cluster provisioning.Cluster, networkZoneName string) (api.NetworkZone, error)

	// GetNetworkZonesFunc mocks the GetNetworkZones method.
	GetNetworkZonesFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkZone, error)

	// GetNetworksFunc mocks the GetNetworks method.
	GetNetworksFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.Network, error)

	// GetProfileByNameFunc mocks the GetProfileByName method.
	GetProfileByNameFunc func(ctx context.Context, cluster provisioning.Cluster, profileName string) (api.Profile, error)

	// GetProfilesFunc mocks the GetProfiles method.
	GetProfilesFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.Profile, error)

	// GetProjectByNameFunc mocks the GetProjectByName method.
	GetProjectByNameFunc func(ctx context.Context, cluster provisioning.Cluster, projectName string) (api.Project, error)

	// GetProjectsFunc mocks the GetProjects method.
	GetProjectsFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.Project, error)

	// GetStorageBucketByNameFunc mocks the GetStorageBucketByName method.
	GetStorageBucketByNameFunc func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageBucketName string) (api.StorageBucket, error)

	// GetStorageBucketsFunc mocks the GetStorageBuckets method.
	GetStorageBucketsFunc func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageBucket, error)

	// GetStoragePoolByNameFunc mocks the GetStoragePoolByName method.
	GetStoragePoolByNameFunc func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) (api.StoragePool, error)

	// GetStoragePoolsFunc mocks the GetStoragePools method.
	GetStoragePoolsFunc func(ctx context.Context, cluster provisioning.Cluster) ([]api.StoragePool, error)

	// GetStorageVolumeByNameFunc mocks the GetStorageVolumeByName method.
	GetStorageVolumeByNameFunc func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageVolumeName string, storageVolumeType string) (api.StorageVolume, error)

	// GetStorageVolumesFunc mocks the GetStorageVolumes method.
	GetStorageVolumesFunc func(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageVolume, error)

	// HasExtensionFunc mocks the HasExtension method.
	HasExtensionFunc func(ctx context.Context, cluster provisioning.Cluster, extension string) bool

	// calls tracks calls to the methods.
	calls struct {
		// GetImageByName holds details about calls to the GetImageByName method.
		GetImageByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// ImageName is the imageName argument value.
			ImageName string
		}
		// GetImages holds details about calls to the GetImages method.
		GetImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetInstanceByName holds details about calls to the GetInstanceByName method.
		GetInstanceByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// InstanceName is the instanceName argument value.
			InstanceName string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetNetworkACLByName holds details about calls to the GetNetworkACLByName method.
		GetNetworkACLByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkACLName is the networkACLName argument value.
			NetworkACLName string
		}
		// GetNetworkACLs holds details about calls to the GetNetworkACLs method.
		GetNetworkACLs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetNetworkAddressSetByName holds details about calls to the GetNetworkAddressSetByName method.
		GetNetworkAddressSetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkAddressSetName is the networkAddressSetName argument value.
			NetworkAddressSetName string
		}
		// GetNetworkAddressSets holds details about calls to the GetNetworkAddressSets method.
		GetNetworkAddressSets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetNetworkByName holds details about calls to the GetNetworkByName method.
		GetNetworkByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
		}
		// GetNetworkForwardByName holds details about calls to the GetNetworkForwardByName method.
		GetNetworkForwardByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
			// NetworkForwardName is the networkForwardName argument value.
			NetworkForwardName string
		}
		// GetNetworkForwards holds details about calls to the GetNetworkForwards method.
		GetNetworkForwards []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
		}
		// GetNetworkIntegrationByName holds details about calls to the GetNetworkIntegrationByName method.
		GetNetworkIntegrationByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkIntegrationName is the networkIntegrationName argument value.
			NetworkIntegrationName string
		}
		// GetNetworkIntegrations holds details about calls to the GetNetworkIntegrations method.
		GetNetworkIntegrations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetNetworkLoadBalancerByName holds details about calls to the GetNetworkLoadBalancerByName method.
		GetNetworkLoadBalancerByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
			// NetworkLoadBalancerName is the networkLoadBalancerName argument value.
			NetworkLoadBalancerName string
		}
		// GetNetworkLoadBalancers holds details about calls to the GetNetworkLoadBalancers method.
		GetNetworkLoadBalancers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
		}
		// GetNetworkPeerByName holds details about calls to the GetNetworkPeerByName method.
		GetNetworkPeerByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
			// NetworkPeerName is the networkPeerName argument value.
			NetworkPeerName string
		}
		// GetNetworkPeers holds details about calls to the GetNetworkPeers method.
		GetNetworkPeers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkName is the networkName argument value.
			NetworkName string
		}
		// GetNetworkZoneByName holds details about calls to the GetNetworkZoneByName method.
		GetNetworkZoneByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// NetworkZoneName is the networkZoneName argument value.
			NetworkZoneName string
		}
		// GetNetworkZones holds details about calls to the GetNetworkZones method.
		GetNetworkZones []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetNetworks holds details about calls to the GetNetworks method.
		GetNetworks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetProfileByName holds details about calls to the GetProfileByName method.
		GetProfileByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// ProfileName is the profileName argument value.
			ProfileName string
		}
		// GetProfiles holds details about calls to the GetProfiles method.
		GetProfiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetProjectByName holds details about calls to the GetProjectByName method.
		GetProjectByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// ProjectName is the projectName argument value.
			ProjectName string
		}
		// GetProjects holds details about calls to the GetProjects method.
		GetProjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetStorageBucketByName holds details about calls to the GetStorageBucketByName method.
		GetStorageBucketByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
			// StorageBucketName is the storageBucketName argument value.
			StorageBucketName string
		}
		// GetStorageBuckets holds details about calls to the GetStorageBuckets method.
		GetStorageBuckets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
		}
		// GetStoragePoolByName holds details about calls to the GetStoragePoolByName method.
		GetStoragePoolByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
		}
		// GetStoragePools holds details about calls to the GetStoragePools method.
		GetStoragePools []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetStorageVolumeByName holds details about calls to the GetStorageVolumeByName method.
		GetStorageVolumeByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
			// StorageVolumeName is the storageVolumeName argument value.
			StorageVolumeName string
			// StorageVolumeType is the storageVolumeType argument value.
			StorageVolumeType string
		}
		// GetStorageVolumes holds details about calls to the GetStorageVolumes method.
		GetStorageVolumes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
		}
		// HasExtension holds details about calls to the HasExtension method.
		HasExtension []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// Extension is the extension argument value.
			Extension string
		}
	}
	lockGetImageByName               sync.RWMutex
	lockGetImages                    sync.RWMutex
	lockGetInstanceByName            sync.RWMutex
	lockGetInstances                 sync.RWMutex
	lockGetNetworkACLByName          sync.RWMutex
	lockGetNetworkACLs               sync.RWMutex
	lockGetNetworkAddressSetByName   sync.RWMutex
	lockGetNetworkAddressSets        sync.RWMutex
	lockGetNetworkByName             sync.RWMutex
	lockGetNetworkForwardByName      sync.RWMutex
	lockGetNetworkForwards           sync.RWMutex
	lockGetNetworkIntegrationByName  sync.RWMutex
	lockGetNetworkIntegrations       sync.RWMutex
	lockGetNetworkLoadBalancerByName sync.RWMutex
	lockGetNetworkLoadBalancers      sync.RWMutex
	lockGetNetworkPeerByName         sync.RWMutex
	lockGetNetworkPeers              sync.RWMutex
	lockGetNetworkZoneByName         sync.RWMutex
	lockGetNetworkZones              sync.RWMutex
	lockGetNetworks                  sync.RWMutex
	lockGetProfileByName             sync.RWMutex
	lockGetProfiles                  sync.RWMutex
	lockGetProjectByName             sync.RWMutex
	lockGetProjects                  sync.RWMutex
	lockGetStorageBucketByName       sync.RWMutex
	lockGetStorageBuckets            sync.RWMutex
	lockGetStoragePoolByName         sync.RWMutex
	lockGetStoragePools              sync.RWMutex
	lockGetStorageVolumeByName       sync.RWMutex
	lockGetStorageVolumes            sync.RWMutex
	lockHasExtension                 sync.RWMutex
}

// GetImageByName calls GetImageByNameFunc.
func (mock *ServerClientMock) GetImageByName(ctx context.Context, cluster provisioning.Cluster, imageName string) (api.Image, error) {
	if mock.GetImageByNameFunc == nil {
		panic("ServerClientMock.GetImageByNameFunc: method is nil but ServerClient.GetImageByName was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Cluster   provisioning.Cluster
		ImageName string
	}{
		Ctx:       ctx,
		Cluster:   cluster,
		ImageName: imageName,
	}
	mock.lockGetImageByName.Lock()
	mock.calls.GetImageByName = append(mock.calls.GetImageByName, callInfo)
	mock.lockGetImageByName.Unlock()
	return mock.GetImageByNameFunc(ctx, cluster, imageName)
}

// GetImageByNameCalls gets all the calls that were made to GetImageByName.
// Check the length with:
//
//	len(mockedServerClient.GetImageByNameCalls())
func (mock *ServerClientMock) GetImageByNameCalls() []struct {
	Ctx       context.Context
	Cluster   provisioning.Cluster
	ImageName string
} {
	var calls []struct {
		Ctx       context.Context
		Cluster   provisioning.Cluster
		ImageName string
	}
	mock.lockGetImageByName.RLock()
	calls = mock.calls.GetImageByName
	mock.lockGetImageByName.RUnlock()
	return calls
}

// GetImages calls GetImagesFunc.
func (mock *ServerClientMock) GetImages(ctx context.Context, cluster provisioning.Cluster) ([]api.Image, error) {
	if mock.GetImagesFunc == nil {
		panic("ServerClientMock.GetImagesFunc: method is nil but ServerClient.GetImages was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetImages.Lock()
	mock.calls.GetImages = append(mock.calls.GetImages, callInfo)
	mock.lockGetImages.Unlock()
	return mock.GetImagesFunc(ctx, cluster)
}

// GetImagesCalls gets all the calls that were made to GetImages.
// Check the length with:
//
//	len(mockedServerClient.GetImagesCalls())
func (mock *ServerClientMock) GetImagesCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetImages.RLock()
	calls = mock.calls.GetImages
	mock.lockGetImages.RUnlock()
	return calls
}

// GetInstanceByName calls GetInstanceByNameFunc.
func (mock *ServerClientMock) GetInstanceByName(ctx context.Context, cluster provisioning.Cluster, instanceName string) (api.InstanceFull, error) {
	if mock.GetInstanceByNameFunc == nil {
		panic("ServerClientMock.GetInstanceByNameFunc: method is nil but ServerClient.GetInstanceByName was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Cluster      provisioning.Cluster
		InstanceName string
	}{
		Ctx:          ctx,
		Cluster:      cluster,
		InstanceName: instanceName,
	}
	mock.lockGetInstanceByName.Lock()
	mock.calls.GetInstanceByName = append(mock.calls.GetInstanceByName, callInfo)
	mock.lockGetInstanceByName.Unlock()
	return mock.GetInstanceByNameFunc(ctx, cluster, instanceName)
}

// GetInstanceByNameCalls gets all the calls that were made to GetInstanceByName.
// Check the length with:
//
//	len(mockedServerClient.GetInstanceByNameCalls())
func (mock *ServerClientMock) GetInstanceByNameCalls() []struct {
	Ctx          context.Context
	Cluster      provisioning.Cluster
	InstanceName string
} {
	var calls []struct {
		Ctx          context.Context
		Cluster      provisioning.Cluster
		InstanceName string
	}
	mock.lockGetInstanceByName.RLock()
	calls = mock.calls.GetInstanceByName
	mock.lockGetInstanceByName.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *ServerClientMock) GetInstances(ctx context.Context, cluster provisioning.Cluster) ([]api.InstanceFull, error) {
	if mock.GetInstancesFunc == nil {
		panic("ServerClientMock.GetInstancesFunc: method is nil but ServerClient.GetInstances was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	mock.lockGetInstances.Unlock()
	return mock.GetInstancesFunc(ctx, cluster)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//
//	len(mockedServerClient.GetInstancesCalls())
func (mock *ServerClientMock) GetInstancesCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetInstances.RLock()
	calls = mock.calls.GetInstances
	mock.lockGetInstances.RUnlock()
	return calls
}

// GetNetworkACLByName calls GetNetworkACLByNameFunc.
func (mock *ServerClientMock) GetNetworkACLByName(ctx context.Context, cluster provisioning.Cluster, networkACLName string) (api.NetworkACL, error) {
	if mock.GetNetworkACLByNameFunc == nil {
		panic("ServerClientMock.GetNetworkACLByNameFunc: method is nil but ServerClient.GetNetworkACLByName was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Cluster        provisioning.Cluster
		NetworkACLName string
	}{
		Ctx:            ctx,
		Cluster:        cluster,
		NetworkACLName: networkACLName,
	}
	mock.lockGetNetworkACLByName.Lock()
	mock.calls.GetNetworkACLByName = append(mock.calls.GetNetworkACLByName, callInfo)
	mock.lockGetNetworkACLByName.Unlock()
	return mock.GetNetworkACLByNameFunc(ctx, cluster, networkACLName)
}

// GetNetworkACLByNameCalls gets all the calls that were made to GetNetworkACLByName.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkACLByNameCalls())
func (mock *ServerClientMock) GetNetworkACLByNameCalls() []struct {
	Ctx            context.Context
	Cluster        provisioning.Cluster
	NetworkACLName string
} {
	var calls []struct {
		Ctx            context.Context
		Cluster        provisioning.Cluster
		NetworkACLName string
	}
	mock.lockGetNetworkACLByName.RLock()
	calls = mock.calls.GetNetworkACLByName
	mock.lockGetNetworkACLByName.RUnlock()
	return calls
}

// GetNetworkACLs calls GetNetworkACLsFunc.
func (mock *ServerClientMock) GetNetworkACLs(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkACL, error) {
	if mock.GetNetworkACLsFunc == nil {
		panic("ServerClientMock.GetNetworkACLsFunc: method is nil but ServerClient.GetNetworkACLs was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetNetworkACLs.Lock()
	mock.calls.GetNetworkACLs = append(mock.calls.GetNetworkACLs, callInfo)
	mock.lockGetNetworkACLs.Unlock()
	return mock.GetNetworkACLsFunc(ctx, cluster)
}

// GetNetworkACLsCalls gets all the calls that were made to GetNetworkACLs.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkACLsCalls())
func (mock *ServerClientMock) GetNetworkACLsCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetNetworkACLs.RLock()
	calls = mock.calls.GetNetworkACLs
	mock.lockGetNetworkACLs.RUnlock()
	return calls
}

// GetNetworkAddressSetByName calls GetNetworkAddressSetByNameFunc.
func (mock *ServerClientMock) GetNetworkAddressSetByName(ctx context.Context, cluster provisioning.Cluster, networkAddressSetName string) (api.NetworkAddressSet, error) {
	if mock.GetNetworkAddressSetByNameFunc == nil {
		panic("ServerClientMock.GetNetworkAddressSetByNameFunc: method is nil but ServerClient.GetNetworkAddressSetByName was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		Cluster               provisioning.Cluster
		NetworkAddressSetName string
	}{
		Ctx:                   ctx,
		Cluster:               cluster,
		NetworkAddressSetName: networkAddressSetName,
	}
	mock.lockGetNetworkAddressSetByName.Lock()
	mock.calls.GetNetworkAddressSetByName = append(mock.calls.GetNetworkAddressSetByName, callInfo)
	mock.lockGetNetworkAddressSetByName.Unlock()
	return mock.GetNetworkAddressSetByNameFunc(ctx, cluster, networkAddressSetName)
}

// GetNetworkAddressSetByNameCalls gets all the calls that were made to GetNetworkAddressSetByName.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkAddressSetByNameCalls())
func (mock *ServerClientMock) GetNetworkAddressSetByNameCalls() []struct {
	Ctx                   context.Context
	Cluster               provisioning.Cluster
	NetworkAddressSetName string
} {
	var calls []struct {
		Ctx                   context.Context
		Cluster               provisioning.Cluster
		NetworkAddressSetName string
	}
	mock.lockGetNetworkAddressSetByName.RLock()
	calls = mock.calls.GetNetworkAddressSetByName
	mock.lockGetNetworkAddressSetByName.RUnlock()
	return calls
}

// GetNetworkAddressSets calls GetNetworkAddressSetsFunc.
func (mock *ServerClientMock) GetNetworkAddressSets(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkAddressSet, error) {
	if mock.GetNetworkAddressSetsFunc == nil {
		panic("ServerClientMock.GetNetworkAddressSetsFunc: method is nil but ServerClient.GetNetworkAddressSets was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetNetworkAddressSets.Lock()
	mock.calls.GetNetworkAddressSets = append(mock.calls.GetNetworkAddressSets, callInfo)
	mock.lockGetNetworkAddressSets.Unlock()
	return mock.GetNetworkAddressSetsFunc(ctx, cluster)
}

// GetNetworkAddressSetsCalls gets all the calls that were made to GetNetworkAddressSets.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkAddressSetsCalls())
func (mock *ServerClientMock) GetNetworkAddressSetsCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetNetworkAddressSets.RLock()
	calls = mock.calls.GetNetworkAddressSets
	mock.lockGetNetworkAddressSets.RUnlock()
	return calls
}

// GetNetworkByName calls GetNetworkByNameFunc.
func (mock *ServerClientMock) GetNetworkByName(ctx context.Context, cluster provisioning.Cluster, networkName string) (api.Network, error) {
	if mock.GetNetworkByNameFunc == nil {
		panic("ServerClientMock.GetNetworkByNameFunc: method is nil but ServerClient.GetNetworkByName was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}{
		Ctx:         ctx,
		Cluster:     cluster,
		NetworkName: networkName,
	}
	mock.lockGetNetworkByName.Lock()
	mock.calls.GetNetworkByName = append(mock.calls.GetNetworkByName, callInfo)
	mock.lockGetNetworkByName.Unlock()
	return mock.GetNetworkByNameFunc(ctx, cluster, networkName)
}

// GetNetworkByNameCalls gets all the calls that were made to GetNetworkByName.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkByNameCalls())
func (mock *ServerClientMock) GetNetworkByNameCalls() []struct {
	Ctx         context.Context
	Cluster     provisioning.Cluster
	NetworkName string
} {
	var calls []struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}
	mock.lockGetNetworkByName.RLock()
	calls = mock.calls.GetNetworkByName
	mock.lockGetNetworkByName.RUnlock()
	return calls
}

// GetNetworkForwardByName calls GetNetworkForwardByNameFunc.
func (mock *ServerClientMock) GetNetworkForwardByName(ctx context.Context, cluster provisioning.Cluster, networkName string, networkForwardName string) (api.NetworkForward, error) {
	if mock.GetNetworkForwardByNameFunc == nil {
		panic("ServerClientMock.GetNetworkForwardByNameFunc: method is nil but ServerClient.GetNetworkForwardByName was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		Cluster            provisioning.Cluster
		NetworkName        string
		NetworkForwardName string
	}{
		Ctx:                ctx,
		Cluster:            cluster,
		NetworkName:        networkName,
		NetworkForwardName: networkForwardName,
	}
	mock.lockGetNetworkForwardByName.Lock()
	mock.calls.GetNetworkForwardByName = append(mock.calls.GetNetworkForwardByName, callInfo)
	mock.lockGetNetworkForwardByName.Unlock()
	return mock.GetNetworkForwardByNameFunc(ctx, cluster, networkName, networkForwardName)
}

// GetNetworkForwardByNameCalls gets all the calls that were made to GetNetworkForwardByName.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkForwardByNameCalls())
func (mock *ServerClientMock) GetNetworkForwardByNameCalls() []struct {
	Ctx                context.Context
	Cluster            provisioning.Cluster
	NetworkName        string
	NetworkForwardName string
} {
	var calls []struct {
		Ctx                context.Context
		Cluster            provisioning.Cluster
		NetworkName        string
		NetworkForwardName string
	}
	mock.lockGetNetworkForwardByName.RLock()
	calls = mock.calls.GetNetworkForwardByName
	mock.lockGetNetworkForwardByName.RUnlock()
	return calls
}

// GetNetworkForwards calls GetNetworkForwardsFunc.
func (mock *ServerClientMock) GetNetworkForwards(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkForward, error) {
	if mock.GetNetworkForwardsFunc == nil {
		panic("ServerClientMock.GetNetworkForwardsFunc: method is nil but ServerClient.GetNetworkForwards was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}{
		Ctx:         ctx,
		Cluster:     cluster,
		NetworkName: networkName,
	}
	mock.lockGetNetworkForwards.Lock()
	mock.calls.GetNetworkForwards = append(mock.calls.GetNetworkForwards, callInfo)
	mock.lockGetNetworkForwards.Unlock()
	return mock.GetNetworkForwardsFunc(ctx, cluster, networkName)
}

// GetNetworkForwardsCalls gets all the calls that were made to GetNetworkForwards.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkForwardsCalls())
func (mock *ServerClientMock) GetNetworkForwardsCalls() []struct {
	Ctx         context.Context
	Cluster     provisioning.Cluster
	NetworkName string
} {
	var calls []struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}
	mock.lockGetNetworkForwards.RLock()
	calls = mock.calls.GetNetworkForwards
	mock.lockGetNetworkForwards.RUnlock()
	return calls
}

// GetNetworkIntegrationByName calls GetNetworkIntegrationByNameFunc.
func (mock *ServerClientMock) GetNetworkIntegrationByName(ctx context.Context, cluster provisioning.Cluster, networkIntegrationName string) (api.NetworkIntegration, error) {
	if mock.GetNetworkIntegrationByNameFunc == nil {
		panic("ServerClientMock.GetNetworkIntegrationByNameFunc: method is nil but ServerClient.GetNetworkIntegrationByName was just called")
	}
	callInfo := struct {
		Ctx                    context.Context
		Cluster                provisioning.Cluster
		NetworkIntegrationName string
	}{
		Ctx:                    ctx,
		Cluster:                cluster,
		NetworkIntegrationName: networkIntegrationName,
	}
	mock.lockGetNetworkIntegrationByName.Lock()
	mock.calls.GetNetworkIntegrationByName = append(mock.calls.GetNetworkIntegrationByName, callInfo)
	mock.lockGetNetworkIntegrationByName.Unlock()
	return mock.GetNetworkIntegrationByNameFunc(ctx, cluster, networkIntegrationName)
}

// GetNetworkIntegrationByNameCalls gets all the calls that were made to GetNetworkIntegrationByName.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkIntegrationByNameCalls())
func (mock *ServerClientMock) GetNetworkIntegrationByNameCalls() []struct {
	Ctx                    context.Context
	Cluster                provisioning.Cluster
	NetworkIntegrationName string
} {
	var calls []struct {
		Ctx                    context.Context
		Cluster                provisioning.Cluster
		NetworkIntegrationName string
	}
	mock.lockGetNetworkIntegrationByName.RLock()
	calls = mock.calls.GetNetworkIntegrationByName
	mock.lockGetNetworkIntegrationByName.RUnlock()
	return calls
}

// GetNetworkIntegrations calls GetNetworkIntegrationsFunc.
func (mock *ServerClientMock) GetNetworkIntegrations(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkIntegration, error) {
	if mock.GetNetworkIntegrationsFunc == nil {
		panic("ServerClientMock.GetNetworkIntegrationsFunc: method is nil but ServerClient.GetNetworkIntegrations was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetNetworkIntegrations.Lock()
	mock.calls.GetNetworkIntegrations = append(mock.calls.GetNetworkIntegrations, callInfo)
	mock.lockGetNetworkIntegrations.Unlock()
	return mock.GetNetworkIntegrationsFunc(ctx, cluster)
}

// GetNetworkIntegrationsCalls gets all the calls that were made to GetNetworkIntegrations.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkIntegrationsCalls())
func (mock *ServerClientMock) GetNetworkIntegrationsCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetNetworkIntegrations.RLock()
	calls = mock.calls.GetNetworkIntegrations
	mock.lockGetNetworkIntegrations.RUnlock()
	return calls
}

// GetNetworkLoadBalancerByName calls GetNetworkLoadBalancerByNameFunc.
func (mock *ServerClientMock) GetNetworkLoadBalancerByName(ctx context.Context, cluster provisioning.Cluster, networkName string, networkLoadBalancerName string) (api.NetworkLoadBalancer, error) {
	if mock.GetNetworkLoadBalancerByNameFunc == nil {
		panic("ServerClientMock.GetNetworkLoadBalancerByNameFunc: method is nil but ServerClient.GetNetworkLoadBalancerByName was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		Cluster                 provisioning.Cluster
		NetworkName             string
		NetworkLoadBalancerName string
	}{
		Ctx:                     ctx,
		Cluster:                 cluster,
		NetworkName:             networkName,
		NetworkLoadBalancerName: networkLoadBalancerName,
	}
	mock.lockGetNetworkLoadBalancerByName.Lock()
	mock.calls.GetNetworkLoadBalancerByName = append(mock.calls.GetNetworkLoadBalancerByName, callInfo)
	mock.lockGetNetworkLoadBalancerByName.Unlock()
	return mock.GetNetworkLoadBalancerByNameFunc(ctx, cluster, networkName, networkLoadBalancerName)
}

// GetNetworkLoadBalancerByNameCalls gets all the calls that were made to GetNetworkLoadBalancerByName.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkLoadBalancerByNameCalls())
func (mock *ServerClientMock) GetNetworkLoadBalancerByNameCalls() []struct {
	Ctx                     context.Context
	Cluster                 provisioning.Cluster
	NetworkName             string
	NetworkLoadBalancerName string
} {
	var calls []struct {
		Ctx                     context.Context
		Cluster                 provisioning.Cluster
		NetworkName             string
		NetworkLoadBalancerName string
	}
	mock.lockGetNetworkLoadBalancerByName.RLock()
	calls = mock.calls.GetNetworkLoadBalancerByName
	mock.lockGetNetworkLoadBalancerByName.RUnlock()
	return calls
}

// GetNetworkLoadBalancers calls GetNetworkLoadBalancersFunc.
func (mock *ServerClientMock) GetNetworkLoadBalancers(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkLoadBalancer, error) {
	if mock.GetNetworkLoadBalancersFunc == nil {
		panic("ServerClientMock.GetNetworkLoadBalancersFunc: method is nil but ServerClient.GetNetworkLoadBalancers was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}{
		Ctx:         ctx,
		Cluster:     cluster,
		NetworkName: networkName,
	}
	mock.lockGetNetworkLoadBalancers.Lock()
	mock.calls.GetNetworkLoadBalancers = append(mock.calls.GetNetworkLoadBalancers, callInfo)
	mock.lockGetNetworkLoadBalancers.Unlock()
	return mock.GetNetworkLoadBalancersFunc(ctx, cluster, networkName)
}

// GetNetworkLoadBalancersCalls gets all the calls that were made to GetNetworkLoadBalancers.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkLoadBalancersCalls())
func (mock *ServerClientMock) GetNetworkLoadBalancersCalls() []struct {
	Ctx         context.Context
	Cluster     provisioning.Cluster
	NetworkName string
} {
	var calls []struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}
	mock.lockGetNetworkLoadBalancers.RLock()
	calls = mock.calls.GetNetworkLoadBalancers
	mock.lockGetNetworkLoadBalancers.RUnlock()
	return calls
}

// GetNetworkPeerByName calls GetNetworkPeerByNameFunc.
func (mock *ServerClientMock) GetNetworkPeerByName(ctx context.Context, cluster provisioning.Cluster, networkName string, networkPeerName string) (api.NetworkPeer, error) {
	if mock.GetNetworkPeerByNameFunc == nil {
		panic("ServerClientMock.GetNetworkPeerByNameFunc: method is nil but ServerClient.GetNetworkPeerByName was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		NetworkName     string
		NetworkPeerName string
	}{
		Ctx:             ctx,
		Cluster:         cluster,
		NetworkName:     networkName,
		NetworkPeerName: networkPeerName,
	}
	mock.lockGetNetworkPeerByName.Lock()
	mock.calls.GetNetworkPeerByName = append(mock.calls.GetNetworkPeerByName, callInfo)
	mock.lockGetNetworkPeerByName.Unlock()
	return mock.GetNetworkPeerByNameFunc(ctx, cluster, networkName, networkPeerName)
}

// GetNetworkPeerByNameCalls gets all the calls that were made to GetNetworkPeerByName.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkPeerByNameCalls())
func (mock *ServerClientMock) GetNetworkPeerByNameCalls() []struct {
	Ctx             context.Context
	Cluster         provisioning.Cluster
	NetworkName     string
	NetworkPeerName string
} {
	var calls []struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		NetworkName     string
		NetworkPeerName string
	}
	mock.lockGetNetworkPeerByName.RLock()
	calls = mock.calls.GetNetworkPeerByName
	mock.lockGetNetworkPeerByName.RUnlock()
	return calls
}

// GetNetworkPeers calls GetNetworkPeersFunc.
func (mock *ServerClientMock) GetNetworkPeers(ctx context.Context, cluster provisioning.Cluster, networkName string) ([]api.NetworkPeer, error) {
	if mock.GetNetworkPeersFunc == nil {
		panic("ServerClientMock.GetNetworkPeersFunc: method is nil but ServerClient.GetNetworkPeers was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}{
		Ctx:         ctx,
		Cluster:     cluster,
		NetworkName: networkName,
	}
	mock.lockGetNetworkPeers.Lock()
	mock.calls.GetNetworkPeers = append(mock.calls.GetNetworkPeers, callInfo)
	mock.lockGetNetworkPeers.Unlock()
	return mock.GetNetworkPeersFunc(ctx, cluster, networkName)
}

// GetNetworkPeersCalls gets all the calls that were made to GetNetworkPeers.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkPeersCalls())
func (mock *ServerClientMock) GetNetworkPeersCalls() []struct {
	Ctx         context.Context
	Cluster     provisioning.Cluster
	NetworkName string
} {
	var calls []struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		NetworkName string
	}
	mock.lockGetNetworkPeers.RLock()
	calls = mock.calls.GetNetworkPeers
	mock.lockGetNetworkPeers.RUnlock()
	return calls
}

// GetNetworkZoneByName calls GetNetworkZoneByNameFunc.
func (mock *ServerClientMock) GetNetworkZoneByName(ctx context.Context, cluster provisioning.Cluster, networkZoneName string) (api.NetworkZone, error) {
	if mock.GetNetworkZoneByNameFunc == nil {
		panic("ServerClientMock.GetNetworkZoneByNameFunc: method is nil but ServerClient.GetNetworkZoneByName was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		NetworkZoneName string
	}{
		Ctx:             ctx,
		Cluster:         cluster,
		NetworkZoneName: networkZoneName,
	}
	mock.lockGetNetworkZoneByName.Lock()
	mock.calls.GetNetworkZoneByName = append(mock.calls.GetNetworkZoneByName, callInfo)
	mock.lockGetNetworkZoneByName.Unlock()
	return mock.GetNetworkZoneByNameFunc(ctx, cluster, networkZoneName)
}

// GetNetworkZoneByNameCalls gets all the calls that were made to GetNetworkZoneByName.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkZoneByNameCalls())
func (mock *ServerClientMock) GetNetworkZoneByNameCalls() []struct {
	Ctx             context.Context
	Cluster         provisioning.Cluster
	NetworkZoneName string
} {
	var calls []struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		NetworkZoneName string
	}
	mock.lockGetNetworkZoneByName.RLock()
	calls = mock.calls.GetNetworkZoneByName
	mock.lockGetNetworkZoneByName.RUnlock()
	return calls
}

// GetNetworkZones calls GetNetworkZonesFunc.
func (mock *ServerClientMock) GetNetworkZones(ctx context.Context, cluster provisioning.Cluster) ([]api.NetworkZone, error) {
	if mock.GetNetworkZonesFunc == nil {
		panic("ServerClientMock.GetNetworkZonesFunc: method is nil but ServerClient.GetNetworkZones was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetNetworkZones.Lock()
	mock.calls.GetNetworkZones = append(mock.calls.GetNetworkZones, callInfo)
	mock.lockGetNetworkZones.Unlock()
	return mock.GetNetworkZonesFunc(ctx, cluster)
}

// GetNetworkZonesCalls gets all the calls that were made to GetNetworkZones.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkZonesCalls())
func (mock *ServerClientMock) GetNetworkZonesCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetNetworkZones.RLock()
	calls = mock.calls.GetNetworkZones
	mock.lockGetNetworkZones.RUnlock()
	return calls
}

// GetNetworks calls GetNetworksFunc.
func (mock *ServerClientMock) GetNetworks(ctx context.Context, cluster provisioning.Cluster) ([]api.Network, error) {
	if mock.GetNetworksFunc == nil {
		panic("ServerClientMock.GetNetworksFunc: method is nil but ServerClient.GetNetworks was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetNetworks.Lock()
	mock.calls.GetNetworks = append(mock.calls.GetNetworks, callInfo)
	mock.lockGetNetworks.Unlock()
	return mock.GetNetworksFunc(ctx, cluster)
}

// GetNetworksCalls gets all the calls that were made to GetNetworks.
// Check the length with:
//
//	len(mockedServerClient.GetNetworksCalls())
func (mock *ServerClientMock) GetNetworksCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetNetworks.RLock()
	calls = mock.calls.GetNetworks
	mock.lockGetNetworks.RUnlock()
	return calls
}

// GetProfileByName calls GetProfileByNameFunc.
func (mock *ServerClientMock) GetProfileByName(ctx context.Context, cluster provisioning.Cluster, profileName string) (api.Profile, error) {
	if mock.GetProfileByNameFunc == nil {
		panic("ServerClientMock.GetProfileByNameFunc: method is nil but ServerClient.GetProfileByName was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		ProfileName string
	}{
		Ctx:         ctx,
		Cluster:     cluster,
		ProfileName: profileName,
	}
	mock.lockGetProfileByName.Lock()
	mock.calls.GetProfileByName = append(mock.calls.GetProfileByName, callInfo)
	mock.lockGetProfileByName.Unlock()
	return mock.GetProfileByNameFunc(ctx, cluster, profileName)
}

// GetProfileByNameCalls gets all the calls that were made to GetProfileByName.
// Check the length with:
//
//	len(mockedServerClient.GetProfileByNameCalls())
func (mock *ServerClientMock) GetProfileByNameCalls() []struct {
	Ctx         context.Context
	Cluster     provisioning.Cluster
	ProfileName string
} {
	var calls []struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		ProfileName string
	}
	mock.lockGetProfileByName.RLock()
	calls = mock.calls.GetProfileByName
	mock.lockGetProfileByName.RUnlock()
	return calls
}

// GetProfiles calls GetProfilesFunc.
func (mock *ServerClientMock) GetProfiles(ctx context.Context, cluster provisioning.Cluster) ([]api.Profile, error) {
	if mock.GetProfilesFunc == nil {
		panic("ServerClientMock.GetProfilesFunc: method is nil but ServerClient.GetProfiles was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetProfiles.Lock()
	mock.calls.GetProfiles = append(mock.calls.GetProfiles, callInfo)
	mock.lockGetProfiles.Unlock()
	return mock.GetProfilesFunc(ctx, cluster)
}

// GetProfilesCalls gets all the calls that were made to GetProfiles.
// Check the length with:
//
//	len(mockedServerClient.GetProfilesCalls())
func (mock *ServerClientMock) GetProfilesCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetProfiles.RLock()
	calls = mock.calls.GetProfiles
	mock.lockGetProfiles.RUnlock()
	return calls
}

// GetProjectByName calls GetProjectByNameFunc.
func (mock *ServerClientMock) GetProjectByName(ctx context.Context, cluster provisioning.Cluster, projectName string) (api.Project, error) {
	if mock.GetProjectByNameFunc == nil {
		panic("ServerClientMock.GetProjectByNameFunc: method is nil but ServerClient.GetProjectByName was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		ProjectName string
	}{
		Ctx:         ctx,
		Cluster:     cluster,
		ProjectName: projectName,
	}
	mock.lockGetProjectByName.Lock()
	mock.calls.GetProjectByName = append(mock.calls.GetProjectByName, callInfo)
	mock.lockGetProjectByName.Unlock()
	return mock.GetProjectByNameFunc(ctx, cluster, projectName)
}

// GetProjectByNameCalls gets all the calls that were made to GetProjectByName.
// Check the length with:
//
//	len(mockedServerClient.GetProjectByNameCalls())
func (mock *ServerClientMock) GetProjectByNameCalls() []struct {
	Ctx         context.Context
	Cluster     provisioning.Cluster
	ProjectName string
} {
	var calls []struct {
		Ctx         context.Context
		Cluster     provisioning.Cluster
		ProjectName string
	}
	mock.lockGetProjectByName.RLock()
	calls = mock.calls.GetProjectByName
	mock.lockGetProjectByName.RUnlock()
	return calls
}

// GetProjects calls GetProjectsFunc.
func (mock *ServerClientMock) GetProjects(ctx context.Context, cluster provisioning.Cluster) ([]api.Project, error) {
	if mock.GetProjectsFunc == nil {
		panic("ServerClientMock.GetProjectsFunc: method is nil but ServerClient.GetProjects was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetProjects.Lock()
	mock.calls.GetProjects = append(mock.calls.GetProjects, callInfo)
	mock.lockGetProjects.Unlock()
	return mock.GetProjectsFunc(ctx, cluster)
}

// GetProjectsCalls gets all the calls that were made to GetProjects.
// Check the length with:
//
//	len(mockedServerClient.GetProjectsCalls())
func (mock *ServerClientMock) GetProjectsCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetProjects.RLock()
	calls = mock.calls.GetProjects
	mock.lockGetProjects.RUnlock()
	return calls
}

// GetStorageBucketByName calls GetStorageBucketByNameFunc.
func (mock *ServerClientMock) GetStorageBucketByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageBucketName string) (api.StorageBucket, error) {
	if mock.GetStorageBucketByNameFunc == nil {
		panic("ServerClientMock.GetStorageBucketByNameFunc: method is nil but ServerClient.GetStorageBucketByName was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Cluster           provisioning.Cluster
		StoragePoolName   string
		StorageBucketName string
	}{
		Ctx:               ctx,
		Cluster:           cluster,
		StoragePoolName:   storagePoolName,
		StorageBucketName: storageBucketName,
	}
	mock.lockGetStorageBucketByName.Lock()
	mock.calls.GetStorageBucketByName = append(mock.calls.GetStorageBucketByName, callInfo)
	mock.lockGetStorageBucketByName.Unlock()
	return mock.GetStorageBucketByNameFunc(ctx, cluster, storagePoolName, storageBucketName)
}

// GetStorageBucketByNameCalls gets all the calls that were made to GetStorageBucketByName.
// Check the length with:
//
//	len(mockedServerClient.GetStorageBucketByNameCalls())
func (mock *ServerClientMock) GetStorageBucketByNameCalls() []struct {
	Ctx               context.Context
	Cluster           provisioning.Cluster
	StoragePoolName   string
	StorageBucketName string
} {
	var calls []struct {
		Ctx               context.Context
		Cluster           provisioning.Cluster
		StoragePoolName   string
		StorageBucketName string
	}
	mock.lockGetStorageBucketByName.RLock()
	calls = mock.calls.GetStorageBucketByName
	mock.lockGetStorageBucketByName.RUnlock()
	return calls
}

// GetStorageBuckets calls GetStorageBucketsFunc.
func (mock *ServerClientMock) GetStorageBuckets(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageBucket, error) {
	if mock.GetStorageBucketsFunc == nil {
		panic("ServerClientMock.GetStorageBucketsFunc: method is nil but ServerClient.GetStorageBuckets was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		StoragePoolName string
	}{
		Ctx:             ctx,
		Cluster:         cluster,
		StoragePoolName: storagePoolName,
	}
	mock.lockGetStorageBuckets.Lock()
	mock.calls.GetStorageBuckets = append(mock.calls.GetStorageBuckets, callInfo)
	mock.lockGetStorageBuckets.Unlock()
	return mock.GetStorageBucketsFunc(ctx, cluster, storagePoolName)
}

// GetStorageBucketsCalls gets all the calls that were made to GetStorageBuckets.
// Check the length with:
//
//	len(mockedServerClient.GetStorageBucketsCalls())
func (mock *ServerClientMock) GetStorageBucketsCalls() []struct {
	Ctx             context.Context
	Cluster         provisioning.Cluster
	StoragePoolName string
} {
	var calls []struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		StoragePoolName string
	}
	mock.lockGetStorageBuckets.RLock()
	calls = mock.calls.GetStorageBuckets
	mock.lockGetStorageBuckets.RUnlock()
	return calls
}

// GetStoragePoolByName calls GetStoragePoolByNameFunc.
func (mock *ServerClientMock) GetStoragePoolByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) (api.StoragePool, error) {
	if mock.GetStoragePoolByNameFunc == nil {
		panic("ServerClientMock.GetStoragePoolByNameFunc: method is nil but ServerClient.GetStoragePoolByName was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		StoragePoolName string
	}{
		Ctx:             ctx,
		Cluster:         cluster,
		StoragePoolName: storagePoolName,
	}
	mock.lockGetStoragePoolByName.Lock()
	mock.calls.GetStoragePoolByName = append(mock.calls.GetStoragePoolByName, callInfo)
	mock.lockGetStoragePoolByName.Unlock()
	return mock.GetStoragePoolByNameFunc(ctx, cluster, storagePoolName)
}

// GetStoragePoolByNameCalls gets all the calls that were made to GetStoragePoolByName.
// Check the length with:
//
//	len(mockedServerClient.GetStoragePoolByNameCalls())
func (mock *ServerClientMock) GetStoragePoolByNameCalls() []struct {
	Ctx             context.Context
	Cluster         provisioning.Cluster
	StoragePoolName string
} {
	var calls []struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		StoragePoolName string
	}
	mock.lockGetStoragePoolByName.RLock()
	calls = mock.calls.GetStoragePoolByName
	mock.lockGetStoragePoolByName.RUnlock()
	return calls
}

// GetStoragePools calls GetStoragePoolsFunc.
func (mock *ServerClientMock) GetStoragePools(ctx context.Context, cluster provisioning.Cluster) ([]api.StoragePool, error) {
	if mock.GetStoragePoolsFunc == nil {
		panic("ServerClientMock.GetStoragePoolsFunc: method is nil but ServerClient.GetStoragePools was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetStoragePools.Lock()
	mock.calls.GetStoragePools = append(mock.calls.GetStoragePools, callInfo)
	mock.lockGetStoragePools.Unlock()
	return mock.GetStoragePoolsFunc(ctx, cluster)
}

// GetStoragePoolsCalls gets all the calls that were made to GetStoragePools.
// Check the length with:
//
//	len(mockedServerClient.GetStoragePoolsCalls())
func (mock *ServerClientMock) GetStoragePoolsCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetStoragePools.RLock()
	calls = mock.calls.GetStoragePools
	mock.lockGetStoragePools.RUnlock()
	return calls
}

// GetStorageVolumeByName calls GetStorageVolumeByNameFunc.
func (mock *ServerClientMock) GetStorageVolumeByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageVolumeName string, storageVolumeType string) (api.StorageVolume, error) {
	if mock.GetStorageVolumeByNameFunc == nil {
		panic("ServerClientMock.GetStorageVolumeByNameFunc: method is nil but ServerClient.GetStorageVolumeByName was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Cluster           provisioning.Cluster
		StoragePoolName   string
		StorageVolumeName string
		StorageVolumeType string
	}{
		Ctx:               ctx,
		Cluster:           cluster,
		StoragePoolName:   storagePoolName,
		StorageVolumeName: storageVolumeName,
		StorageVolumeType: storageVolumeType,
	}
	mock.lockGetStorageVolumeByName.Lock()
	mock.calls.GetStorageVolumeByName = append(mock.calls.GetStorageVolumeByName, callInfo)
	mock.lockGetStorageVolumeByName.Unlock()
	return mock.GetStorageVolumeByNameFunc(ctx, cluster, storagePoolName, storageVolumeName, storageVolumeType)
}

// GetStorageVolumeByNameCalls gets all the calls that were made to GetStorageVolumeByName.
// Check the length with:
//
//	len(mockedServerClient.GetStorageVolumeByNameCalls())
func (mock *ServerClientMock) GetStorageVolumeByNameCalls() []struct {
	Ctx               context.Context
	Cluster           provisioning.Cluster
	StoragePoolName   string
	StorageVolumeName string
	StorageVolumeType string
} {
	var calls []struct {
		Ctx               context.Context
		Cluster           provisioning.Cluster
		StoragePoolName   string
		StorageVolumeName string
		StorageVolumeType string
	}
	mock.lockGetStorageVolumeByName.RLock()
	calls = mock.calls.GetStorageVolumeByName
	mock.lockGetStorageVolumeByName.RUnlock()
	return calls
}

// GetStorageVolumes calls GetStorageVolumesFunc.
func (mock *ServerClientMock) GetStorageVolumes(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) ([]api.StorageVolume, error) {
	if mock.GetStorageVolumesFunc == nil {
		panic("ServerClientMock.GetStorageVolumesFunc: method is nil but ServerClient.GetStorageVolumes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		StoragePoolName string
	}{
		Ctx:             ctx,
		Cluster:         cluster,
		StoragePoolName: storagePoolName,
	}
	mock.lockGetStorageVolumes.Lock()
	mock.calls.GetStorageVolumes = append(mock.calls.GetStorageVolumes, callInfo)
	mock.lockGetStorageVolumes.Unlock()
	return mock.GetStorageVolumesFunc(ctx, cluster, storagePoolName)
}

// GetStorageVolumesCalls gets all the calls that were made to GetStorageVolumes.
// Check the length with:
//
//	len(mockedServerClient.GetStorageVolumesCalls())
func (mock *ServerClientMock) GetStorageVolumesCalls() []struct {
	Ctx             context.Context
	Cluster         provisioning.Cluster
	StoragePoolName string
} {
	var calls []struct {
		Ctx             context.Context
		Cluster         provisioning.Cluster
		StoragePoolName string
	}
	mock.lockGetStorageVolumes.RLock()
	calls = mock.calls.GetStorageVolumes
	mock.lockGetStorageVolumes.RUnlock()
	return calls
}

// HasExtension calls HasExtensionFunc.
func (mock *ServerClientMock) HasExtension(ctx context.Context, cluster provisioning.Cluster, extension string) bool {
	if mock.HasExtensionFunc == nil {
		panic("ServerClientMock.HasExtensionFunc: method is nil but ServerClient.HasExtension was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Cluster   provisioning.Cluster
		Extension string
	}{
		Ctx:       ctx,
		Cluster:   cluster,
		Extension: extension,
	}
	mock.lockHasExtension.Lock()
	mock.calls.HasExtension = append(mock.calls.HasExtension, callInfo)
	mock.lockHasExtension.Unlock()
	return mock.HasExtensionFunc(ctx, cluster, extension)
}

// HasExtensionCalls gets all the calls that were made to HasExtension.
// Check the length with:
//
//	len(mockedServerClient.HasExtensionCalls())
func (mock *ServerClientMock) HasExtensionCalls() []struct {
	Ctx       context.Context
	Cluster   provisioning.Cluster
	Extension string
} {
	var calls []struct {
		Ctx       context.Context
		Cluster   provisioning.Cluster
		Extension string
	}
	mock.lockHasExtension.RLock()
	calls = mock.calls.HasExtension
	mock.lockHasExtension.RUnlock()
	return calls
}
