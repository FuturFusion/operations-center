// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// Ensure that NetworkLoadBalancerServerClientMock does implement inventory.NetworkLoadBalancerServerClient.
// If this is not the case, regenerate this file with mockery.
var _ inventory.NetworkLoadBalancerServerClient = &NetworkLoadBalancerServerClientMock{}

// NetworkLoadBalancerServerClientMock is a mock implementation of inventory.NetworkLoadBalancerServerClient.
//
//	func TestSomethingThatUsesNetworkLoadBalancerServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkLoadBalancerServerClient
//		mockedNetworkLoadBalancerServerClient := &NetworkLoadBalancerServerClientMock{
//			GetNetworkLoadBalancerByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, networkName string, networkLoadBalancerName string) (api.NetworkLoadBalancer, error) {
//				panic("mock out the GetNetworkLoadBalancerByName method")
//			},
//			GetNetworkLoadBalancersFunc: func(ctx context.Context, endpoint provisioning.Endpoint, networkName string) ([]api.NetworkLoadBalancer, error) {
//				panic("mock out the GetNetworkLoadBalancers method")
//			},
//		}
//
//		// use mockedNetworkLoadBalancerServerClient in code that requires inventory.NetworkLoadBalancerServerClient
//		// and then make assertions.
//
//	}
type NetworkLoadBalancerServerClientMock struct {
	// GetNetworkLoadBalancerByNameFunc mocks the GetNetworkLoadBalancerByName method.
	GetNetworkLoadBalancerByNameFunc func(ctx context.Context, endpoint provisioning.Endpoint, networkName string, networkLoadBalancerName string) (api.NetworkLoadBalancer, error)

	// GetNetworkLoadBalancersFunc mocks the GetNetworkLoadBalancers method.
	GetNetworkLoadBalancersFunc func(ctx context.Context, endpoint provisioning.Endpoint, networkName string) ([]api.NetworkLoadBalancer, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNetworkLoadBalancerByName holds details about calls to the GetNetworkLoadBalancerByName method.
		GetNetworkLoadBalancerByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
			// NetworkName is the networkName argument value.
			NetworkName string
			// NetworkLoadBalancerName is the networkLoadBalancerName argument value.
			NetworkLoadBalancerName string
		}
		// GetNetworkLoadBalancers holds details about calls to the GetNetworkLoadBalancers method.
		GetNetworkLoadBalancers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
			// NetworkName is the networkName argument value.
			NetworkName string
		}
	}
	lockGetNetworkLoadBalancerByName sync.RWMutex
	lockGetNetworkLoadBalancers      sync.RWMutex
}

// GetNetworkLoadBalancerByName calls GetNetworkLoadBalancerByNameFunc.
func (mock *NetworkLoadBalancerServerClientMock) GetNetworkLoadBalancerByName(ctx context.Context, endpoint provisioning.Endpoint, networkName string, networkLoadBalancerName string) (api.NetworkLoadBalancer, error) {
	if mock.GetNetworkLoadBalancerByNameFunc == nil {
		panic("NetworkLoadBalancerServerClientMock.GetNetworkLoadBalancerByNameFunc: method is nil but NetworkLoadBalancerServerClient.GetNetworkLoadBalancerByName was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		Endpoint                provisioning.Endpoint
		NetworkName             string
		NetworkLoadBalancerName string
	}{
		Ctx:                     ctx,
		Endpoint:                endpoint,
		NetworkName:             networkName,
		NetworkLoadBalancerName: networkLoadBalancerName,
	}
	mock.lockGetNetworkLoadBalancerByName.Lock()
	mock.calls.GetNetworkLoadBalancerByName = append(mock.calls.GetNetworkLoadBalancerByName, callInfo)
	mock.lockGetNetworkLoadBalancerByName.Unlock()
	return mock.GetNetworkLoadBalancerByNameFunc(ctx, endpoint, networkName, networkLoadBalancerName)
}

// GetNetworkLoadBalancerByNameCalls gets all the calls that were made to GetNetworkLoadBalancerByName.
// Check the length with:
//
//	len(mockedNetworkLoadBalancerServerClient.GetNetworkLoadBalancerByNameCalls())
func (mock *NetworkLoadBalancerServerClientMock) GetNetworkLoadBalancerByNameCalls() []struct {
	Ctx                     context.Context
	Endpoint                provisioning.Endpoint
	NetworkName             string
	NetworkLoadBalancerName string
} {
	var calls []struct {
		Ctx                     context.Context
		Endpoint                provisioning.Endpoint
		NetworkName             string
		NetworkLoadBalancerName string
	}
	mock.lockGetNetworkLoadBalancerByName.RLock()
	calls = mock.calls.GetNetworkLoadBalancerByName
	mock.lockGetNetworkLoadBalancerByName.RUnlock()
	return calls
}

// GetNetworkLoadBalancers calls GetNetworkLoadBalancersFunc.
func (mock *NetworkLoadBalancerServerClientMock) GetNetworkLoadBalancers(ctx context.Context, endpoint provisioning.Endpoint, networkName string) ([]api.NetworkLoadBalancer, error) {
	if mock.GetNetworkLoadBalancersFunc == nil {
		panic("NetworkLoadBalancerServerClientMock.GetNetworkLoadBalancersFunc: method is nil but NetworkLoadBalancerServerClient.GetNetworkLoadBalancers was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Endpoint    provisioning.Endpoint
		NetworkName string
	}{
		Ctx:         ctx,
		Endpoint:    endpoint,
		NetworkName: networkName,
	}
	mock.lockGetNetworkLoadBalancers.Lock()
	mock.calls.GetNetworkLoadBalancers = append(mock.calls.GetNetworkLoadBalancers, callInfo)
	mock.lockGetNetworkLoadBalancers.Unlock()
	return mock.GetNetworkLoadBalancersFunc(ctx, endpoint, networkName)
}

// GetNetworkLoadBalancersCalls gets all the calls that were made to GetNetworkLoadBalancers.
// Check the length with:
//
//	len(mockedNetworkLoadBalancerServerClient.GetNetworkLoadBalancersCalls())
func (mock *NetworkLoadBalancerServerClientMock) GetNetworkLoadBalancersCalls() []struct {
	Ctx         context.Context
	Endpoint    provisioning.Endpoint
	NetworkName string
} {
	var calls []struct {
		Ctx         context.Context
		Endpoint    provisioning.Endpoint
		NetworkName string
	}
	mock.lockGetNetworkLoadBalancers.RLock()
	calls = mock.calls.GetNetworkLoadBalancers
	mock.lockGetNetworkLoadBalancers.RUnlock()
	return calls
}
