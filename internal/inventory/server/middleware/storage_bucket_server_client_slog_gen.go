// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// StorageBucketServerClientWithSlog implements inventory.StorageBucketServerClient that is instrumented with slog logger.
type StorageBucketServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.StorageBucketServerClient
	_isInformativeErrFunc func(error) bool
}

type StorageBucketServerClientWithSlogOption func(s *StorageBucketServerClientWithSlog)

func StorageBucketServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) StorageBucketServerClientWithSlogOption {
	return func(_base *StorageBucketServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewStorageBucketServerClientWithSlog instruments an implementation of the inventory.StorageBucketServerClient with simple logging.
func NewStorageBucketServerClientWithSlog(base inventory.StorageBucketServerClient, log *slog.Logger, opts ...StorageBucketServerClientWithSlogOption) StorageBucketServerClientWithSlog {
	this := StorageBucketServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetStorageBucketByName implements inventory.StorageBucketServerClient.
func (_d StorageBucketServerClientWithSlog) GetStorageBucketByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, storagePoolName string, storageBucketName string) (storageBucket api.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageBucketName", storageBucketName),
		)
	}
	log.DebugContext(ctx, "=> calling GetStorageBucketByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBucket", storageBucket),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetStorageBucketByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetStorageBucketByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetStorageBucketByName finished")
		}
	}()
	return _d._base.GetStorageBucketByName(ctx, endpoint, projectName, storagePoolName, storageBucketName)
}

// GetStorageBuckets implements inventory.StorageBucketServerClient.
func (_d StorageBucketServerClientWithSlog) GetStorageBuckets(ctx context.Context, endpoint provisioning.Endpoint, storagePoolName string) (storageBuckets []api.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.DebugContext(ctx, "=> calling GetStorageBuckets")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBuckets", storageBuckets),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetStorageBuckets returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetStorageBuckets returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetStorageBuckets finished")
		}
	}()
	return _d._base.GetStorageBuckets(ctx, endpoint, storagePoolName)
}
