// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/lxc/incus/v6/shared/api"
)

// StorageBucketServerClientWithSlog implements inventory.StorageBucketServerClient that is instrumented with slog logger.
type StorageBucketServerClientWithSlog struct {
	_log  *slog.Logger
	_base inventory.StorageBucketServerClient
}

// NewStorageBucketServerClientWithSlog instruments an implementation of the inventory.StorageBucketServerClient with simple logging.
func NewStorageBucketServerClientWithSlog(base inventory.StorageBucketServerClient, log *slog.Logger) StorageBucketServerClientWithSlog {
	return StorageBucketServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetStorageBucketByName implements inventory.StorageBucketServerClient.
func (_d StorageBucketServerClientWithSlog) GetStorageBucketByName(ctx context.Context, connectionURL string, storagePoolName string, storageBucketName string) (storageBucket api.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageBucketName", storageBucketName),
		)
	}
	log.Debug("=> calling GetStorageBucketByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBucket", storageBucket),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetStorageBucketByName returned an error")
		} else {
			log.Debug("<= method GetStorageBucketByName finished")
		}
	}()
	return _d._base.GetStorageBucketByName(ctx, connectionURL, storagePoolName, storageBucketName)
}

// GetStorageBuckets implements inventory.StorageBucketServerClient.
func (_d StorageBucketServerClientWithSlog) GetStorageBuckets(ctx context.Context, connectionURL string, storagePoolName string) (storageBuckets []api.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("=> calling GetStorageBuckets")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBuckets", storageBuckets),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetStorageBuckets returned an error")
		} else {
			log.Debug("<= method GetStorageBuckets finished")
		}
	}()
	return _d._base.GetStorageBuckets(ctx, connectionURL, storagePoolName)
}
