// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/lxc/incus/v6/shared/api"
)

// NetworkServerClientWithSlog implements inventory.NetworkServerClient that is instrumented with slog logger.
type NetworkServerClientWithSlog struct {
	_log  *slog.Logger
	_base inventory.NetworkServerClient
}

// NewNetworkServerClientWithSlog instruments an implementation of the inventory.NetworkServerClient with simple logging.
func NewNetworkServerClientWithSlog(base inventory.NetworkServerClient, log *slog.Logger) NetworkServerClientWithSlog {
	return NetworkServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkByName implements inventory.NetworkServerClient.
func (_d NetworkServerClientWithSlog) GetNetworkByName(ctx context.Context, connectionURL string, networkName string) (network api.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("NetworkServerClientWithSlog: calling GetNetworkByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("network", network),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkServerClientWithSlog: method GetNetworkByName returned an error")
		} else {
			log.Debug("NetworkServerClientWithSlog: method GetNetworkByName finished")
		}
	}()
	return _d._base.GetNetworkByName(ctx, connectionURL, networkName)
}

// GetNetworks implements inventory.NetworkServerClient.
func (_d NetworkServerClientWithSlog) GetNetworks(ctx context.Context, connectionURL string) (networks []api.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("NetworkServerClientWithSlog: calling GetNetworks")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networks", networks),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkServerClientWithSlog: method GetNetworks returned an error")
		} else {
			log.Debug("NetworkServerClientWithSlog: method GetNetworks finished")
		}
	}()
	return _d._base.GetNetworks(ctx, connectionURL)
}
