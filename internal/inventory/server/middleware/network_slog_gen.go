// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// NetworkServerClientWithSlog implements _sourceInventory.NetworkServerClient that is instrumented with slog logger
type NetworkServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkServerClient
}

// NewNetworkServerClientWithSlog instruments an implementation of the _sourceInventory.NetworkServerClient with simple logging
func NewNetworkServerClientWithSlog(base _sourceInventory.NetworkServerClient, log *slog.Logger) NetworkServerClientWithSlog {
	return NetworkServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkByName implements _sourceInventory.NetworkServerClient
func (_d NetworkServerClientWithSlog) GetNetworkByName(ctx context.Context, connectionURL string, networkName string) (n1 incusapi.Network, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("networkName", networkName),
	).Debug("NetworkServerClientWithSlog: calling GetNetworkByName")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkServerClientWithSlog: method GetNetworkByName returned an error")
		} else {
			log.Debug("NetworkServerClientWithSlog: method GetNetworkByName finished")
		}
	}()
	return _d._base.GetNetworkByName(ctx, connectionURL, networkName)
}

// GetNetworks implements _sourceInventory.NetworkServerClient
func (_d NetworkServerClientWithSlog) GetNetworks(ctx context.Context, connectionURL string) (na1 []incusapi.Network, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
	).Debug("NetworkServerClientWithSlog: calling GetNetworks")
	defer func() {
		log := _d._log.With(
			slog.Any("na1", na1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkServerClientWithSlog: method GetNetworks returned an error")
		} else {
			log.Debug("NetworkServerClientWithSlog: method GetNetworks finished")
		}
	}()
	return _d._base.GetNetworks(ctx, connectionURL)
}
