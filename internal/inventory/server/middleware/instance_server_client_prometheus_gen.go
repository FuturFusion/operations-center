// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// InstanceServerClientWithPrometheus implements inventory.InstanceServerClient interface with all methods wrapped
// with Prometheus metrics.
type InstanceServerClientWithPrometheus struct {
	base         inventory.InstanceServerClient
	instanceName string
}

var instanceServerClientDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "instance_server_client_duration_seconds",
		Help:       "instanceServerClient runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewInstanceServerClientWithPrometheus returns an instance of the inventory.InstanceServerClient decorated with prometheus summary metric.
func NewInstanceServerClientWithPrometheus(base inventory.InstanceServerClient, instanceName string) InstanceServerClientWithPrometheus {
	return InstanceServerClientWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetInstanceByName implements inventory.InstanceServerClient.
func (_d InstanceServerClientWithPrometheus) GetInstanceByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, instanceName string) (instanceFull api.InstanceFull, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		instanceServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetInstanceByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetInstanceByName(ctx, endpoint, projectName, instanceName)
}

// GetInstances implements inventory.InstanceServerClient.
func (_d InstanceServerClientWithPrometheus) GetInstances(ctx context.Context, endpoint provisioning.Endpoint) (instanceFulls []api.InstanceFull, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		instanceServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetInstances", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetInstances(ctx, endpoint)
}
