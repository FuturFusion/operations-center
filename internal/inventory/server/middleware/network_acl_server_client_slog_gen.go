// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/lxc/incus/v6/shared/api"
)

// NetworkACLServerClientWithSlog implements inventory.NetworkACLServerClient that is instrumented with slog logger.
type NetworkACLServerClientWithSlog struct {
	_log  *slog.Logger
	_base inventory.NetworkACLServerClient
}

// NewNetworkACLServerClientWithSlog instruments an implementation of the inventory.NetworkACLServerClient with simple logging.
func NewNetworkACLServerClientWithSlog(base inventory.NetworkACLServerClient, log *slog.Logger) NetworkACLServerClientWithSlog {
	return NetworkACLServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkACLByName implements inventory.NetworkACLServerClient.
func (_d NetworkACLServerClientWithSlog) GetNetworkACLByName(ctx context.Context, connectionURL string, networkACLName string) (networkACL api.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkACLName", networkACLName),
		)
	}
	log.Debug("NetworkACLServerClientWithSlog: calling GetNetworkACLByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkACL", networkACL),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkACLServerClientWithSlog: method GetNetworkACLByName returned an error")
		} else {
			log.Debug("NetworkACLServerClientWithSlog: method GetNetworkACLByName finished")
		}
	}()
	return _d._base.GetNetworkACLByName(ctx, connectionURL, networkACLName)
}

// GetNetworkACLs implements inventory.NetworkACLServerClient.
func (_d NetworkACLServerClientWithSlog) GetNetworkACLs(ctx context.Context, connectionURL string) (networkACLs []api.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("NetworkACLServerClientWithSlog: calling GetNetworkACLs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkACLs", networkACLs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkACLServerClientWithSlog: method GetNetworkACLs returned an error")
		} else {
			log.Debug("NetworkACLServerClientWithSlog: method GetNetworkACLs finished")
		}
	}()
	return _d._base.GetNetworkACLs(ctx, connectionURL)
}
