// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// ProfileServerClientWithSlog implements _sourceInventory.ProfileServerClient that is instrumented with slog logger
type ProfileServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.ProfileServerClient
}

// NewProfileServerClientWithSlog instruments an implementation of the _sourceInventory.ProfileServerClient with simple logging
func NewProfileServerClientWithSlog(base _sourceInventory.ProfileServerClient, log *slog.Logger) ProfileServerClientWithSlog {
	return ProfileServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetProfileByName implements _sourceInventory.ProfileServerClient
func (_d ProfileServerClientWithSlog) GetProfileByName(ctx context.Context, connectionURL string, profileName string) (p1 incusapi.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("profileName", profileName),
		)
	}
	log.Debug("ProfileServerClientWithSlog: calling GetProfileByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("p1", p1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProfileServerClientWithSlog: method GetProfileByName returned an error")
		} else {
			log.Debug("ProfileServerClientWithSlog: method GetProfileByName finished")
		}
	}()
	return _d._base.GetProfileByName(ctx, connectionURL, profileName)
}

// GetProfiles implements _sourceInventory.ProfileServerClient
func (_d ProfileServerClientWithSlog) GetProfiles(ctx context.Context, connectionURL string) (pa1 []incusapi.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ProfileServerClientWithSlog: calling GetProfiles")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("pa1", pa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ProfileServerClientWithSlog: method GetProfiles returned an error")
		} else {
			log.Debug("ProfileServerClientWithSlog: method GetProfiles finished")
		}
	}()
	return _d._base.GetProfiles(ctx, connectionURL)
}
