// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// StorageBucketServerClientWithPrometheus implements inventory.StorageBucketServerClient interface with all methods wrapped
// with Prometheus metrics.
type StorageBucketServerClientWithPrometheus struct {
	base         inventory.StorageBucketServerClient
	instanceName string
}

var storageBucketServerClientDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "storage_bucket_server_client_duration_seconds",
		Help:       "storageBucketServerClient runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewStorageBucketServerClientWithPrometheus returns an instance of the inventory.StorageBucketServerClient decorated with prometheus summary metric.
func NewStorageBucketServerClientWithPrometheus(base inventory.StorageBucketServerClient, instanceName string) StorageBucketServerClientWithPrometheus {
	return StorageBucketServerClientWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetStorageBucketByName implements inventory.StorageBucketServerClient.
func (_d StorageBucketServerClientWithPrometheus) GetStorageBucketByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageBucketName string) (storageBucket api.StorageBucket, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		storageBucketServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetStorageBucketByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetStorageBucketByName(ctx, cluster, storagePoolName, storageBucketName)
}

// GetStorageBuckets implements inventory.StorageBucketServerClient.
func (_d StorageBucketServerClientWithPrometheus) GetStorageBuckets(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) (storageBuckets []api.StorageBucket, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		storageBucketServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetStorageBuckets", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetStorageBuckets(ctx, cluster, storagePoolName)
}
