// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// ImageServerClientWithSlog implements _sourceInventory.ImageServerClient that is instrumented with slog logger
type ImageServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.ImageServerClient
}

// NewImageServerClientWithSlog instruments an implementation of the _sourceInventory.ImageServerClient with simple logging
func NewImageServerClientWithSlog(base _sourceInventory.ImageServerClient, log *slog.Logger) ImageServerClientWithSlog {
	return ImageServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetImageByName implements _sourceInventory.ImageServerClient
func (_d ImageServerClientWithSlog) GetImageByName(ctx context.Context, connectionURL string, imageName string) (i1 incusapi.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("imageName", imageName),
		)
	}
	log.Debug("ImageServerClientWithSlog: calling GetImageByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("i1", i1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ImageServerClientWithSlog: method GetImageByName returned an error")
		} else {
			log.Debug("ImageServerClientWithSlog: method GetImageByName finished")
		}
	}()
	return _d._base.GetImageByName(ctx, connectionURL, imageName)
}

// GetImages implements _sourceInventory.ImageServerClient
func (_d ImageServerClientWithSlog) GetImages(ctx context.Context, connectionURL string) (ia1 []incusapi.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ImageServerClientWithSlog: calling GetImages")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ia1", ia1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ImageServerClientWithSlog: method GetImages returned an error")
		} else {
			log.Debug("ImageServerClientWithSlog: method GetImages finished")
		}
	}()
	return _d._base.GetImages(ctx, connectionURL)
}
