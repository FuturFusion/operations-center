// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// NetworkPeerServerClientWithSlog implements _sourceInventory.NetworkPeerServerClient that is instrumented with slog logger
type NetworkPeerServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkPeerServerClient
}

// NewNetworkPeerServerClientWithSlog instruments an implementation of the _sourceInventory.NetworkPeerServerClient with simple logging
func NewNetworkPeerServerClientWithSlog(base _sourceInventory.NetworkPeerServerClient, log *slog.Logger) NetworkPeerServerClientWithSlog {
	return NetworkPeerServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkPeerByName implements _sourceInventory.NetworkPeerServerClient
func (_d NetworkPeerServerClientWithSlog) GetNetworkPeerByName(ctx context.Context, connectionURL string, networkName string, networkPeerName string) (n1 incusapi.NetworkPeer, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("networkName", networkName),
		slog.String("networkPeerName", networkPeerName),
	).Debug("NetworkPeerServerClientWithSlog: calling GetNetworkPeerByName")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkPeerServerClientWithSlog: method GetNetworkPeerByName returned an error")
		} else {
			log.Debug("NetworkPeerServerClientWithSlog: method GetNetworkPeerByName finished")
		}
	}()
	return _d._base.GetNetworkPeerByName(ctx, connectionURL, networkName, networkPeerName)
}

// GetNetworkPeers implements _sourceInventory.NetworkPeerServerClient
func (_d NetworkPeerServerClientWithSlog) GetNetworkPeers(ctx context.Context, connectionURL string, networkName string) (na1 []incusapi.NetworkPeer, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("networkName", networkName),
	).Debug("NetworkPeerServerClientWithSlog: calling GetNetworkPeers")
	defer func() {
		log := _d._log.With(
			slog.Any("na1", na1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkPeerServerClientWithSlog: method GetNetworkPeers returned an error")
		} else {
			log.Debug("NetworkPeerServerClientWithSlog: method GetNetworkPeers finished")
		}
	}()
	return _d._base.GetNetworkPeers(ctx, connectionURL, networkName)
}
