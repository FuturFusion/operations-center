// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// ProfileServerClientWithSlog implements inventory.ProfileServerClient that is instrumented with slog logger.
type ProfileServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.ProfileServerClient
	_isInformativeErrFunc func(error) bool
}

type ProfileServerClientWithSlogOption func(s *ProfileServerClientWithSlog)

func ProfileServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ProfileServerClientWithSlogOption {
	return func(_base *ProfileServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewProfileServerClientWithSlog instruments an implementation of the inventory.ProfileServerClient with simple logging.
func NewProfileServerClientWithSlog(base inventory.ProfileServerClient, log *slog.Logger, opts ...ProfileServerClientWithSlogOption) ProfileServerClientWithSlog {
	this := ProfileServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetProfileByName implements inventory.ProfileServerClient.
func (_d ProfileServerClientWithSlog) GetProfileByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, profileName string) (profile api.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("profileName", profileName),
		)
	}
	log.DebugContext(ctx, "=> calling GetProfileByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("profile", profile),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetProfileByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetProfileByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetProfileByName finished")
		}
	}()
	return _d._base.GetProfileByName(ctx, endpoint, projectName, profileName)
}

// GetProfiles implements inventory.ProfileServerClient.
func (_d ProfileServerClientWithSlog) GetProfiles(ctx context.Context, endpoint provisioning.Endpoint) (profiles []api.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetProfiles")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("profiles", profiles),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetProfiles returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetProfiles returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetProfiles finished")
		}
	}()
	return _d._base.GetProfiles(ctx, endpoint)
}
