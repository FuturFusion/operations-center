// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// ServerClientWithSlog implements _sourceInventory.ServerClient that is instrumented with slog logger
type ServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.ServerClient
}

// NewServerClientWithSlog instruments an implementation of the _sourceInventory.ServerClient with simple logging
func NewServerClientWithSlog(base _sourceInventory.ServerClient, log *slog.Logger) ServerClientWithSlog {
	return ServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetImageByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetImageByName(ctx context.Context, connectionURL string, imageName string) (i1 incusapi.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("imageName", imageName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetImageByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("i1", i1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetImageByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetImageByName finished")
		}
	}()
	return _d._base.GetImageByName(ctx, connectionURL, imageName)
}

// GetImages implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetImages(ctx context.Context, connectionURL string) (ia1 []incusapi.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetImages")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ia1", ia1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetImages returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetImages finished")
		}
	}()
	return _d._base.GetImages(ctx, connectionURL)
}

// GetInstanceByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetInstanceByName(ctx context.Context, connectionURL string, instanceName string) (i1 incusapi.InstanceFull, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("instanceName", instanceName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetInstanceByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("i1", i1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetInstanceByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetInstanceByName finished")
		}
	}()
	return _d._base.GetInstanceByName(ctx, connectionURL, instanceName)
}

// GetInstances implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetInstances(ctx context.Context, connectionURL string) (ia1 []incusapi.InstanceFull, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetInstances")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("ia1", ia1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetInstances returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetInstances finished")
		}
	}()
	return _d._base.GetInstances(ctx, connectionURL)
}

// GetNetworkACLByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkACLByName(ctx context.Context, connectionURL string, networkACLName string) (n1 incusapi.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkACLName", networkACLName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkACLByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkACLByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkACLByName finished")
		}
	}()
	return _d._base.GetNetworkACLByName(ctx, connectionURL, networkACLName)
}

// GetNetworkACLs implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkACLs(ctx context.Context, connectionURL string) (na1 []incusapi.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkACLs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("na1", na1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkACLs returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkACLs finished")
		}
	}()
	return _d._base.GetNetworkACLs(ctx, connectionURL)
}

// GetNetworkByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkByName(ctx context.Context, connectionURL string, networkName string) (n1 incusapi.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkByName finished")
		}
	}()
	return _d._base.GetNetworkByName(ctx, connectionURL, networkName)
}

// GetNetworkForwardByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkForwardByName(ctx context.Context, connectionURL string, networkName string, networkForwardName string) (n1 incusapi.NetworkForward, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
			slog.String("networkForwardName", networkForwardName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkForwardByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkForwardByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkForwardByName finished")
		}
	}()
	return _d._base.GetNetworkForwardByName(ctx, connectionURL, networkName, networkForwardName)
}

// GetNetworkForwards implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkForwards(ctx context.Context, connectionURL string, networkName string) (na1 []incusapi.NetworkForward, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkForwards")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("na1", na1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkForwards returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkForwards finished")
		}
	}()
	return _d._base.GetNetworkForwards(ctx, connectionURL, networkName)
}

// GetNetworkIntegrationByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkIntegrationByName(ctx context.Context, connectionURL string, networkIntegrationName string) (n1 incusapi.NetworkIntegration, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkIntegrationName", networkIntegrationName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkIntegrationByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkIntegrationByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkIntegrationByName finished")
		}
	}()
	return _d._base.GetNetworkIntegrationByName(ctx, connectionURL, networkIntegrationName)
}

// GetNetworkIntegrations implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkIntegrations(ctx context.Context, connectionURL string) (na1 []incusapi.NetworkIntegration, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkIntegrations")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("na1", na1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkIntegrations returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkIntegrations finished")
		}
	}()
	return _d._base.GetNetworkIntegrations(ctx, connectionURL)
}

// GetNetworkLoadBalancerByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkLoadBalancerByName(ctx context.Context, connectionURL string, networkName string, networkLoadBalancerName string) (n1 incusapi.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
			slog.String("networkLoadBalancerName", networkLoadBalancerName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkLoadBalancerByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkLoadBalancerByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkLoadBalancerByName finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancerByName(ctx, connectionURL, networkName, networkLoadBalancerName)
}

// GetNetworkLoadBalancers implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkLoadBalancers(ctx context.Context, connectionURL string, networkName string) (na1 []incusapi.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkLoadBalancers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("na1", na1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkLoadBalancers returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkLoadBalancers finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancers(ctx, connectionURL, networkName)
}

// GetNetworkPeerByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkPeerByName(ctx context.Context, connectionURL string, networkName string, networkPeerName string) (n1 incusapi.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
			slog.String("networkPeerName", networkPeerName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkPeerByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkPeerByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkPeerByName finished")
		}
	}()
	return _d._base.GetNetworkPeerByName(ctx, connectionURL, networkName, networkPeerName)
}

// GetNetworkPeers implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkPeers(ctx context.Context, connectionURL string, networkName string) (na1 []incusapi.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkPeers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("na1", na1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkPeers returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkPeers finished")
		}
	}()
	return _d._base.GetNetworkPeers(ctx, connectionURL, networkName)
}

// GetNetworkZoneByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkZoneByName(ctx context.Context, connectionURL string, networkZoneName string) (n1 incusapi.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkZoneName", networkZoneName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkZoneByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkZoneByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkZoneByName finished")
		}
	}()
	return _d._base.GetNetworkZoneByName(ctx, connectionURL, networkZoneName)
}

// GetNetworkZones implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworkZones(ctx context.Context, connectionURL string) (na1 []incusapi.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworkZones")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("na1", na1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworkZones returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworkZones finished")
		}
	}()
	return _d._base.GetNetworkZones(ctx, connectionURL)
}

// GetNetworks implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetNetworks(ctx context.Context, connectionURL string) (na1 []incusapi.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetNetworks")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("na1", na1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetNetworks returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetNetworks finished")
		}
	}()
	return _d._base.GetNetworks(ctx, connectionURL)
}

// GetProfileByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetProfileByName(ctx context.Context, connectionURL string, profileName string) (p1 incusapi.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("profileName", profileName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetProfileByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("p1", p1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetProfileByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetProfileByName finished")
		}
	}()
	return _d._base.GetProfileByName(ctx, connectionURL, profileName)
}

// GetProfiles implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetProfiles(ctx context.Context, connectionURL string) (pa1 []incusapi.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetProfiles")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("pa1", pa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetProfiles returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetProfiles finished")
		}
	}()
	return _d._base.GetProfiles(ctx, connectionURL)
}

// GetProjectByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetProjectByName(ctx context.Context, connectionURL string, projectName string) (p1 incusapi.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("projectName", projectName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetProjectByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("p1", p1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetProjectByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetProjectByName finished")
		}
	}()
	return _d._base.GetProjectByName(ctx, connectionURL, projectName)
}

// GetProjects implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetProjects(ctx context.Context, connectionURL string) (pa1 []incusapi.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetProjects")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("pa1", pa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetProjects returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetProjects finished")
		}
	}()
	return _d._base.GetProjects(ctx, connectionURL)
}

// GetStorageBucketByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetStorageBucketByName(ctx context.Context, connectionURL string, storagePoolName string, storageBucketName string) (s1 incusapi.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageBucketName", storageBucketName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetStorageBucketByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetStorageBucketByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetStorageBucketByName finished")
		}
	}()
	return _d._base.GetStorageBucketByName(ctx, connectionURL, storagePoolName, storageBucketName)
}

// GetStorageBuckets implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetStorageBuckets(ctx context.Context, connectionURL string, storagePoolName string) (sa1 []incusapi.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetStorageBuckets")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("sa1", sa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetStorageBuckets returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetStorageBuckets finished")
		}
	}()
	return _d._base.GetStorageBuckets(ctx, connectionURL, storagePoolName)
}

// GetStoragePoolByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetStoragePoolByName(ctx context.Context, connectionURL string, storagePoolName string) (s1 incusapi.StoragePool, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetStoragePoolByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetStoragePoolByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetStoragePoolByName finished")
		}
	}()
	return _d._base.GetStoragePoolByName(ctx, connectionURL, storagePoolName)
}

// GetStoragePools implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetStoragePools(ctx context.Context, connectionURL string) (sa1 []incusapi.StoragePool, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetStoragePools")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("sa1", sa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetStoragePools returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetStoragePools finished")
		}
	}()
	return _d._base.GetStoragePools(ctx, connectionURL)
}

// GetStorageVolumeByName implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetStorageVolumeByName(ctx context.Context, connectionURL string, storagePoolName string, storageVolumeName string) (s1 incusapi.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageVolumeName", storageVolumeName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetStorageVolumeByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetStorageVolumeByName returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetStorageVolumeByName finished")
		}
	}()
	return _d._base.GetStorageVolumeByName(ctx, connectionURL, storagePoolName, storageVolumeName)
}

// GetStorageVolumes implements _sourceInventory.ServerClient
func (_d ServerClientWithSlog) GetStorageVolumes(ctx context.Context, connectionURL string, storagePoolName string) (sa1 []incusapi.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("ServerClientWithSlog: calling GetStorageVolumes")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("sa1", sa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerClientWithSlog: method GetStorageVolumes returned an error")
		} else {
			log.Debug("ServerClientWithSlog: method GetStorageVolumes finished")
		}
	}()
	return _d._base.GetStorageVolumes(ctx, connectionURL, storagePoolName)
}
