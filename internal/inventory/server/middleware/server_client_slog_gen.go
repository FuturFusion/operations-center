// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/lxc/incus/v6/shared/api"
)

// ServerClientWithSlog implements inventory.ServerClient that is instrumented with slog logger.
type ServerClientWithSlog struct {
	_log  *slog.Logger
	_base inventory.ServerClient
}

// NewServerClientWithSlog instruments an implementation of the inventory.ServerClient with simple logging.
func NewServerClientWithSlog(base inventory.ServerClient, log *slog.Logger) ServerClientWithSlog {
	return ServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetImageByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetImageByName(ctx context.Context, connectionURL string, imageName string) (image api.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("imageName", imageName),
		)
	}
	log.Debug("=> calling GetImageByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("image", image),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetImageByName returned an error")
		} else {
			log.Debug("<= method GetImageByName finished")
		}
	}()
	return _d._base.GetImageByName(ctx, connectionURL, imageName)
}

// GetImages implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetImages(ctx context.Context, connectionURL string) (images []api.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetImages")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("images", images),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetImages returned an error")
		} else {
			log.Debug("<= method GetImages finished")
		}
	}()
	return _d._base.GetImages(ctx, connectionURL)
}

// GetInstanceByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetInstanceByName(ctx context.Context, connectionURL string, instanceName string) (instanceFull api.InstanceFull, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("instanceName", instanceName),
		)
	}
	log.Debug("=> calling GetInstanceByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("instanceFull", instanceFull),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetInstanceByName returned an error")
		} else {
			log.Debug("<= method GetInstanceByName finished")
		}
	}()
	return _d._base.GetInstanceByName(ctx, connectionURL, instanceName)
}

// GetInstances implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetInstances(ctx context.Context, connectionURL string) (instanceFulls []api.InstanceFull, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetInstances")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("instanceFulls", instanceFulls),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetInstances returned an error")
		} else {
			log.Debug("<= method GetInstances finished")
		}
	}()
	return _d._base.GetInstances(ctx, connectionURL)
}

// GetNetworkACLByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkACLByName(ctx context.Context, connectionURL string, networkACLName string) (networkACL api.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkACLName", networkACLName),
		)
	}
	log.Debug("=> calling GetNetworkACLByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkACL", networkACL),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkACLByName returned an error")
		} else {
			log.Debug("<= method GetNetworkACLByName finished")
		}
	}()
	return _d._base.GetNetworkACLByName(ctx, connectionURL, networkACLName)
}

// GetNetworkACLs implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkACLs(ctx context.Context, connectionURL string) (networkACLs []api.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetNetworkACLs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkACLs", networkACLs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkACLs returned an error")
		} else {
			log.Debug("<= method GetNetworkACLs finished")
		}
	}()
	return _d._base.GetNetworkACLs(ctx, connectionURL)
}

// GetNetworkAddressSetByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkAddressSetByName(ctx context.Context, connectionURL string, networkAddressSetName string) (networkAddressSet api.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkAddressSetName", networkAddressSetName),
		)
	}
	log.Debug("=> calling GetNetworkAddressSetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSet", networkAddressSet),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkAddressSetByName returned an error")
		} else {
			log.Debug("<= method GetNetworkAddressSetByName finished")
		}
	}()
	return _d._base.GetNetworkAddressSetByName(ctx, connectionURL, networkAddressSetName)
}

// GetNetworkAddressSets implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkAddressSets(ctx context.Context, connectionURL string) (networkAddressSets []api.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetNetworkAddressSets")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSets", networkAddressSets),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkAddressSets returned an error")
		} else {
			log.Debug("<= method GetNetworkAddressSets finished")
		}
	}()
	return _d._base.GetNetworkAddressSets(ctx, connectionURL)
}

// GetNetworkByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkByName(ctx context.Context, connectionURL string, networkName string) (network api.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("=> calling GetNetworkByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("network", network),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkByName returned an error")
		} else {
			log.Debug("<= method GetNetworkByName finished")
		}
	}()
	return _d._base.GetNetworkByName(ctx, connectionURL, networkName)
}

// GetNetworkForwardByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkForwardByName(ctx context.Context, connectionURL string, networkName string, networkForwardName string) (networkForward api.NetworkForward, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
			slog.String("networkForwardName", networkForwardName),
		)
	}
	log.Debug("=> calling GetNetworkForwardByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkForward", networkForward),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkForwardByName returned an error")
		} else {
			log.Debug("<= method GetNetworkForwardByName finished")
		}
	}()
	return _d._base.GetNetworkForwardByName(ctx, connectionURL, networkName, networkForwardName)
}

// GetNetworkForwards implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkForwards(ctx context.Context, connectionURL string, networkName string) (networkForwards []api.NetworkForward, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("=> calling GetNetworkForwards")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkForwards", networkForwards),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkForwards returned an error")
		} else {
			log.Debug("<= method GetNetworkForwards finished")
		}
	}()
	return _d._base.GetNetworkForwards(ctx, connectionURL, networkName)
}

// GetNetworkIntegrationByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkIntegrationByName(ctx context.Context, connectionURL string, networkIntegrationName string) (networkIntegration api.NetworkIntegration, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkIntegrationName", networkIntegrationName),
		)
	}
	log.Debug("=> calling GetNetworkIntegrationByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkIntegration", networkIntegration),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkIntegrationByName returned an error")
		} else {
			log.Debug("<= method GetNetworkIntegrationByName finished")
		}
	}()
	return _d._base.GetNetworkIntegrationByName(ctx, connectionURL, networkIntegrationName)
}

// GetNetworkIntegrations implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkIntegrations(ctx context.Context, connectionURL string) (networkIntegrations []api.NetworkIntegration, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetNetworkIntegrations")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkIntegrations", networkIntegrations),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkIntegrations returned an error")
		} else {
			log.Debug("<= method GetNetworkIntegrations finished")
		}
	}()
	return _d._base.GetNetworkIntegrations(ctx, connectionURL)
}

// GetNetworkLoadBalancerByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkLoadBalancerByName(ctx context.Context, connectionURL string, networkName string, networkLoadBalancerName string) (networkLoadBalancer api.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
			slog.String("networkLoadBalancerName", networkLoadBalancerName),
		)
	}
	log.Debug("=> calling GetNetworkLoadBalancerByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancer", networkLoadBalancer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkLoadBalancerByName returned an error")
		} else {
			log.Debug("<= method GetNetworkLoadBalancerByName finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancerByName(ctx, connectionURL, networkName, networkLoadBalancerName)
}

// GetNetworkLoadBalancers implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkLoadBalancers(ctx context.Context, connectionURL string, networkName string) (networkLoadBalancers []api.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("=> calling GetNetworkLoadBalancers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancers", networkLoadBalancers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkLoadBalancers returned an error")
		} else {
			log.Debug("<= method GetNetworkLoadBalancers finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancers(ctx, connectionURL, networkName)
}

// GetNetworkPeerByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkPeerByName(ctx context.Context, connectionURL string, networkName string, networkPeerName string) (networkPeer api.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
			slog.String("networkPeerName", networkPeerName),
		)
	}
	log.Debug("=> calling GetNetworkPeerByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer", networkPeer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkPeerByName returned an error")
		} else {
			log.Debug("<= method GetNetworkPeerByName finished")
		}
	}()
	return _d._base.GetNetworkPeerByName(ctx, connectionURL, networkName, networkPeerName)
}

// GetNetworkPeers implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkPeers(ctx context.Context, connectionURL string, networkName string) (networkPeers []api.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("=> calling GetNetworkPeers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeers", networkPeers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkPeers returned an error")
		} else {
			log.Debug("<= method GetNetworkPeers finished")
		}
	}()
	return _d._base.GetNetworkPeers(ctx, connectionURL, networkName)
}

// GetNetworkZoneByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkZoneByName(ctx context.Context, connectionURL string, networkZoneName string) (networkZone api.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkZoneName", networkZoneName),
		)
	}
	log.Debug("=> calling GetNetworkZoneByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkZone", networkZone),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkZoneByName returned an error")
		} else {
			log.Debug("<= method GetNetworkZoneByName finished")
		}
	}()
	return _d._base.GetNetworkZoneByName(ctx, connectionURL, networkZoneName)
}

// GetNetworkZones implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkZones(ctx context.Context, connectionURL string) (networkZones []api.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetNetworkZones")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkZones", networkZones),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkZones returned an error")
		} else {
			log.Debug("<= method GetNetworkZones finished")
		}
	}()
	return _d._base.GetNetworkZones(ctx, connectionURL)
}

// GetNetworks implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworks(ctx context.Context, connectionURL string) (networks []api.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetNetworks")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networks", networks),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworks returned an error")
		} else {
			log.Debug("<= method GetNetworks finished")
		}
	}()
	return _d._base.GetNetworks(ctx, connectionURL)
}

// GetProfileByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetProfileByName(ctx context.Context, connectionURL string, profileName string) (profile api.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("profileName", profileName),
		)
	}
	log.Debug("=> calling GetProfileByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("profile", profile),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetProfileByName returned an error")
		} else {
			log.Debug("<= method GetProfileByName finished")
		}
	}()
	return _d._base.GetProfileByName(ctx, connectionURL, profileName)
}

// GetProfiles implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetProfiles(ctx context.Context, connectionURL string) (profiles []api.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetProfiles")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("profiles", profiles),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetProfiles returned an error")
		} else {
			log.Debug("<= method GetProfiles finished")
		}
	}()
	return _d._base.GetProfiles(ctx, connectionURL)
}

// GetProjectByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetProjectByName(ctx context.Context, connectionURL string, projectName string) (project api.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("projectName", projectName),
		)
	}
	log.Debug("=> calling GetProjectByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("project", project),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetProjectByName returned an error")
		} else {
			log.Debug("<= method GetProjectByName finished")
		}
	}()
	return _d._base.GetProjectByName(ctx, connectionURL, projectName)
}

// GetProjects implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetProjects(ctx context.Context, connectionURL string) (projects []api.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetProjects")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("projects", projects),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetProjects returned an error")
		} else {
			log.Debug("<= method GetProjects finished")
		}
	}()
	return _d._base.GetProjects(ctx, connectionURL)
}

// GetStorageBucketByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStorageBucketByName(ctx context.Context, connectionURL string, storagePoolName string, storageBucketName string) (storageBucket api.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageBucketName", storageBucketName),
		)
	}
	log.Debug("=> calling GetStorageBucketByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBucket", storageBucket),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetStorageBucketByName returned an error")
		} else {
			log.Debug("<= method GetStorageBucketByName finished")
		}
	}()
	return _d._base.GetStorageBucketByName(ctx, connectionURL, storagePoolName, storageBucketName)
}

// GetStorageBuckets implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStorageBuckets(ctx context.Context, connectionURL string, storagePoolName string) (storageBuckets []api.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("=> calling GetStorageBuckets")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBuckets", storageBuckets),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetStorageBuckets returned an error")
		} else {
			log.Debug("<= method GetStorageBuckets finished")
		}
	}()
	return _d._base.GetStorageBuckets(ctx, connectionURL, storagePoolName)
}

// GetStoragePoolByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStoragePoolByName(ctx context.Context, connectionURL string, storagePoolName string) (storagePool api.StoragePool, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("=> calling GetStoragePoolByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storagePool", storagePool),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetStoragePoolByName returned an error")
		} else {
			log.Debug("<= method GetStoragePoolByName finished")
		}
	}()
	return _d._base.GetStoragePoolByName(ctx, connectionURL, storagePoolName)
}

// GetStoragePools implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStoragePools(ctx context.Context, connectionURL string) (storagePools []api.StoragePool, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetStoragePools")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storagePools", storagePools),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetStoragePools returned an error")
		} else {
			log.Debug("<= method GetStoragePools finished")
		}
	}()
	return _d._base.GetStoragePools(ctx, connectionURL)
}

// GetStorageVolumeByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStorageVolumeByName(ctx context.Context, connectionURL string, storagePoolName string, storageVolumeName string, storageVolumeType string) (storageVolume api.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageVolumeName", storageVolumeName),
			slog.String("storageVolumeType", storageVolumeType),
		)
	}
	log.Debug("=> calling GetStorageVolumeByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageVolume", storageVolume),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetStorageVolumeByName returned an error")
		} else {
			log.Debug("<= method GetStorageVolumeByName finished")
		}
	}()
	return _d._base.GetStorageVolumeByName(ctx, connectionURL, storagePoolName, storageVolumeName, storageVolumeType)
}

// GetStorageVolumes implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStorageVolumes(ctx context.Context, connectionURL string, storagePoolName string) (storageVolumes []api.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("=> calling GetStorageVolumes")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageVolumes", storageVolumes),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetStorageVolumes returned an error")
		} else {
			log.Debug("<= method GetStorageVolumes finished")
		}
	}()
	return _d._base.GetStorageVolumes(ctx, connectionURL, storagePoolName)
}

// HasExtension implements inventory.ServerClient.
func (_d ServerClientWithSlog) HasExtension(ctx context.Context, connectionURL string, extension string) (exists bool) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("extension", extension),
		)
	}
	log.Debug("=> calling HasExtension")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Bool("exists", exists),
			)
		} else {
		}
		log.Debug("<= method HasExtension finished")
	}()
	return _d._base.HasExtension(ctx, connectionURL, extension)
}
