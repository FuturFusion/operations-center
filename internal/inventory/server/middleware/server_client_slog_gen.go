// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// ServerClientWithSlog implements inventory.ServerClient that is instrumented with slog logger.
type ServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.ServerClient
	_isInformativeErrFunc func(error) bool
}

type ServerClientWithSlogOption func(s *ServerClientWithSlog)

func ServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ServerClientWithSlogOption {
	return func(_base *ServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewServerClientWithSlog instruments an implementation of the inventory.ServerClient with simple logging.
func NewServerClientWithSlog(base inventory.ServerClient, log *slog.Logger, opts ...ServerClientWithSlogOption) ServerClientWithSlog {
	this := ServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetImageByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetImageByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, imageName string) (image api.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("imageName", imageName),
		)
	}
	log.DebugContext(ctx, "=> calling GetImageByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("image", image),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetImageByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetImageByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetImageByName finished")
		}
	}()
	return _d._base.GetImageByName(ctx, endpoint, projectName, imageName)
}

// GetImages implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetImages(ctx context.Context, endpoint provisioning.Endpoint) (images []api.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetImages")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("images", images),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetImages returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetImages returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetImages finished")
		}
	}()
	return _d._base.GetImages(ctx, endpoint)
}

// GetInstanceByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetInstanceByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, instanceName string) (instanceFull api.InstanceFull, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("instanceName", instanceName),
		)
	}
	log.DebugContext(ctx, "=> calling GetInstanceByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("instanceFull", instanceFull),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetInstanceByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetInstanceByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetInstanceByName finished")
		}
	}()
	return _d._base.GetInstanceByName(ctx, endpoint, projectName, instanceName)
}

// GetInstances implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetInstances(ctx context.Context, endpoint provisioning.Endpoint) (instanceFulls []api.InstanceFull, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetInstances")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("instanceFulls", instanceFulls),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetInstances returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetInstances returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetInstances finished")
		}
	}()
	return _d._base.GetInstances(ctx, endpoint)
}

// GetNetworkACLByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkACLByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkACLName string) (networkACL api.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("networkACLName", networkACLName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkACLByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkACL", networkACL),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkACLByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkACLByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkACLByName finished")
		}
	}()
	return _d._base.GetNetworkACLByName(ctx, endpoint, projectName, networkACLName)
}

// GetNetworkACLs implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkACLs(ctx context.Context, endpoint provisioning.Endpoint) (networkACLs []api.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkACLs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkACLs", networkACLs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkACLs returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkACLs returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkACLs finished")
		}
	}()
	return _d._base.GetNetworkACLs(ctx, endpoint)
}

// GetNetworkAddressSetByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkAddressSetByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkAddressSetName string) (networkAddressSet api.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("networkAddressSetName", networkAddressSetName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkAddressSetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSet", networkAddressSet),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkAddressSetByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkAddressSetByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkAddressSetByName finished")
		}
	}()
	return _d._base.GetNetworkAddressSetByName(ctx, endpoint, projectName, networkAddressSetName)
}

// GetNetworkAddressSets implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkAddressSets(ctx context.Context, endpoint provisioning.Endpoint) (networkAddressSets []api.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkAddressSets")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSets", networkAddressSets),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkAddressSets returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkAddressSets returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkAddressSets finished")
		}
	}()
	return _d._base.GetNetworkAddressSets(ctx, endpoint)
}

// GetNetworkByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkName string) (network api.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("networkName", networkName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("network", network),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkByName finished")
		}
	}()
	return _d._base.GetNetworkByName(ctx, endpoint, projectName, networkName)
}

// GetNetworkForwardByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkForwardByName(ctx context.Context, endpoint provisioning.Endpoint, networkName string, networkForwardName string) (networkForward api.NetworkForward, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkName", networkName),
			slog.String("networkForwardName", networkForwardName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkForwardByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkForward", networkForward),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkForwardByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkForwardByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkForwardByName finished")
		}
	}()
	return _d._base.GetNetworkForwardByName(ctx, endpoint, networkName, networkForwardName)
}

// GetNetworkForwards implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkForwards(ctx context.Context, endpoint provisioning.Endpoint, networkName string) (networkForwards []api.NetworkForward, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkName", networkName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkForwards")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkForwards", networkForwards),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkForwards returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkForwards returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkForwards finished")
		}
	}()
	return _d._base.GetNetworkForwards(ctx, endpoint, networkName)
}

// GetNetworkIntegrationByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkIntegrationByName(ctx context.Context, endpoint provisioning.Endpoint, networkIntegrationName string) (networkIntegration api.NetworkIntegration, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkIntegrationName", networkIntegrationName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkIntegrationByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkIntegration", networkIntegration),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkIntegrationByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkIntegrationByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkIntegrationByName finished")
		}
	}()
	return _d._base.GetNetworkIntegrationByName(ctx, endpoint, networkIntegrationName)
}

// GetNetworkIntegrations implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkIntegrations(ctx context.Context, endpoint provisioning.Endpoint) (networkIntegrations []api.NetworkIntegration, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkIntegrations")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkIntegrations", networkIntegrations),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkIntegrations returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkIntegrations returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkIntegrations finished")
		}
	}()
	return _d._base.GetNetworkIntegrations(ctx, endpoint)
}

// GetNetworkLoadBalancerByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkLoadBalancerByName(ctx context.Context, endpoint provisioning.Endpoint, networkName string, networkLoadBalancerName string) (networkLoadBalancer api.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkName", networkName),
			slog.String("networkLoadBalancerName", networkLoadBalancerName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkLoadBalancerByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancer", networkLoadBalancer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkLoadBalancerByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkLoadBalancerByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkLoadBalancerByName finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancerByName(ctx, endpoint, networkName, networkLoadBalancerName)
}

// GetNetworkLoadBalancers implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkLoadBalancers(ctx context.Context, endpoint provisioning.Endpoint, networkName string) (networkLoadBalancers []api.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkName", networkName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkLoadBalancers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancers", networkLoadBalancers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkLoadBalancers returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkLoadBalancers returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkLoadBalancers finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancers(ctx, endpoint, networkName)
}

// GetNetworkPeerByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkPeerByName(ctx context.Context, endpoint provisioning.Endpoint, networkName string, networkPeerName string) (networkPeer api.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkName", networkName),
			slog.String("networkPeerName", networkPeerName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkPeerByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer", networkPeer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkPeerByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkPeerByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkPeerByName finished")
		}
	}()
	return _d._base.GetNetworkPeerByName(ctx, endpoint, networkName, networkPeerName)
}

// GetNetworkPeers implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkPeers(ctx context.Context, endpoint provisioning.Endpoint, networkName string) (networkPeers []api.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkName", networkName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkPeers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeers", networkPeers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkPeers returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkPeers returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkPeers finished")
		}
	}()
	return _d._base.GetNetworkPeers(ctx, endpoint, networkName)
}

// GetNetworkZoneByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkZoneByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, networkZoneName string) (networkZone api.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("networkZoneName", networkZoneName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkZoneByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkZone", networkZone),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkZoneByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkZoneByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkZoneByName finished")
		}
	}()
	return _d._base.GetNetworkZoneByName(ctx, endpoint, projectName, networkZoneName)
}

// GetNetworkZones implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworkZones(ctx context.Context, endpoint provisioning.Endpoint) (networkZones []api.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkZones")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkZones", networkZones),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkZones returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkZones returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkZones finished")
		}
	}()
	return _d._base.GetNetworkZones(ctx, endpoint)
}

// GetNetworks implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetNetworks(ctx context.Context, endpoint provisioning.Endpoint) (networks []api.Network, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworks")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networks", networks),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworks returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworks returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworks finished")
		}
	}()
	return _d._base.GetNetworks(ctx, endpoint)
}

// GetProfileByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetProfileByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, profileName string) (profile api.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("profileName", profileName),
		)
	}
	log.DebugContext(ctx, "=> calling GetProfileByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("profile", profile),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetProfileByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetProfileByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetProfileByName finished")
		}
	}()
	return _d._base.GetProfileByName(ctx, endpoint, projectName, profileName)
}

// GetProfiles implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetProfiles(ctx context.Context, endpoint provisioning.Endpoint) (profiles []api.Profile, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetProfiles")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("profiles", profiles),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetProfiles returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetProfiles returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetProfiles finished")
		}
	}()
	return _d._base.GetProfiles(ctx, endpoint)
}

// GetProjectByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetProjectByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string) (project api.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
		)
	}
	log.DebugContext(ctx, "=> calling GetProjectByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("project", project),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetProjectByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetProjectByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetProjectByName finished")
		}
	}()
	return _d._base.GetProjectByName(ctx, endpoint, projectName)
}

// GetProjects implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetProjects(ctx context.Context, endpoint provisioning.Endpoint) (projects []api.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetProjects")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("projects", projects),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetProjects returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetProjects returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetProjects finished")
		}
	}()
	return _d._base.GetProjects(ctx, endpoint)
}

// GetStorageBucketByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStorageBucketByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, storagePoolName string, storageBucketName string) (storageBucket api.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageBucketName", storageBucketName),
		)
	}
	log.DebugContext(ctx, "=> calling GetStorageBucketByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBucket", storageBucket),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetStorageBucketByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetStorageBucketByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetStorageBucketByName finished")
		}
	}()
	return _d._base.GetStorageBucketByName(ctx, endpoint, projectName, storagePoolName, storageBucketName)
}

// GetStorageBuckets implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStorageBuckets(ctx context.Context, endpoint provisioning.Endpoint, storagePoolName string) (storageBuckets []api.StorageBucket, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.DebugContext(ctx, "=> calling GetStorageBuckets")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageBuckets", storageBuckets),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetStorageBuckets returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetStorageBuckets returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetStorageBuckets finished")
		}
	}()
	return _d._base.GetStorageBuckets(ctx, endpoint, storagePoolName)
}

// GetStoragePoolByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStoragePoolByName(ctx context.Context, endpoint provisioning.Endpoint, storagePoolName string) (storagePool api.StoragePool, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.DebugContext(ctx, "=> calling GetStoragePoolByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storagePool", storagePool),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetStoragePoolByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetStoragePoolByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetStoragePoolByName finished")
		}
	}()
	return _d._base.GetStoragePoolByName(ctx, endpoint, storagePoolName)
}

// GetStoragePools implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStoragePools(ctx context.Context, endpoint provisioning.Endpoint) (storagePools []api.StoragePool, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetStoragePools")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storagePools", storagePools),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetStoragePools returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetStoragePools returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetStoragePools finished")
		}
	}()
	return _d._base.GetStoragePools(ctx, endpoint)
}

// GetStorageVolumeByName implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStorageVolumeByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string, storagePoolName string, storageVolumeName string, storageVolumeType string) (storageVolume api.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageVolumeName", storageVolumeName),
			slog.String("storageVolumeType", storageVolumeType),
		)
	}
	log.DebugContext(ctx, "=> calling GetStorageVolumeByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageVolume", storageVolume),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetStorageVolumeByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetStorageVolumeByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetStorageVolumeByName finished")
		}
	}()
	return _d._base.GetStorageVolumeByName(ctx, endpoint, projectName, storagePoolName, storageVolumeName, storageVolumeType)
}

// GetStorageVolumes implements inventory.ServerClient.
func (_d ServerClientWithSlog) GetStorageVolumes(ctx context.Context, endpoint provisioning.Endpoint, storagePoolName string) (storageVolumes []api.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.DebugContext(ctx, "=> calling GetStorageVolumes")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageVolumes", storageVolumes),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetStorageVolumes returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetStorageVolumes returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetStorageVolumes finished")
		}
	}()
	return _d._base.GetStorageVolumes(ctx, endpoint, storagePoolName)
}

// HasExtension implements inventory.ServerClient.
func (_d ServerClientWithSlog) HasExtension(ctx context.Context, endpoint provisioning.Endpoint, extension string) (exists bool) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("extension", extension),
		)
	}
	log.DebugContext(ctx, "=> calling HasExtension")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Bool("exists", exists),
			)
		} else {
		}
		log.DebugContext(ctx, "<= method HasExtension finished")
	}()
	return _d._base.HasExtension(ctx, endpoint, extension)
}
