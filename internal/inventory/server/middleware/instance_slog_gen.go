// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// InstanceServerClientWithSlog implements _sourceInventory.InstanceServerClient that is instrumented with slog logger
type InstanceServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.InstanceServerClient
}

// NewInstanceServerClientWithSlog instruments an implementation of the _sourceInventory.InstanceServerClient with simple logging
func NewInstanceServerClientWithSlog(base _sourceInventory.InstanceServerClient, log *slog.Logger) InstanceServerClientWithSlog {
	return InstanceServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetInstanceByName implements _sourceInventory.InstanceServerClient
func (_d InstanceServerClientWithSlog) GetInstanceByName(ctx context.Context, connectionURL string, instanceName string) (i1 incusapi.InstanceFull, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("instanceName", instanceName),
	).Debug("InstanceServerClientWithSlog: calling GetInstanceByName")
	defer func() {
		log := _d._log.With(
			slog.Any("i1", i1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceServerClientWithSlog: method GetInstanceByName returned an error")
		} else {
			log.Debug("InstanceServerClientWithSlog: method GetInstanceByName finished")
		}
	}()
	return _d._base.GetInstanceByName(ctx, connectionURL, instanceName)
}

// GetInstances implements _sourceInventory.InstanceServerClient
func (_d InstanceServerClientWithSlog) GetInstances(ctx context.Context, connectionURL string) (ia1 []incusapi.InstanceFull, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
	).Debug("InstanceServerClientWithSlog: calling GetInstances")
	defer func() {
		log := _d._log.With(
			slog.Any("ia1", ia1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("InstanceServerClientWithSlog: method GetInstances returned an error")
		} else {
			log.Debug("InstanceServerClientWithSlog: method GetInstances finished")
		}
	}()
	return _d._base.GetInstances(ctx, connectionURL)
}
