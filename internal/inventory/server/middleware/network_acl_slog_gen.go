// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// NetworkACLServerClientWithSlog implements _sourceInventory.NetworkACLServerClient that is instrumented with slog logger
type NetworkACLServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkACLServerClient
}

// NewNetworkACLServerClientWithSlog instruments an implementation of the _sourceInventory.NetworkACLServerClient with simple logging
func NewNetworkACLServerClientWithSlog(base _sourceInventory.NetworkACLServerClient, log *slog.Logger) NetworkACLServerClientWithSlog {
	return NetworkACLServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkACLByName implements _sourceInventory.NetworkACLServerClient
func (_d NetworkACLServerClientWithSlog) GetNetworkACLByName(ctx context.Context, connectionURL string, networkACLName string) (n1 incusapi.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkACLName", networkACLName),
		)
	}
	log.Debug("NetworkACLServerClientWithSlog: calling GetNetworkACLByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("n1", n1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkACLServerClientWithSlog: method GetNetworkACLByName returned an error")
		} else {
			log.Debug("NetworkACLServerClientWithSlog: method GetNetworkACLByName finished")
		}
	}()
	return _d._base.GetNetworkACLByName(ctx, connectionURL, networkACLName)
}

// GetNetworkACLs implements _sourceInventory.NetworkACLServerClient
func (_d NetworkACLServerClientWithSlog) GetNetworkACLs(ctx context.Context, connectionURL string) (na1 []incusapi.NetworkACL, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("NetworkACLServerClientWithSlog: calling GetNetworkACLs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("na1", na1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("NetworkACLServerClientWithSlog: method GetNetworkACLs returned an error")
		} else {
			log.Debug("NetworkACLServerClientWithSlog: method GetNetworkACLs finished")
		}
	}()
	return _d._base.GetNetworkACLs(ctx, connectionURL)
}
