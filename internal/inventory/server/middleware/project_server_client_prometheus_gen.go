// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ProjectServerClientWithPrometheus implements inventory.ProjectServerClient interface with all methods wrapped
// with Prometheus metrics.
type ProjectServerClientWithPrometheus struct {
	base         inventory.ProjectServerClient
	instanceName string
}

var projectServerClientDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "project_server_client_duration_seconds",
		Help:       "projectServerClient runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewProjectServerClientWithPrometheus returns an instance of the inventory.ProjectServerClient decorated with prometheus summary metric.
func NewProjectServerClientWithPrometheus(base inventory.ProjectServerClient, instanceName string) ProjectServerClientWithPrometheus {
	return ProjectServerClientWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetProjectByName implements inventory.ProjectServerClient.
func (_d ProjectServerClientWithPrometheus) GetProjectByName(ctx context.Context, cluster provisioning.Cluster, projectName string) (project api.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProjectByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProjectByName(ctx, cluster, projectName)
}

// GetProjects implements inventory.ProjectServerClient.
func (_d ProjectServerClientWithPrometheus) GetProjects(ctx context.Context, cluster provisioning.Cluster) (projects []api.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		projectServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProjects", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProjects(ctx, cluster)
}
