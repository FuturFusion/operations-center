// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// NetworkZoneServerClientWithSlog implements inventory.NetworkZoneServerClient that is instrumented with slog logger.
type NetworkZoneServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.NetworkZoneServerClient
	_isInformativeErrFunc func(error) bool
}

type NetworkZoneServerClientWithSlogOption func(s *NetworkZoneServerClientWithSlog)

func NetworkZoneServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) NetworkZoneServerClientWithSlogOption {
	return func(_base *NetworkZoneServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewNetworkZoneServerClientWithSlog instruments an implementation of the inventory.NetworkZoneServerClient with simple logging.
func NewNetworkZoneServerClientWithSlog(base inventory.NetworkZoneServerClient, log *slog.Logger, opts ...NetworkZoneServerClientWithSlogOption) NetworkZoneServerClientWithSlog {
	this := NetworkZoneServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetNetworkZoneByName implements inventory.NetworkZoneServerClient.
func (_d NetworkZoneServerClientWithSlog) GetNetworkZoneByName(ctx context.Context, endpoint provisioning.Endpoint, networkZoneName string) (networkZone api.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkZoneName", networkZoneName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkZoneByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkZone", networkZone),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkZoneByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkZoneByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkZoneByName finished")
		}
	}()
	return _d._base.GetNetworkZoneByName(ctx, endpoint, networkZoneName)
}

// GetNetworkZones implements inventory.NetworkZoneServerClient.
func (_d NetworkZoneServerClientWithSlog) GetNetworkZones(ctx context.Context, endpoint provisioning.Endpoint) (networkZones []api.NetworkZone, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkZones")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkZones", networkZones),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkZones returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkZones returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkZones finished")
		}
	}()
	return _d._base.GetNetworkZones(ctx, endpoint)
}
