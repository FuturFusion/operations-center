// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/lxc/incus/v6/shared/api"
)

// NetworkIntegrationServerClientWithSlog implements inventory.NetworkIntegrationServerClient that is instrumented with slog logger.
type NetworkIntegrationServerClientWithSlog struct {
	_log  *slog.Logger
	_base inventory.NetworkIntegrationServerClient
}

// NewNetworkIntegrationServerClientWithSlog instruments an implementation of the inventory.NetworkIntegrationServerClient with simple logging.
func NewNetworkIntegrationServerClientWithSlog(base inventory.NetworkIntegrationServerClient, log *slog.Logger) NetworkIntegrationServerClientWithSlog {
	return NetworkIntegrationServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkIntegrationByName implements inventory.NetworkIntegrationServerClient.
func (_d NetworkIntegrationServerClientWithSlog) GetNetworkIntegrationByName(ctx context.Context, connectionURL string, networkIntegrationName string) (networkIntegration api.NetworkIntegration, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkIntegrationName", networkIntegrationName),
		)
	}
	log.Debug("=> calling GetNetworkIntegrationByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkIntegration", networkIntegration),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkIntegrationByName returned an error")
		} else {
			log.Debug("<= method GetNetworkIntegrationByName finished")
		}
	}()
	return _d._base.GetNetworkIntegrationByName(ctx, connectionURL, networkIntegrationName)
}

// GetNetworkIntegrations implements inventory.NetworkIntegrationServerClient.
func (_d NetworkIntegrationServerClientWithSlog) GetNetworkIntegrations(ctx context.Context, connectionURL string) (networkIntegrations []api.NetworkIntegration, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("=> calling GetNetworkIntegrations")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkIntegrations", networkIntegrations),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkIntegrations returned an error")
		} else {
			log.Debug("<= method GetNetworkIntegrations finished")
		}
	}()
	return _d._base.GetNetworkIntegrations(ctx, connectionURL)
}
