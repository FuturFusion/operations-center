// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// NetworkLoadBalancerServerClientWithSlog implements _sourceInventory.NetworkLoadBalancerServerClient that is instrumented with slog logger
type NetworkLoadBalancerServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkLoadBalancerServerClient
}

// NewNetworkLoadBalancerServerClientWithSlog instruments an implementation of the _sourceInventory.NetworkLoadBalancerServerClient with simple logging
func NewNetworkLoadBalancerServerClientWithSlog(base _sourceInventory.NetworkLoadBalancerServerClient, log *slog.Logger) NetworkLoadBalancerServerClientWithSlog {
	return NetworkLoadBalancerServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkLoadBalancerByName implements _sourceInventory.NetworkLoadBalancerServerClient
func (_d NetworkLoadBalancerServerClientWithSlog) GetNetworkLoadBalancerByName(ctx context.Context, connectionURL string, networkName string, networkLoadBalancerName string) (n1 incusapi.NetworkLoadBalancer, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("networkName", networkName),
		slog.String("networkLoadBalancerName", networkLoadBalancerName),
	).Debug("NetworkLoadBalancerServerClientWithSlog: calling GetNetworkLoadBalancerByName")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkLoadBalancerServerClientWithSlog: method GetNetworkLoadBalancerByName returned an error")
		} else {
			log.Debug("NetworkLoadBalancerServerClientWithSlog: method GetNetworkLoadBalancerByName finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancerByName(ctx, connectionURL, networkName, networkLoadBalancerName)
}

// GetNetworkLoadBalancers implements _sourceInventory.NetworkLoadBalancerServerClient
func (_d NetworkLoadBalancerServerClientWithSlog) GetNetworkLoadBalancers(ctx context.Context, connectionURL string, networkName string) (na1 []incusapi.NetworkLoadBalancer, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("networkName", networkName),
	).Debug("NetworkLoadBalancerServerClientWithSlog: calling GetNetworkLoadBalancers")
	defer func() {
		log := _d._log.With(
			slog.Any("na1", na1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkLoadBalancerServerClientWithSlog: method GetNetworkLoadBalancers returned an error")
		} else {
			log.Debug("NetworkLoadBalancerServerClientWithSlog: method GetNetworkLoadBalancers finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancers(ctx, connectionURL, networkName)
}
