// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// ProjectServerClientWithSlog implements _sourceInventory.ProjectServerClient that is instrumented with slog logger
type ProjectServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.ProjectServerClient
}

// NewProjectServerClientWithSlog instruments an implementation of the _sourceInventory.ProjectServerClient with simple logging
func NewProjectServerClientWithSlog(base _sourceInventory.ProjectServerClient, log *slog.Logger) ProjectServerClientWithSlog {
	return ProjectServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetProjectByName implements _sourceInventory.ProjectServerClient
func (_d ProjectServerClientWithSlog) GetProjectByName(ctx context.Context, connectionURL string, projectName string) (p1 incusapi.Project, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("projectName", projectName),
	).Debug("ProjectServerClientWithSlog: calling GetProjectByName")
	defer func() {
		log := _d._log.With(
			slog.Any("p1", p1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ProjectServerClientWithSlog: method GetProjectByName returned an error")
		} else {
			log.Debug("ProjectServerClientWithSlog: method GetProjectByName finished")
		}
	}()
	return _d._base.GetProjectByName(ctx, connectionURL, projectName)
}

// GetProjects implements _sourceInventory.ProjectServerClient
func (_d ProjectServerClientWithSlog) GetProjects(ctx context.Context, connectionURL string) (pa1 []incusapi.Project, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
	).Debug("ProjectServerClientWithSlog: calling GetProjects")
	defer func() {
		log := _d._log.With(
			slog.Any("pa1", pa1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ProjectServerClientWithSlog: method GetProjects returned an error")
		} else {
			log.Debug("ProjectServerClientWithSlog: method GetProjects finished")
		}
	}()
	return _d._base.GetProjects(ctx, connectionURL)
}
