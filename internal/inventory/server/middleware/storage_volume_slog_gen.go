// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// StorageVolumeServerClientWithSlog implements _sourceInventory.StorageVolumeServerClient that is instrumented with slog logger
type StorageVolumeServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.StorageVolumeServerClient
}

// NewStorageVolumeServerClientWithSlog instruments an implementation of the _sourceInventory.StorageVolumeServerClient with simple logging
func NewStorageVolumeServerClientWithSlog(base _sourceInventory.StorageVolumeServerClient, log *slog.Logger) StorageVolumeServerClientWithSlog {
	return StorageVolumeServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetStorageVolumeByName implements _sourceInventory.StorageVolumeServerClient
func (_d StorageVolumeServerClientWithSlog) GetStorageVolumeByName(ctx context.Context, connectionURL string, storagePoolName string, storageVolumeName string) (s1 incusapi.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageVolumeName", storageVolumeName),
		)
	}
	log.Debug("StorageVolumeServerClientWithSlog: calling GetStorageVolumeByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StorageVolumeServerClientWithSlog: method GetStorageVolumeByName returned an error")
		} else {
			log.Debug("StorageVolumeServerClientWithSlog: method GetStorageVolumeByName finished")
		}
	}()
	return _d._base.GetStorageVolumeByName(ctx, connectionURL, storagePoolName, storageVolumeName)
}

// GetStorageVolumes implements _sourceInventory.StorageVolumeServerClient
func (_d StorageVolumeServerClientWithSlog) GetStorageVolumes(ctx context.Context, connectionURL string, storagePoolName string) (sa1 []incusapi.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("StorageVolumeServerClientWithSlog: calling GetStorageVolumes")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("sa1", sa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("StorageVolumeServerClientWithSlog: method GetStorageVolumes returned an error")
		} else {
			log.Debug("StorageVolumeServerClientWithSlog: method GetStorageVolumes finished")
		}
	}()
	return _d._base.GetStorageVolumes(ctx, connectionURL, storagePoolName)
}
