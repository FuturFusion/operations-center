// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ServerClientWithPrometheus implements inventory.ServerClient interface with all methods wrapped
// with Prometheus metrics.
type ServerClientWithPrometheus struct {
	base         inventory.ServerClient
	instanceName string
}

var serverClientDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "server_client_duration_seconds",
		Help:       "serverClient runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewServerClientWithPrometheus returns an instance of the inventory.ServerClient decorated with prometheus summary metric.
func NewServerClientWithPrometheus(base inventory.ServerClient, instanceName string) ServerClientWithPrometheus {
	return ServerClientWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetImageByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetImageByName(ctx context.Context, cluster provisioning.Cluster, imageName string) (image api.Image, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetImageByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetImageByName(ctx, cluster, imageName)
}

// GetImages implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetImages(ctx context.Context, cluster provisioning.Cluster) (images []api.Image, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetImages", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetImages(ctx, cluster)
}

// GetInstanceByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetInstanceByName(ctx context.Context, cluster provisioning.Cluster, instanceName string) (instanceFull api.InstanceFull, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetInstanceByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetInstanceByName(ctx, cluster, instanceName)
}

// GetInstances implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetInstances(ctx context.Context, cluster provisioning.Cluster) (instanceFulls []api.InstanceFull, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetInstances", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetInstances(ctx, cluster)
}

// GetNetworkACLByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkACLByName(ctx context.Context, cluster provisioning.Cluster, networkACLName string) (networkACL api.NetworkACL, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkACLByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkACLByName(ctx, cluster, networkACLName)
}

// GetNetworkACLs implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkACLs(ctx context.Context, cluster provisioning.Cluster) (networkACLs []api.NetworkACL, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkACLs", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkACLs(ctx, cluster)
}

// GetNetworkAddressSetByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkAddressSetByName(ctx context.Context, cluster provisioning.Cluster, networkAddressSetName string) (networkAddressSet api.NetworkAddressSet, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkAddressSetByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkAddressSetByName(ctx, cluster, networkAddressSetName)
}

// GetNetworkAddressSets implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkAddressSets(ctx context.Context, cluster provisioning.Cluster) (networkAddressSets []api.NetworkAddressSet, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkAddressSets", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkAddressSets(ctx, cluster)
}

// GetNetworkByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkByName(ctx context.Context, cluster provisioning.Cluster, networkName string) (network api.Network, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkByName(ctx, cluster, networkName)
}

// GetNetworkForwardByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkForwardByName(ctx context.Context, cluster provisioning.Cluster, networkName string, networkForwardName string) (networkForward api.NetworkForward, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkForwardByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkForwardByName(ctx, cluster, networkName, networkForwardName)
}

// GetNetworkForwards implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkForwards(ctx context.Context, cluster provisioning.Cluster, networkName string) (networkForwards []api.NetworkForward, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkForwards", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkForwards(ctx, cluster, networkName)
}

// GetNetworkIntegrationByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkIntegrationByName(ctx context.Context, cluster provisioning.Cluster, networkIntegrationName string) (networkIntegration api.NetworkIntegration, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkIntegrationByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkIntegrationByName(ctx, cluster, networkIntegrationName)
}

// GetNetworkIntegrations implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkIntegrations(ctx context.Context, cluster provisioning.Cluster) (networkIntegrations []api.NetworkIntegration, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkIntegrations", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkIntegrations(ctx, cluster)
}

// GetNetworkLoadBalancerByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkLoadBalancerByName(ctx context.Context, cluster provisioning.Cluster, networkName string, networkLoadBalancerName string) (networkLoadBalancer api.NetworkLoadBalancer, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkLoadBalancerByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkLoadBalancerByName(ctx, cluster, networkName, networkLoadBalancerName)
}

// GetNetworkLoadBalancers implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkLoadBalancers(ctx context.Context, cluster provisioning.Cluster, networkName string) (networkLoadBalancers []api.NetworkLoadBalancer, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkLoadBalancers", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkLoadBalancers(ctx, cluster, networkName)
}

// GetNetworkPeerByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkPeerByName(ctx context.Context, cluster provisioning.Cluster, networkName string, networkPeerName string) (networkPeer api.NetworkPeer, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkPeerByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkPeerByName(ctx, cluster, networkName, networkPeerName)
}

// GetNetworkPeers implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkPeers(ctx context.Context, cluster provisioning.Cluster, networkName string) (networkPeers []api.NetworkPeer, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkPeers", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkPeers(ctx, cluster, networkName)
}

// GetNetworkZoneByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkZoneByName(ctx context.Context, cluster provisioning.Cluster, networkZoneName string) (networkZone api.NetworkZone, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkZoneByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkZoneByName(ctx, cluster, networkZoneName)
}

// GetNetworkZones implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworkZones(ctx context.Context, cluster provisioning.Cluster) (networkZones []api.NetworkZone, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkZones", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkZones(ctx, cluster)
}

// GetNetworks implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetNetworks(ctx context.Context, cluster provisioning.Cluster) (networks []api.Network, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworks", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworks(ctx, cluster)
}

// GetProfileByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetProfileByName(ctx context.Context, cluster provisioning.Cluster, profileName string) (profile api.Profile, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProfileByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProfileByName(ctx, cluster, profileName)
}

// GetProfiles implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetProfiles(ctx context.Context, cluster provisioning.Cluster) (profiles []api.Profile, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProfiles", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProfiles(ctx, cluster)
}

// GetProjectByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetProjectByName(ctx context.Context, cluster provisioning.Cluster, projectName string) (project api.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProjectByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProjectByName(ctx, cluster, projectName)
}

// GetProjects implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetProjects(ctx context.Context, cluster provisioning.Cluster) (projects []api.Project, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProjects", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProjects(ctx, cluster)
}

// GetStorageBucketByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetStorageBucketByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageBucketName string) (storageBucket api.StorageBucket, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetStorageBucketByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetStorageBucketByName(ctx, cluster, storagePoolName, storageBucketName)
}

// GetStorageBuckets implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetStorageBuckets(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) (storageBuckets []api.StorageBucket, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetStorageBuckets", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetStorageBuckets(ctx, cluster, storagePoolName)
}

// GetStoragePoolByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetStoragePoolByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) (storagePool api.StoragePool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetStoragePoolByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetStoragePoolByName(ctx, cluster, storagePoolName)
}

// GetStoragePools implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetStoragePools(ctx context.Context, cluster provisioning.Cluster) (storagePools []api.StoragePool, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetStoragePools", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetStoragePools(ctx, cluster)
}

// GetStorageVolumeByName implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetStorageVolumeByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageVolumeName string, storageVolumeType string) (storageVolume api.StorageVolume, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetStorageVolumeByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetStorageVolumeByName(ctx, cluster, storagePoolName, storageVolumeName, storageVolumeType)
}

// GetStorageVolumes implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) GetStorageVolumes(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) (storageVolumes []api.StorageVolume, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetStorageVolumes", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetStorageVolumes(ctx, cluster, storagePoolName)
}

// HasExtension implements inventory.ServerClient.
func (_d ServerClientWithPrometheus) HasExtension(ctx context.Context, cluster provisioning.Cluster, extension string) (exists bool) {
	_since := time.Now()
	defer func() {
		result := "ok"
		serverClientDurationSummaryVec.WithLabelValues(_d.instanceName, "HasExtension", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.HasExtension(ctx, cluster, extension)
}
