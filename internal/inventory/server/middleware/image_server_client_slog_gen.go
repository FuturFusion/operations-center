// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// ImageServerClientWithSlog implements inventory.ImageServerClient that is instrumented with slog logger.
type ImageServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.ImageServerClient
	_isInformativeErrFunc func(error) bool
}

type ImageServerClientWithSlogOption func(s *ImageServerClientWithSlog)

func ImageServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ImageServerClientWithSlogOption {
	return func(_base *ImageServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewImageServerClientWithSlog instruments an implementation of the inventory.ImageServerClient with simple logging.
func NewImageServerClientWithSlog(base inventory.ImageServerClient, log *slog.Logger, opts ...ImageServerClientWithSlogOption) ImageServerClientWithSlog {
	this := ImageServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetImageByName implements inventory.ImageServerClient.
func (_d ImageServerClientWithSlog) GetImageByName(ctx context.Context, cluster provisioning.Cluster, imageName string) (image api.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
			slog.String("imageName", imageName),
		)
	}
	log.Debug("=> calling GetImageByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("image", image),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetImageByName returned an informative error")
			} else {
				log.Error("<= method GetImageByName returned an error")
			}
		} else {
			log.Debug("<= method GetImageByName finished")
		}
	}()
	return _d._base.GetImageByName(ctx, cluster, imageName)
}

// GetImages implements inventory.ImageServerClient.
func (_d ImageServerClientWithSlog) GetImages(ctx context.Context, cluster provisioning.Cluster) (images []api.Image, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("=> calling GetImages")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("images", images),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetImages returned an informative error")
			} else {
				log.Error("<= method GetImages returned an error")
			}
		} else {
			log.Debug("<= method GetImages finished")
		}
	}()
	return _d._base.GetImages(ctx, cluster)
}
