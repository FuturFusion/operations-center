// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// ProjectServerClientWithSlog implements inventory.ProjectServerClient that is instrumented with slog logger.
type ProjectServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.ProjectServerClient
	_isInformativeErrFunc func(error) bool
}

type ProjectServerClientWithSlogOption func(s *ProjectServerClientWithSlog)

func ProjectServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ProjectServerClientWithSlogOption {
	return func(_base *ProjectServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewProjectServerClientWithSlog instruments an implementation of the inventory.ProjectServerClient with simple logging.
func NewProjectServerClientWithSlog(base inventory.ProjectServerClient, log *slog.Logger, opts ...ProjectServerClientWithSlogOption) ProjectServerClientWithSlog {
	this := ProjectServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetProjectByName implements inventory.ProjectServerClient.
func (_d ProjectServerClientWithSlog) GetProjectByName(ctx context.Context, endpoint provisioning.Endpoint, projectName string) (project api.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("projectName", projectName),
		)
	}
	log.Debug("=> calling GetProjectByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("project", project),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetProjectByName returned an informative error")
			} else {
				log.Error("<= method GetProjectByName returned an error")
			}
		} else {
			log.Debug("<= method GetProjectByName finished")
		}
	}()
	return _d._base.GetProjectByName(ctx, endpoint, projectName)
}

// GetProjects implements inventory.ProjectServerClient.
func (_d ProjectServerClientWithSlog) GetProjects(ctx context.Context, endpoint provisioning.Endpoint) (projects []api.Project, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.Debug("=> calling GetProjects")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("projects", projects),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetProjects returned an informative error")
			} else {
				log.Error("<= method GetProjects returned an error")
			}
		} else {
			log.Debug("<= method GetProjects finished")
		}
	}()
	return _d._base.GetProjects(ctx, endpoint)
}
