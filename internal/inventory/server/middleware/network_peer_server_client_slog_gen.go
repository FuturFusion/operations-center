// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// NetworkPeerServerClientWithSlog implements inventory.NetworkPeerServerClient that is instrumented with slog logger.
type NetworkPeerServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.NetworkPeerServerClient
	_isInformativeErrFunc func(error) bool
}

type NetworkPeerServerClientWithSlogOption func(s *NetworkPeerServerClientWithSlog)

func NetworkPeerServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) NetworkPeerServerClientWithSlogOption {
	return func(_base *NetworkPeerServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewNetworkPeerServerClientWithSlog instruments an implementation of the inventory.NetworkPeerServerClient with simple logging.
func NewNetworkPeerServerClientWithSlog(base inventory.NetworkPeerServerClient, log *slog.Logger, opts ...NetworkPeerServerClientWithSlogOption) NetworkPeerServerClientWithSlog {
	this := NetworkPeerServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetNetworkPeerByName implements inventory.NetworkPeerServerClient.
func (_d NetworkPeerServerClientWithSlog) GetNetworkPeerByName(ctx context.Context, endpoint provisioning.Endpoint, networkName string, networkPeerName string) (networkPeer api.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkName", networkName),
			slog.String("networkPeerName", networkPeerName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkPeerByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeer", networkPeer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkPeerByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkPeerByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkPeerByName finished")
		}
	}()
	return _d._base.GetNetworkPeerByName(ctx, endpoint, networkName, networkPeerName)
}

// GetNetworkPeers implements inventory.NetworkPeerServerClient.
func (_d NetworkPeerServerClientWithSlog) GetNetworkPeers(ctx context.Context, endpoint provisioning.Endpoint, networkName string) (networkPeers []api.NetworkPeer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkName", networkName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkPeers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkPeers", networkPeers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkPeers returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkPeers returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkPeers finished")
		}
	}()
	return _d._base.GetNetworkPeers(ctx, endpoint, networkName)
}
