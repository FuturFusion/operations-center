// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// NetworkAddressSetServerClientWithSlog implements inventory.NetworkAddressSetServerClient that is instrumented with slog logger.
type NetworkAddressSetServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.NetworkAddressSetServerClient
	_isInformativeErrFunc func(error) bool
}

type NetworkAddressSetServerClientWithSlogOption func(s *NetworkAddressSetServerClientWithSlog)

func NetworkAddressSetServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) NetworkAddressSetServerClientWithSlogOption {
	return func(_base *NetworkAddressSetServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewNetworkAddressSetServerClientWithSlog instruments an implementation of the inventory.NetworkAddressSetServerClient with simple logging.
func NewNetworkAddressSetServerClientWithSlog(base inventory.NetworkAddressSetServerClient, log *slog.Logger, opts ...NetworkAddressSetServerClientWithSlogOption) NetworkAddressSetServerClientWithSlog {
	this := NetworkAddressSetServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetNetworkAddressSetByName implements inventory.NetworkAddressSetServerClient.
func (_d NetworkAddressSetServerClientWithSlog) GetNetworkAddressSetByName(ctx context.Context, endpoint provisioning.Endpoint, networkAddressSetName string) (networkAddressSet api.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("networkAddressSetName", networkAddressSetName),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkAddressSetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSet", networkAddressSet),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkAddressSetByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkAddressSetByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkAddressSetByName finished")
		}
	}()
	return _d._base.GetNetworkAddressSetByName(ctx, endpoint, networkAddressSetName)
}

// GetNetworkAddressSets implements inventory.NetworkAddressSetServerClient.
func (_d NetworkAddressSetServerClientWithSlog) GetNetworkAddressSets(ctx context.Context, endpoint provisioning.Endpoint) (networkAddressSets []api.NetworkAddressSet, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkAddressSets")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkAddressSets", networkAddressSets),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetNetworkAddressSets returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetNetworkAddressSets returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetNetworkAddressSets finished")
		}
	}()
	return _d._base.GetNetworkAddressSets(ctx, endpoint)
}

// HasExtension implements inventory.NetworkAddressSetServerClient.
func (_d NetworkAddressSetServerClientWithSlog) HasExtension(ctx context.Context, endpoint provisioning.Endpoint, extension string) (exists bool) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("endpoint", endpoint),
			slog.String("extension", extension),
		)
	}
	log.DebugContext(ctx, "=> calling HasExtension")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Bool("exists", exists),
			)
		} else {
		}
		log.DebugContext(ctx, "<= method HasExtension finished")
	}()
	return _d._base.HasExtension(ctx, endpoint, extension)
}
