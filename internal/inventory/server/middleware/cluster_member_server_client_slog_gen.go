// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/lxc/incus/v6/shared/api"
)

// ClusterMemberServerClientWithSlog implements inventory.ClusterMemberServerClient that is instrumented with slog logger.
type ClusterMemberServerClientWithSlog struct {
	_log  *slog.Logger
	_base inventory.ClusterMemberServerClient
}

// NewClusterMemberServerClientWithSlog instruments an implementation of the inventory.ClusterMemberServerClient with simple logging.
func NewClusterMemberServerClientWithSlog(base inventory.ClusterMemberServerClient, log *slog.Logger) ClusterMemberServerClientWithSlog {
	return ClusterMemberServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetClusterMemberByName implements inventory.ClusterMemberServerClient.
func (_d ClusterMemberServerClientWithSlog) GetClusterMemberByName(ctx context.Context, connectionURL string, clusterMemberName string) (clusterMember api.ClusterMember, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("clusterMemberName", clusterMemberName),
		)
	}
	log.Debug("ClusterMemberServerClientWithSlog: calling GetClusterMemberByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusterMember", clusterMember),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterMemberServerClientWithSlog: method GetClusterMemberByName returned an error")
		} else {
			log.Debug("ClusterMemberServerClientWithSlog: method GetClusterMemberByName finished")
		}
	}()
	return _d._base.GetClusterMemberByName(ctx, connectionURL, clusterMemberName)
}

// GetClusterMembers implements inventory.ClusterMemberServerClient.
func (_d ClusterMemberServerClientWithSlog) GetClusterMembers(ctx context.Context, connectionURL string) (clusterMembers []api.ClusterMember, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
		)
	}
	log.Debug("ClusterMemberServerClientWithSlog: calling GetClusterMembers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusterMembers", clusterMembers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterMemberServerClientWithSlog: method GetClusterMembers returned an error")
		} else {
			log.Debug("ClusterMemberServerClientWithSlog: method GetClusterMembers finished")
		}
	}()
	return _d._base.GetClusterMembers(ctx, connectionURL)
}
