// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/lxc/incus/v6/shared/api"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ImageServerClientWithPrometheus implements inventory.ImageServerClient interface with all methods wrapped
// with Prometheus metrics.
type ImageServerClientWithPrometheus struct {
	base         inventory.ImageServerClient
	instanceName string
}

var imageServerClientDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "image_server_client_duration_seconds",
		Help:       "imageServerClient runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewImageServerClientWithPrometheus returns an instance of the inventory.ImageServerClient decorated with prometheus summary metric.
func NewImageServerClientWithPrometheus(base inventory.ImageServerClient, instanceName string) ImageServerClientWithPrometheus {
	return ImageServerClientWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetImageByName implements inventory.ImageServerClient.
func (_d ImageServerClientWithPrometheus) GetImageByName(ctx context.Context, connectionURL string, imageName string) (image api.Image, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		imageServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetImageByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetImageByName(ctx, connectionURL, imageName)
}

// GetImages implements inventory.ImageServerClient.
func (_d ImageServerClientWithPrometheus) GetImages(ctx context.Context, connectionURL string) (images []api.Image, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		imageServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetImages", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetImages(ctx, connectionURL)
}
