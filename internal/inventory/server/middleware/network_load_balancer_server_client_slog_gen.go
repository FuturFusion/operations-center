// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/lxc/incus/v6/shared/api"
)

// NetworkLoadBalancerServerClientWithSlog implements inventory.NetworkLoadBalancerServerClient that is instrumented with slog logger.
type NetworkLoadBalancerServerClientWithSlog struct {
	_log  *slog.Logger
	_base inventory.NetworkLoadBalancerServerClient
}

// NewNetworkLoadBalancerServerClientWithSlog instruments an implementation of the inventory.NetworkLoadBalancerServerClient with simple logging.
func NewNetworkLoadBalancerServerClientWithSlog(base inventory.NetworkLoadBalancerServerClient, log *slog.Logger) NetworkLoadBalancerServerClientWithSlog {
	return NetworkLoadBalancerServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkLoadBalancerByName implements inventory.NetworkLoadBalancerServerClient.
func (_d NetworkLoadBalancerServerClientWithSlog) GetNetworkLoadBalancerByName(ctx context.Context, connectionURL string, networkName string, networkLoadBalancerName string) (networkLoadBalancer api.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
			slog.String("networkLoadBalancerName", networkLoadBalancerName),
		)
	}
	log.Debug("=> calling GetNetworkLoadBalancerByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancer", networkLoadBalancer),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkLoadBalancerByName returned an error")
		} else {
			log.Debug("<= method GetNetworkLoadBalancerByName finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancerByName(ctx, connectionURL, networkName, networkLoadBalancerName)
}

// GetNetworkLoadBalancers implements inventory.NetworkLoadBalancerServerClient.
func (_d NetworkLoadBalancerServerClientWithSlog) GetNetworkLoadBalancers(ctx context.Context, connectionURL string, networkName string) (networkLoadBalancers []api.NetworkLoadBalancer, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("=> calling GetNetworkLoadBalancers")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkLoadBalancers", networkLoadBalancers),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetNetworkLoadBalancers returned an error")
		} else {
			log.Debug("<= method GetNetworkLoadBalancers finished")
		}
	}()
	return _d._base.GetNetworkLoadBalancers(ctx, connectionURL, networkName)
}
