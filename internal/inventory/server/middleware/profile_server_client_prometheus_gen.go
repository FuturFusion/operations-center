// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ProfileServerClientWithPrometheus implements inventory.ProfileServerClient interface with all methods wrapped
// with Prometheus metrics.
type ProfileServerClientWithPrometheus struct {
	base         inventory.ProfileServerClient
	instanceName string
}

var profileServerClientDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "profile_server_client_duration_seconds",
		Help:       "profileServerClient runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewProfileServerClientWithPrometheus returns an instance of the inventory.ProfileServerClient decorated with prometheus summary metric.
func NewProfileServerClientWithPrometheus(base inventory.ProfileServerClient, instanceName string) ProfileServerClientWithPrometheus {
	return ProfileServerClientWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetProfileByName implements inventory.ProfileServerClient.
func (_d ProfileServerClientWithPrometheus) GetProfileByName(ctx context.Context, cluster provisioning.Cluster, profileName string) (profile api.Profile, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		profileServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProfileByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProfileByName(ctx, cluster, profileName)
}

// GetProfiles implements inventory.ProfileServerClient.
func (_d ProfileServerClientWithPrometheus) GetProfiles(ctx context.Context, cluster provisioning.Cluster) (profiles []api.Profile, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		profileServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProfiles", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProfiles(ctx, cluster)
}
