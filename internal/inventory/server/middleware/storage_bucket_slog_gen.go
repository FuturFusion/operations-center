// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// StorageBucketServerClientWithSlog implements _sourceInventory.StorageBucketServerClient that is instrumented with slog logger
type StorageBucketServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.StorageBucketServerClient
}

// NewStorageBucketServerClientWithSlog instruments an implementation of the _sourceInventory.StorageBucketServerClient with simple logging
func NewStorageBucketServerClientWithSlog(base _sourceInventory.StorageBucketServerClient, log *slog.Logger) StorageBucketServerClientWithSlog {
	return StorageBucketServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetStorageBucketByName implements _sourceInventory.StorageBucketServerClient
func (_d StorageBucketServerClientWithSlog) GetStorageBucketByName(ctx context.Context, connectionURL string, storagePoolName string, storageBucketName string) (s1 incusapi.StorageBucket, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("storagePoolName", storagePoolName),
		slog.String("storageBucketName", storageBucketName),
	).Debug("StorageBucketServerClientWithSlog: calling GetStorageBucketByName")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("StorageBucketServerClientWithSlog: method GetStorageBucketByName returned an error")
		} else {
			log.Debug("StorageBucketServerClientWithSlog: method GetStorageBucketByName finished")
		}
	}()
	return _d._base.GetStorageBucketByName(ctx, connectionURL, storagePoolName, storageBucketName)
}

// GetStorageBuckets implements _sourceInventory.StorageBucketServerClient
func (_d StorageBucketServerClientWithSlog) GetStorageBuckets(ctx context.Context, connectionURL string, storagePoolName string) (sa1 []incusapi.StorageBucket, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("storagePoolName", storagePoolName),
	).Debug("StorageBucketServerClientWithSlog: calling GetStorageBuckets")
	defer func() {
		log := _d._log.With(
			slog.Any("sa1", sa1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("StorageBucketServerClientWithSlog: method GetStorageBuckets returned an error")
		} else {
			log.Debug("StorageBucketServerClientWithSlog: method GetStorageBuckets finished")
		}
	}()
	return _d._base.GetStorageBuckets(ctx, connectionURL, storagePoolName)
}
