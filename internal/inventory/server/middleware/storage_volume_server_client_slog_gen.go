// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/lxc/incus/v6/shared/api"
)

// StorageVolumeServerClientWithSlog implements inventory.StorageVolumeServerClient that is instrumented with slog logger.
type StorageVolumeServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.StorageVolumeServerClient
	_isInformativeErrFunc func(error) bool
}

type StorageVolumeServerClientWithSlogOption func(s *StorageVolumeServerClientWithSlog)

func StorageVolumeServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) StorageVolumeServerClientWithSlogOption {
	return func(_base *StorageVolumeServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewStorageVolumeServerClientWithSlog instruments an implementation of the inventory.StorageVolumeServerClient with simple logging.
func NewStorageVolumeServerClientWithSlog(base inventory.StorageVolumeServerClient, log *slog.Logger, opts ...StorageVolumeServerClientWithSlogOption) StorageVolumeServerClientWithSlog {
	this := StorageVolumeServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetStorageVolumeByName implements inventory.StorageVolumeServerClient.
func (_d StorageVolumeServerClientWithSlog) GetStorageVolumeByName(ctx context.Context, cluster provisioning.Cluster, storagePoolName string, storageVolumeName string, storageVolumeType string) (storageVolume api.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
			slog.String("storagePoolName", storagePoolName),
			slog.String("storageVolumeName", storageVolumeName),
			slog.String("storageVolumeType", storageVolumeType),
		)
	}
	log.Debug("=> calling GetStorageVolumeByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageVolume", storageVolume),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetStorageVolumeByName returned an informative error")
			} else {
				log.Error("<= method GetStorageVolumeByName returned an error")
			}
		} else {
			log.Debug("<= method GetStorageVolumeByName finished")
		}
	}()
	return _d._base.GetStorageVolumeByName(ctx, cluster, storagePoolName, storageVolumeName, storageVolumeType)
}

// GetStorageVolumes implements inventory.StorageVolumeServerClient.
func (_d StorageVolumeServerClientWithSlog) GetStorageVolumes(ctx context.Context, cluster provisioning.Cluster, storagePoolName string) (storageVolumes []api.StorageVolume, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
			slog.String("storagePoolName", storagePoolName),
		)
	}
	log.Debug("=> calling GetStorageVolumes")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("storageVolumes", storageVolumes),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetStorageVolumes returned an informative error")
			} else {
				log.Error("<= method GetStorageVolumes returned an error")
			}
		} else {
			log.Debug("<= method GetStorageVolumes finished")
		}
	}()
	return _d._base.GetStorageVolumes(ctx, cluster, storagePoolName)
}
