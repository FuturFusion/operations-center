// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/lxc/incus/v6/shared/api"
)

// NetworkForwardServerClientWithSlog implements inventory.NetworkForwardServerClient that is instrumented with slog logger.
type NetworkForwardServerClientWithSlog struct {
	_log                  *slog.Logger
	_base                 inventory.NetworkForwardServerClient
	_isInformativeErrFunc func(error) bool
}

type NetworkForwardServerClientWithSlogOption func(s *NetworkForwardServerClientWithSlog)

func NetworkForwardServerClientWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) NetworkForwardServerClientWithSlogOption {
	return func(_base *NetworkForwardServerClientWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewNetworkForwardServerClientWithSlog instruments an implementation of the inventory.NetworkForwardServerClient with simple logging.
func NewNetworkForwardServerClientWithSlog(base inventory.NetworkForwardServerClient, log *slog.Logger, opts ...NetworkForwardServerClientWithSlogOption) NetworkForwardServerClientWithSlog {
	this := NetworkForwardServerClientWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetNetworkForwardByName implements inventory.NetworkForwardServerClient.
func (_d NetworkForwardServerClientWithSlog) GetNetworkForwardByName(ctx context.Context, connectionURL string, networkName string, networkForwardName string) (networkForward api.NetworkForward, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
			slog.String("networkForwardName", networkForwardName),
		)
	}
	log.Debug("=> calling GetNetworkForwardByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkForward", networkForward),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetNetworkForwardByName returned an informative error")
			} else {
				log.Error("<= method GetNetworkForwardByName returned an error")
			}
		} else {
			log.Debug("<= method GetNetworkForwardByName finished")
		}
	}()
	return _d._base.GetNetworkForwardByName(ctx, connectionURL, networkName, networkForwardName)
}

// GetNetworkForwards implements inventory.NetworkForwardServerClient.
func (_d NetworkForwardServerClientWithSlog) GetNetworkForwards(ctx context.Context, connectionURL string, networkName string) (networkForwards []api.NetworkForward, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("connectionURL", connectionURL),
			slog.String("networkName", networkName),
		)
	}
	log.Debug("=> calling GetNetworkForwards")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("networkForwards", networkForwards),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetNetworkForwards returned an informative error")
			} else {
				log.Error("<= method GetNetworkForwards returned an error")
			}
		} else {
			log.Debug("<= method GetNetworkForwards finished")
		}
	}()
	return _d._base.GetNetworkForwards(ctx, connectionURL, networkName)
}
