// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/lxc/incus/v6/shared/api"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// NetworkPeerServerClientWithPrometheus implements inventory.NetworkPeerServerClient interface with all methods wrapped
// with Prometheus metrics.
type NetworkPeerServerClientWithPrometheus struct {
	base         inventory.NetworkPeerServerClient
	instanceName string
}

var networkPeerServerClientDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "network_peer_server_client_duration_seconds",
		Help:       "networkPeerServerClient runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewNetworkPeerServerClientWithPrometheus returns an instance of the inventory.NetworkPeerServerClient decorated with prometheus summary metric.
func NewNetworkPeerServerClientWithPrometheus(base inventory.NetworkPeerServerClient, instanceName string) NetworkPeerServerClientWithPrometheus {
	return NetworkPeerServerClientWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetNetworkPeerByName implements inventory.NetworkPeerServerClient.
func (_d NetworkPeerServerClientWithPrometheus) GetNetworkPeerByName(ctx context.Context, connectionURL string, networkName string, networkPeerName string) (networkPeer api.NetworkPeer, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkPeerServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkPeerByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkPeerByName(ctx, connectionURL, networkName, networkPeerName)
}

// GetNetworkPeers implements inventory.NetworkPeerServerClient.
func (_d NetworkPeerServerClientWithPrometheus) GetNetworkPeers(ctx context.Context, connectionURL string, networkName string) (networkPeers []api.NetworkPeer, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		networkPeerServerClientDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkPeers", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkPeers(ctx, connectionURL, networkName)
}
