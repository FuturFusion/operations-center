// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceInventory "github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// NetworkZoneServerClientWithSlog implements _sourceInventory.NetworkZoneServerClient that is instrumented with slog logger
type NetworkZoneServerClientWithSlog struct {
	_log  *slog.Logger
	_base _sourceInventory.NetworkZoneServerClient
}

// NewNetworkZoneServerClientWithSlog instruments an implementation of the _sourceInventory.NetworkZoneServerClient with simple logging
func NewNetworkZoneServerClientWithSlog(base _sourceInventory.NetworkZoneServerClient, log *slog.Logger) NetworkZoneServerClientWithSlog {
	return NetworkZoneServerClientWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetNetworkZoneByName implements _sourceInventory.NetworkZoneServerClient
func (_d NetworkZoneServerClientWithSlog) GetNetworkZoneByName(ctx context.Context, connectionURL string, networkZoneName string) (n1 incusapi.NetworkZone, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
		slog.String("networkZoneName", networkZoneName),
	).Debug("NetworkZoneServerClientWithSlog: calling GetNetworkZoneByName")
	defer func() {
		log := _d._log.With(
			slog.Any("n1", n1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkZoneServerClientWithSlog: method GetNetworkZoneByName returned an error")
		} else {
			log.Debug("NetworkZoneServerClientWithSlog: method GetNetworkZoneByName finished")
		}
	}()
	return _d._base.GetNetworkZoneByName(ctx, connectionURL, networkZoneName)
}

// GetNetworkZones implements _sourceInventory.NetworkZoneServerClient
func (_d NetworkZoneServerClientWithSlog) GetNetworkZones(ctx context.Context, connectionURL string) (na1 []incusapi.NetworkZone, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("connectionURL", connectionURL),
	).Debug("NetworkZoneServerClientWithSlog: calling GetNetworkZones")
	defer func() {
		log := _d._log.With(
			slog.Any("na1", na1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("NetworkZoneServerClientWithSlog: method GetNetworkZones returned an error")
		} else {
			log.Debug("NetworkZoneServerClientWithSlog: method GetNetworkZones finished")
		}
	}()
	return _d._base.GetNetworkZones(ctx, connectionURL)
}
