// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type clusterMemberService struct {
	repo                ClusterMemberRepo
	clusterSvc          ProvisioningClusterService
	clusterMemberClient ClusterMemberServerClient

	now func() time.Time
}

var _ ClusterMemberService = &clusterMemberService{}

type ClusterMemberServiceOption func(s *clusterMemberService)

func NewClusterMemberService(repo ClusterMemberRepo, clusterSvc ProvisioningClusterService, client ClusterMemberServerClient, opts ...ClusterMemberServiceOption) clusterMemberService {
	clusterMemberSvc := clusterMemberService{
		repo:                repo,
		clusterSvc:          clusterSvc,
		clusterMemberClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&clusterMemberSvc)
	}

	return clusterMemberSvc
}

func (s clusterMemberService) GetAllIDsWithFilter(ctx context.Context, filter ClusterMemberFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s clusterMemberService) GetByID(ctx context.Context, id int) (ClusterMember, error) {
	return s.repo.GetByID(ctx, id)
}

func (s clusterMemberService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		clusterMember, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByID(ctx, clusterMember.ClusterID)
		if err != nil {
			return err
		}

		retrievedClusterMember, err := s.clusterMemberClient.GetClusterMemberByName(ctx, cluster.ConnectionURL, clusterMember.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, clusterMember.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		clusterMember.Object = retrievedClusterMember
		clusterMember.LastUpdated = s.now()

		err = clusterMember.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, clusterMember)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s clusterMemberService) SyncCluster(ctx context.Context, clusterID int) error {
	cluster, err := s.clusterSvc.GetByID(ctx, clusterID)
	if err != nil {
		return err
	}

	retrievedClusterMembers, err := s.clusterMemberClient.GetClusterMembers(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterID(ctx, clusterID)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedClusterMember := range retrievedClusterMembers {
			clusterMember := ClusterMember{
				ClusterID:   clusterID,
				Name:        retrievedClusterMember.ServerName,
				Object:      retrievedClusterMember,
				LastUpdated: s.now(),
			}

			err = clusterMember.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, clusterMember)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
