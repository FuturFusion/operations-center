// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type storageBucketService struct {
	repo                StorageBucketRepo
	clusterSvc          ClusterService
	serverSvc           ServerService
	storagePoolClient   StoragePoolServerClient
	storageBucketClient StorageBucketServerClient

	now func() time.Time
}

var _ StorageBucketService = &storageBucketService{}

type StorageBucketServiceOption func(s *storageBucketService)

func NewStorageBucketService(repo StorageBucketRepo, clusterSvc ClusterService, serverSvc ServerService, client StorageBucketServerClient, parentClient StoragePoolServerClient, opts ...StorageBucketServiceOption) storageBucketService {
	storageBucketSvc := storageBucketService{
		repo:                repo,
		clusterSvc:          clusterSvc,
		serverSvc:           serverSvc,
		storagePoolClient:   parentClient,
		storageBucketClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&storageBucketSvc)
	}

	return storageBucketSvc
}

func (s storageBucketService) GetAllIDs(ctx context.Context) ([]int, error) {
	return s.repo.GetAllIDs(ctx)
}

func (s storageBucketService) GetByID(ctx context.Context, id int) (StorageBucket, error) {
	return s.repo.GetByID(ctx, id)
}

func (s storageBucketService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s storageBucketService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s storageBucketService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	serverStoragePools, err := s.storagePoolClient.GetStoragePools(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	for _, storagePool := range serverStoragePools {
		serverStorageBuckets, err := s.storageBucketClient.GetStorageBuckets(ctx, server.ConnectionURL, storagePool.Name)
		if err != nil {
			return err
		}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			err = s.repo.DeleteByServerID(ctx, serverID)
			if err != nil && !errors.Is(err, domain.ErrNotFound) {
				return err
			}

			for _, serverStorageBucket := range serverStorageBuckets {
				storageBucket := StorageBucket{
					ClusterID:       server.ClusterID,
					ServerID:        serverID,
					ProjectName:     serverStorageBucket.Project,
					StoragePoolName: storagePool.Name,
					Name:            serverStorageBucket.Name,
					Object:          serverStorageBucket,
					LastUpdated:     s.now(),
				}

				_, err := s.repo.Create(ctx, storageBucket)
				if err != nil {
					return err
				}
			}

			return nil
		})
		if err != nil {
			return err
		}

	}

	return nil
}
