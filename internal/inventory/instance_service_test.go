// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestInstanceService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.InstanceFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, nil, nil, inventory.InstanceWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			instanceIDs, err := instanceSvc.GetAllIDsWithFilter(context.Background(), inventory.InstanceFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, instanceIDs, tc.count)
		})
	}
}

func TestInstanceService_GetByID(t *testing.T) {
	tests := []struct {
		name                string
		idArg               int
		repoGetByIDInstance inventory.Instance
		repoGetByIDErr      error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDInstance: inventory.Instance{
				ID:          1,
				Cluster:     "one",
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.InstanceFull{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Instance, error) {
					return tc.repoGetByIDInstance, tc.repoGetByIDErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, nil, nil, inventory.InstanceWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			instance, err := instanceSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDInstance, instance)
		})
	}
}

func TestInstanceService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                               string
		clusterSvcGetByIDCluster           provisioning.Cluster
		clusterSvcGetByIDErr               error
		instanceClientGetInstanceByName    incusapi.InstanceFull
		instanceClientGetInstanceByNameErr error
		repoGetByIDInstance                inventory.Instance
		repoGetByIDErr                     error
		repoUpdateByIDErr                  error
		repoDeleteByIDErr                  error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDInstance: inventory.Instance{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByName: incusapi.InstanceFull{
				Instance: incusapi.Instance{
					Name:     "instance one",
					Location: "one",
					Project:  "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - instance get by name - not found",
			repoGetByIDInstance: inventory.Instance{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - instance get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDInstance: inventory.Instance{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - instance get by name",
			repoGetByIDInstance: inventory.Instance{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - instance get by name - not found - delete by id",
			repoGetByIDInstance: inventory.Instance{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr:                  boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDInstance: inventory.Instance{
				ID:      1,
				Cluster: "one",
				Name:    "", // invalid
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByName: incusapi.InstanceFull{
				Instance: incusapi.Instance{
					Name:     "instance one",
					Location: "one",
					Project:  "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDInstance: inventory.Instance{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstanceByName: incusapi.InstanceFull{
				Instance: incusapi.Instance{
					Name:     "instance one",
					Location: "one",
					Project:  "project one",
				},
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Instance, error) {
					return tc.repoGetByIDInstance, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, instance inventory.Instance) (inventory.Instance, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), instance.LastUpdated)
					return inventory.Instance{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			instanceClient := &serverMock.InstanceServerClientMock{
				GetInstanceByNameFunc: func(ctx context.Context, connectionURL string, instanceName string) (incusapi.InstanceFull, error) {
					require.Equal(t, tc.repoGetByIDInstance.Name, instanceName)
					return tc.instanceClientGetInstanceByName, tc.instanceClientGetInstanceByNameErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, clusterSvc, instanceClient, inventory.InstanceWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := instanceSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestInstanceService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                          string
		clusterSvcGetByIDCluster      provisioning.Cluster
		clusterSvcGetByIDErr          error
		instanceClientGetInstances    []incusapi.InstanceFull
		instanceClientGetInstancesErr error
		repoDeleteByClusterNameErr    error
		repoCreateErr                 error
		serviceOptions                []inventory.InstanceServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "instance one",
						Location: "one",
						Project:  "project one",
					},
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - instance client get Instances",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstancesErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - instances delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "instance one",
						Location: "one",
						Project:  "project one",
					},
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "", // invalid
						Location: "one",
						Project:  "project one",
					},
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - instance create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			instanceClientGetInstances: []incusapi.InstanceFull{
				{
					Instance: incusapi.Instance{
						Name:     "instance one",
						Location: "one",
						Project:  "project one",
					},
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.InstanceRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, instance inventory.Instance) (inventory.Instance, error) {
					return inventory.Instance{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (provisioning.Cluster, error) {
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			instanceClient := &serverMock.InstanceServerClientMock{
				GetInstancesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error) {
					return tc.instanceClientGetInstances, tc.instanceClientGetInstancesErr
				},
			}

			instanceSvc := inventory.NewInstanceService(repo, clusterSvc, instanceClient,
				append(
					tc.serviceOptions,
					inventory.InstanceWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := instanceSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
