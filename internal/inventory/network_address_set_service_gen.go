// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkAddressSetService struct {
	repo                    NetworkAddressSetRepo
	clusterSvc              ProvisioningClusterService
	networkAddressSetClient NetworkAddressSetServerClient

	clusterSyncFilterFunc func(networkAddressSet NetworkAddressSet) bool

	now func() time.Time
}

var _ NetworkAddressSetService = &networkAddressSetService{}

type NetworkAddressSetServiceOption func(s *networkAddressSetService)

func NetworkAddressSetWithSyncFilter(clusterSyncFilterFunc func(networkAddressSet NetworkAddressSet) bool) NetworkAddressSetServiceOption {
	return func(s *networkAddressSetService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewNetworkAddressSetService(repo NetworkAddressSetRepo, clusterSvc ProvisioningClusterService, client NetworkAddressSetServerClient, opts ...NetworkAddressSetServiceOption) networkAddressSetService {
	networkAddressSetSvc := networkAddressSetService{
		repo:                    repo,
		clusterSvc:              clusterSvc,
		networkAddressSetClient: client,

		clusterSyncFilterFunc: func(networkAddressSet NetworkAddressSet) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkAddressSetSvc)
	}

	return networkAddressSetSvc
}

func (s networkAddressSetService) GetAllWithFilter(ctx context.Context, filter NetworkAddressSetFilter) (NetworkAddressSets, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(NetworkAddressSet{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkAddressSets, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkAddressSets NetworkAddressSets
	if filter.Expression != nil {
		for _, networkAddressSet := range networkAddressSets {
			output, err := expr.Run(filterExpression, networkAddressSet)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkAddressSets = append(filteredNetworkAddressSets, networkAddressSet)
			}
		}

		return filteredNetworkAddressSets, nil
	}

	return networkAddressSets, nil
}

func (s networkAddressSetService) GetAllUUIDsWithFilter(ctx context.Context, filter NetworkAddressSetFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkAddressSetsUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkAddressSetsUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, networkAddressSetUUID := range networkAddressSetsUUIDs {
			output, err := expr.Run(filterExpression, Env{networkAddressSetUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkAddressSetsUUIDs = append(filteredNetworkAddressSetsUUIDs, networkAddressSetUUID)
			}
		}

		return filteredNetworkAddressSetsUUIDs, nil
	}

	return networkAddressSetsUUIDs, nil
}

func (s networkAddressSetService) GetByUUID(ctx context.Context, id uuid.UUID) (NetworkAddressSet, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s networkAddressSetService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkAddressSet, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, networkAddressSet.Cluster)
		if err != nil {
			return err
		}

		retrievedNetworkAddressSet, err := s.networkAddressSetClient.GetNetworkAddressSetByName(ctx, *cluster, networkAddressSet.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, networkAddressSet.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkAddressSet.ProjectName = retrievedNetworkAddressSet.Project
		networkAddressSet.Object = retrievedNetworkAddressSet
		networkAddressSet.LastUpdated = s.now()
		networkAddressSet.DeriveUUID()

		err = networkAddressSet.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, networkAddressSet)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkAddressSetService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	if !s.networkAddressSetClient.HasExtension(ctx, *cluster, "network_address_set") {
		return nil
	}

	retrievedNetworkAddressSets, err := s.networkAddressSetClient.GetNetworkAddressSets(ctx, *cluster)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedNetworkAddressSet := range retrievedNetworkAddressSets {
			networkAddressSet := NetworkAddressSet{
				Cluster:     name,
				ProjectName: retrievedNetworkAddressSet.Project,
				Name:        retrievedNetworkAddressSet.Name,
				Object:      retrievedNetworkAddressSet,
				LastUpdated: s.now(),
			}

			networkAddressSet.DeriveUUID()

			if s.clusterSyncFilterFunc(networkAddressSet) {
				continue
			}

			err = networkAddressSet.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, networkAddressSet)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
