// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type projectService struct {
	repo          ProjectRepo
	clusterSvc    ProvisioningClusterService
	projectClient ProjectServerClient

	now func() time.Time
}

var _ ProjectService = &projectService{}

type ProjectServiceOption func(s *projectService)

func NewProjectService(repo ProjectRepo, clusterSvc ProvisioningClusterService, client ProjectServerClient, opts ...ProjectServiceOption) projectService {
	projectSvc := projectService{
		repo:          repo,
		clusterSvc:    clusterSvc,
		projectClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&projectSvc)
	}

	return projectSvc
}

func (s projectService) GetAllWithFilter(ctx context.Context, filter ProjectFilter) (Projects, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Project{})}...)
		if err != nil {
			return nil, err
		}
	}

	projects, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredProjects Projects
	if filter.Expression != nil {
		for _, project := range projects {
			output, err := expr.Run(filterExpression, project)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredProjects = append(filteredProjects, project)
			}
		}

		return filteredProjects, nil
	}

	return projects, nil
}

func (s projectService) GetAllIDsWithFilter(ctx context.Context, filter ProjectFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s projectService) GetByID(ctx context.Context, id int) (Project, error) {
	return s.repo.GetByID(ctx, id)
}

func (s projectService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		project, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, project.Cluster)
		if err != nil {
			return err
		}

		retrievedProject, err := s.projectClient.GetProjectByName(ctx, cluster.ConnectionURL, project.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, project.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		project.Object = retrievedProject
		project.LastUpdated = s.now()

		err = project.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, project)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s projectService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedProjects, err := s.projectClient.GetProjects(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedProject := range retrievedProjects {
			project := Project{
				Cluster:     name,
				Name:        retrievedProject.Name,
				Object:      retrievedProject,
				LastUpdated: s.now(),
			}

			err = project.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, project)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
