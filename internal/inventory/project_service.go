// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type projectService struct {
	repo          ProjectRepo
	clusterSvc    ClusterService
	serverSvc     ServerService
	projectClient ProjectServerClient

	now func() time.Time
}

var _ ProjectService = &projectService{}

type ProjectServiceOption func(s *projectService)

func NewProjectService(repo ProjectRepo, clusterSvc ClusterService, serverSvc ServerService, client ProjectServerClient, opts ...ProjectServiceOption) projectService {
	projectSvc := projectService{
		repo:          repo,
		clusterSvc:    clusterSvc,
		serverSvc:     serverSvc,
		projectClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&projectSvc)
	}

	return projectSvc
}

func (s projectService) GetAllIDsWithFilter(ctx context.Context, filter ProjectFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s projectService) GetByID(ctx context.Context, id int) (Project, error) {
	return s.repo.GetByID(ctx, id)
}

func (s projectService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s projectService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s projectService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	serverProjects, err := s.projectClient.GetProjects(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByServerID(ctx, serverID)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, serverProject := range serverProjects {
			project := Project{
				ClusterID:   server.ClusterID,
				ServerID:    serverID,
				Name:        serverProject.Name,
				Object:      serverProject,
				LastUpdated: s.now(),
			}

			_, err := s.repo.Create(ctx, project)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
