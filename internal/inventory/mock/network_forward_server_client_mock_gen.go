// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// Ensure, that NetworkForwardServerClientMock does implement inventory.NetworkForwardServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.NetworkForwardServerClient = &NetworkForwardServerClientMock{}

// NetworkForwardServerClientMock is a mock implementation of inventory.NetworkForwardServerClient.
//
//	func TestSomethingThatUsesNetworkForwardServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkForwardServerClient
//		mockedNetworkForwardServerClient := &NetworkForwardServerClientMock{
//			GetNetworkForwardsFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkForward, error) {
//				panic("mock out the GetNetworkForwards method")
//			},
//		}
//
//		// use mockedNetworkForwardServerClient in code that requires inventory.NetworkForwardServerClient
//		// and then make assertions.
//
//	}
type NetworkForwardServerClientMock struct {
	// GetNetworkForwardsFunc mocks the GetNetworkForwards method.
	GetNetworkForwardsFunc func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkForward, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNetworkForwards holds details about calls to the GetNetworkForwards method.
		GetNetworkForwards []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// NetworkName is the networkName argument value.
			NetworkName string
		}
	}
	lockGetNetworkForwards sync.RWMutex
}

// GetNetworkForwards calls GetNetworkForwardsFunc.
func (mock *NetworkForwardServerClientMock) GetNetworkForwards(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkForward, error) {
	if mock.GetNetworkForwardsFunc == nil {
		panic("NetworkForwardServerClientMock.GetNetworkForwardsFunc: method is nil but NetworkForwardServerClient.GetNetworkForwards was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
		NetworkName:   networkName,
	}
	mock.lockGetNetworkForwards.Lock()
	mock.calls.GetNetworkForwards = append(mock.calls.GetNetworkForwards, callInfo)
	mock.lockGetNetworkForwards.Unlock()
	return mock.GetNetworkForwardsFunc(ctx, connectionURL, networkName)
}

// GetNetworkForwardsCalls gets all the calls that were made to GetNetworkForwards.
// Check the length with:
//
//	len(mockedNetworkForwardServerClient.GetNetworkForwardsCalls())
func (mock *NetworkForwardServerClientMock) GetNetworkForwardsCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
	NetworkName   string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}
	mock.lockGetNetworkForwards.RLock()
	calls = mock.calls.GetNetworkForwards
	mock.lockGetNetworkForwards.RUnlock()
	return calls
}
