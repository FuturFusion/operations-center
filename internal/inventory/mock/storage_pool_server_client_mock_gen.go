// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// Ensure, that StoragePoolServerClientMock does implement inventory.StoragePoolServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.StoragePoolServerClient = &StoragePoolServerClientMock{}

// StoragePoolServerClientMock is a mock implementation of inventory.StoragePoolServerClient.
//
//	func TestSomethingThatUsesStoragePoolServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.StoragePoolServerClient
//		mockedStoragePoolServerClient := &StoragePoolServerClientMock{
//			GetStoragePoolsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.StoragePool, error) {
//				panic("mock out the GetStoragePools method")
//			},
//		}
//
//		// use mockedStoragePoolServerClient in code that requires inventory.StoragePoolServerClient
//		// and then make assertions.
//
//	}
type StoragePoolServerClientMock struct {
	// GetStoragePoolsFunc mocks the GetStoragePools method.
	GetStoragePoolsFunc func(ctx context.Context, connectionURL string) ([]incusapi.StoragePool, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetStoragePools holds details about calls to the GetStoragePools method.
		GetStoragePools []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
	}
	lockGetStoragePools sync.RWMutex
}

// GetStoragePools calls GetStoragePoolsFunc.
func (mock *StoragePoolServerClientMock) GetStoragePools(ctx context.Context, connectionURL string) ([]incusapi.StoragePool, error) {
	if mock.GetStoragePoolsFunc == nil {
		panic("StoragePoolServerClientMock.GetStoragePoolsFunc: method is nil but StoragePoolServerClient.GetStoragePools was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetStoragePools.Lock()
	mock.calls.GetStoragePools = append(mock.calls.GetStoragePools, callInfo)
	mock.lockGetStoragePools.Unlock()
	return mock.GetStoragePoolsFunc(ctx, connectionURL)
}

// GetStoragePoolsCalls gets all the calls that were made to GetStoragePools.
// Check the length with:
//
//	len(mockedStoragePoolServerClient.GetStoragePoolsCalls())
func (mock *StoragePoolServerClientMock) GetStoragePoolsCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetStoragePools.RLock()
	calls = mock.calls.GetStoragePools
	mock.lockGetStoragePools.RUnlock()
	return calls
}
