// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// Ensure, that ServerClientMock does implement inventory.ServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.ServerClient = &ServerClientMock{}

// ServerClientMock is a mock implementation of inventory.ServerClient.
//
//	func TestSomethingThatUsesServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.ServerClient
//		mockedServerClient := &ServerClientMock{
//			GetImagesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Image, error) {
//				panic("mock out the GetImages method")
//			},
//			GetInstancesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error) {
//				panic("mock out the GetInstances method")
//			},
//		}
//
//		// use mockedServerClient in code that requires inventory.ServerClient
//		// and then make assertions.
//
//	}
type ServerClientMock struct {
	// GetImagesFunc mocks the GetImages method.
	GetImagesFunc func(ctx context.Context, connectionURL string) ([]incusapi.Image, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetImages holds details about calls to the GetImages method.
		GetImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
	}
	lockGetImages    sync.RWMutex
	lockGetInstances sync.RWMutex
}

// GetImages calls GetImagesFunc.
func (mock *ServerClientMock) GetImages(ctx context.Context, connectionURL string) ([]incusapi.Image, error) {
	if mock.GetImagesFunc == nil {
		panic("ServerClientMock.GetImagesFunc: method is nil but ServerClient.GetImages was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetImages.Lock()
	mock.calls.GetImages = append(mock.calls.GetImages, callInfo)
	mock.lockGetImages.Unlock()
	return mock.GetImagesFunc(ctx, connectionURL)
}

// GetImagesCalls gets all the calls that were made to GetImages.
// Check the length with:
//
//	len(mockedServerClient.GetImagesCalls())
func (mock *ServerClientMock) GetImagesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetImages.RLock()
	calls = mock.calls.GetImages
	mock.lockGetImages.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *ServerClientMock) GetInstances(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error) {
	if mock.GetInstancesFunc == nil {
		panic("ServerClientMock.GetInstancesFunc: method is nil but ServerClient.GetInstances was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	mock.lockGetInstances.Unlock()
	return mock.GetInstancesFunc(ctx, connectionURL)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//
//	len(mockedServerClient.GetInstancesCalls())
func (mock *ServerClientMock) GetInstancesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetInstances.RLock()
	calls = mock.calls.GetInstances
	mock.lockGetInstances.RUnlock()
	return calls
}
