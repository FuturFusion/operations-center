// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// Ensure, that ServerClientMock does implement inventory.ServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.ServerClient = &ServerClientMock{}

// ServerClientMock is a mock implementation of inventory.ServerClient.
//
//	func TestSomethingThatUsesServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.ServerClient
//		mockedServerClient := &ServerClientMock{
//			GetImagesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Image, error) {
//				panic("mock out the GetImages method")
//			},
//			GetInstancesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error) {
//				panic("mock out the GetInstances method")
//			},
//			GetNetworkACLsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkACL, error) {
//				panic("mock out the GetNetworkACLs method")
//			},
//			GetNetworkIntegrationsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkIntegration, error) {
//				panic("mock out the GetNetworkIntegrations method")
//			},
//			GetNetworkLoadBalancersFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkLoadBalancer, error) {
//				panic("mock out the GetNetworkLoadBalancers method")
//			},
//			GetNetworkPeersFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkPeer, error) {
//				panic("mock out the GetNetworkPeers method")
//			},
//			GetNetworkZonesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error) {
//				panic("mock out the GetNetworkZones method")
//			},
//			GetNetworksFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
//				panic("mock out the GetNetworks method")
//			},
//			GetProfilesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Profile, error) {
//				panic("mock out the GetProfiles method")
//			},
//			GetProjectsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Project, error) {
//				panic("mock out the GetProjects method")
//			},
//			GetStorageBucketsFunc: func(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageBucket, error) {
//				panic("mock out the GetStorageBuckets method")
//			},
//			GetStoragePoolsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.StoragePool, error) {
//				panic("mock out the GetStoragePools method")
//			},
//			GetStorageVolumesFunc: func(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageVolume, error) {
//				panic("mock out the GetStorageVolumes method")
//			},
//		}
//
//		// use mockedServerClient in code that requires inventory.ServerClient
//		// and then make assertions.
//
//	}
type ServerClientMock struct {
	// GetImagesFunc mocks the GetImages method.
	GetImagesFunc func(ctx context.Context, connectionURL string) ([]incusapi.Image, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error)

	// GetNetworkACLsFunc mocks the GetNetworkACLs method.
	GetNetworkACLsFunc func(ctx context.Context, connectionURL string) ([]incusapi.NetworkACL, error)

	// GetNetworkIntegrationsFunc mocks the GetNetworkIntegrations method.
	GetNetworkIntegrationsFunc func(ctx context.Context, connectionURL string) ([]incusapi.NetworkIntegration, error)

	// GetNetworkLoadBalancersFunc mocks the GetNetworkLoadBalancers method.
	GetNetworkLoadBalancersFunc func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkLoadBalancer, error)

	// GetNetworkPeersFunc mocks the GetNetworkPeers method.
	GetNetworkPeersFunc func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkPeer, error)

	// GetNetworkZonesFunc mocks the GetNetworkZones method.
	GetNetworkZonesFunc func(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error)

	// GetNetworksFunc mocks the GetNetworks method.
	GetNetworksFunc func(ctx context.Context, connectionURL string) ([]incusapi.Network, error)

	// GetProfilesFunc mocks the GetProfiles method.
	GetProfilesFunc func(ctx context.Context, connectionURL string) ([]incusapi.Profile, error)

	// GetProjectsFunc mocks the GetProjects method.
	GetProjectsFunc func(ctx context.Context, connectionURL string) ([]incusapi.Project, error)

	// GetStorageBucketsFunc mocks the GetStorageBuckets method.
	GetStorageBucketsFunc func(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageBucket, error)

	// GetStoragePoolsFunc mocks the GetStoragePools method.
	GetStoragePoolsFunc func(ctx context.Context, connectionURL string) ([]incusapi.StoragePool, error)

	// GetStorageVolumesFunc mocks the GetStorageVolumes method.
	GetStorageVolumesFunc func(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageVolume, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetImages holds details about calls to the GetImages method.
		GetImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetNetworkACLs holds details about calls to the GetNetworkACLs method.
		GetNetworkACLs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetNetworkIntegrations holds details about calls to the GetNetworkIntegrations method.
		GetNetworkIntegrations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetNetworkLoadBalancers holds details about calls to the GetNetworkLoadBalancers method.
		GetNetworkLoadBalancers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// NetworkName is the networkName argument value.
			NetworkName string
		}
		// GetNetworkPeers holds details about calls to the GetNetworkPeers method.
		GetNetworkPeers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// NetworkName is the networkName argument value.
			NetworkName string
		}
		// GetNetworkZones holds details about calls to the GetNetworkZones method.
		GetNetworkZones []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetNetworks holds details about calls to the GetNetworks method.
		GetNetworks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetProfiles holds details about calls to the GetProfiles method.
		GetProfiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetProjects holds details about calls to the GetProjects method.
		GetProjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetStorageBuckets holds details about calls to the GetStorageBuckets method.
		GetStorageBuckets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
		}
		// GetStoragePools holds details about calls to the GetStoragePools method.
		GetStoragePools []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetStorageVolumes holds details about calls to the GetStorageVolumes method.
		GetStorageVolumes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
		}
	}
	lockGetImages               sync.RWMutex
	lockGetInstances            sync.RWMutex
	lockGetNetworkACLs          sync.RWMutex
	lockGetNetworkIntegrations  sync.RWMutex
	lockGetNetworkLoadBalancers sync.RWMutex
	lockGetNetworkPeers         sync.RWMutex
	lockGetNetworkZones         sync.RWMutex
	lockGetNetworks             sync.RWMutex
	lockGetProfiles             sync.RWMutex
	lockGetProjects             sync.RWMutex
	lockGetStorageBuckets       sync.RWMutex
	lockGetStoragePools         sync.RWMutex
	lockGetStorageVolumes       sync.RWMutex
}

// GetImages calls GetImagesFunc.
func (mock *ServerClientMock) GetImages(ctx context.Context, connectionURL string) ([]incusapi.Image, error) {
	if mock.GetImagesFunc == nil {
		panic("ServerClientMock.GetImagesFunc: method is nil but ServerClient.GetImages was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetImages.Lock()
	mock.calls.GetImages = append(mock.calls.GetImages, callInfo)
	mock.lockGetImages.Unlock()
	return mock.GetImagesFunc(ctx, connectionURL)
}

// GetImagesCalls gets all the calls that were made to GetImages.
// Check the length with:
//
//	len(mockedServerClient.GetImagesCalls())
func (mock *ServerClientMock) GetImagesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetImages.RLock()
	calls = mock.calls.GetImages
	mock.lockGetImages.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *ServerClientMock) GetInstances(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error) {
	if mock.GetInstancesFunc == nil {
		panic("ServerClientMock.GetInstancesFunc: method is nil but ServerClient.GetInstances was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	mock.lockGetInstances.Unlock()
	return mock.GetInstancesFunc(ctx, connectionURL)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//
//	len(mockedServerClient.GetInstancesCalls())
func (mock *ServerClientMock) GetInstancesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetInstances.RLock()
	calls = mock.calls.GetInstances
	mock.lockGetInstances.RUnlock()
	return calls
}

// GetNetworkACLs calls GetNetworkACLsFunc.
func (mock *ServerClientMock) GetNetworkACLs(ctx context.Context, connectionURL string) ([]incusapi.NetworkACL, error) {
	if mock.GetNetworkACLsFunc == nil {
		panic("ServerClientMock.GetNetworkACLsFunc: method is nil but ServerClient.GetNetworkACLs was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworkACLs.Lock()
	mock.calls.GetNetworkACLs = append(mock.calls.GetNetworkACLs, callInfo)
	mock.lockGetNetworkACLs.Unlock()
	return mock.GetNetworkACLsFunc(ctx, connectionURL)
}

// GetNetworkACLsCalls gets all the calls that were made to GetNetworkACLs.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkACLsCalls())
func (mock *ServerClientMock) GetNetworkACLsCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworkACLs.RLock()
	calls = mock.calls.GetNetworkACLs
	mock.lockGetNetworkACLs.RUnlock()
	return calls
}

// GetNetworkIntegrations calls GetNetworkIntegrationsFunc.
func (mock *ServerClientMock) GetNetworkIntegrations(ctx context.Context, connectionURL string) ([]incusapi.NetworkIntegration, error) {
	if mock.GetNetworkIntegrationsFunc == nil {
		panic("ServerClientMock.GetNetworkIntegrationsFunc: method is nil but ServerClient.GetNetworkIntegrations was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworkIntegrations.Lock()
	mock.calls.GetNetworkIntegrations = append(mock.calls.GetNetworkIntegrations, callInfo)
	mock.lockGetNetworkIntegrations.Unlock()
	return mock.GetNetworkIntegrationsFunc(ctx, connectionURL)
}

// GetNetworkIntegrationsCalls gets all the calls that were made to GetNetworkIntegrations.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkIntegrationsCalls())
func (mock *ServerClientMock) GetNetworkIntegrationsCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworkIntegrations.RLock()
	calls = mock.calls.GetNetworkIntegrations
	mock.lockGetNetworkIntegrations.RUnlock()
	return calls
}

// GetNetworkLoadBalancers calls GetNetworkLoadBalancersFunc.
func (mock *ServerClientMock) GetNetworkLoadBalancers(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkLoadBalancer, error) {
	if mock.GetNetworkLoadBalancersFunc == nil {
		panic("ServerClientMock.GetNetworkLoadBalancersFunc: method is nil but ServerClient.GetNetworkLoadBalancers was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
		NetworkName:   networkName,
	}
	mock.lockGetNetworkLoadBalancers.Lock()
	mock.calls.GetNetworkLoadBalancers = append(mock.calls.GetNetworkLoadBalancers, callInfo)
	mock.lockGetNetworkLoadBalancers.Unlock()
	return mock.GetNetworkLoadBalancersFunc(ctx, connectionURL, networkName)
}

// GetNetworkLoadBalancersCalls gets all the calls that were made to GetNetworkLoadBalancers.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkLoadBalancersCalls())
func (mock *ServerClientMock) GetNetworkLoadBalancersCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
	NetworkName   string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}
	mock.lockGetNetworkLoadBalancers.RLock()
	calls = mock.calls.GetNetworkLoadBalancers
	mock.lockGetNetworkLoadBalancers.RUnlock()
	return calls
}

// GetNetworkPeers calls GetNetworkPeersFunc.
func (mock *ServerClientMock) GetNetworkPeers(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkPeer, error) {
	if mock.GetNetworkPeersFunc == nil {
		panic("ServerClientMock.GetNetworkPeersFunc: method is nil but ServerClient.GetNetworkPeers was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
		NetworkName:   networkName,
	}
	mock.lockGetNetworkPeers.Lock()
	mock.calls.GetNetworkPeers = append(mock.calls.GetNetworkPeers, callInfo)
	mock.lockGetNetworkPeers.Unlock()
	return mock.GetNetworkPeersFunc(ctx, connectionURL, networkName)
}

// GetNetworkPeersCalls gets all the calls that were made to GetNetworkPeers.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkPeersCalls())
func (mock *ServerClientMock) GetNetworkPeersCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
	NetworkName   string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}
	mock.lockGetNetworkPeers.RLock()
	calls = mock.calls.GetNetworkPeers
	mock.lockGetNetworkPeers.RUnlock()
	return calls
}

// GetNetworkZones calls GetNetworkZonesFunc.
func (mock *ServerClientMock) GetNetworkZones(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error) {
	if mock.GetNetworkZonesFunc == nil {
		panic("ServerClientMock.GetNetworkZonesFunc: method is nil but ServerClient.GetNetworkZones was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworkZones.Lock()
	mock.calls.GetNetworkZones = append(mock.calls.GetNetworkZones, callInfo)
	mock.lockGetNetworkZones.Unlock()
	return mock.GetNetworkZonesFunc(ctx, connectionURL)
}

// GetNetworkZonesCalls gets all the calls that were made to GetNetworkZones.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkZonesCalls())
func (mock *ServerClientMock) GetNetworkZonesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworkZones.RLock()
	calls = mock.calls.GetNetworkZones
	mock.lockGetNetworkZones.RUnlock()
	return calls
}

// GetNetworks calls GetNetworksFunc.
func (mock *ServerClientMock) GetNetworks(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
	if mock.GetNetworksFunc == nil {
		panic("ServerClientMock.GetNetworksFunc: method is nil but ServerClient.GetNetworks was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworks.Lock()
	mock.calls.GetNetworks = append(mock.calls.GetNetworks, callInfo)
	mock.lockGetNetworks.Unlock()
	return mock.GetNetworksFunc(ctx, connectionURL)
}

// GetNetworksCalls gets all the calls that were made to GetNetworks.
// Check the length with:
//
//	len(mockedServerClient.GetNetworksCalls())
func (mock *ServerClientMock) GetNetworksCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworks.RLock()
	calls = mock.calls.GetNetworks
	mock.lockGetNetworks.RUnlock()
	return calls
}

// GetProfiles calls GetProfilesFunc.
func (mock *ServerClientMock) GetProfiles(ctx context.Context, connectionURL string) ([]incusapi.Profile, error) {
	if mock.GetProfilesFunc == nil {
		panic("ServerClientMock.GetProfilesFunc: method is nil but ServerClient.GetProfiles was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetProfiles.Lock()
	mock.calls.GetProfiles = append(mock.calls.GetProfiles, callInfo)
	mock.lockGetProfiles.Unlock()
	return mock.GetProfilesFunc(ctx, connectionURL)
}

// GetProfilesCalls gets all the calls that were made to GetProfiles.
// Check the length with:
//
//	len(mockedServerClient.GetProfilesCalls())
func (mock *ServerClientMock) GetProfilesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetProfiles.RLock()
	calls = mock.calls.GetProfiles
	mock.lockGetProfiles.RUnlock()
	return calls
}

// GetProjects calls GetProjectsFunc.
func (mock *ServerClientMock) GetProjects(ctx context.Context, connectionURL string) ([]incusapi.Project, error) {
	if mock.GetProjectsFunc == nil {
		panic("ServerClientMock.GetProjectsFunc: method is nil but ServerClient.GetProjects was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetProjects.Lock()
	mock.calls.GetProjects = append(mock.calls.GetProjects, callInfo)
	mock.lockGetProjects.Unlock()
	return mock.GetProjectsFunc(ctx, connectionURL)
}

// GetProjectsCalls gets all the calls that were made to GetProjects.
// Check the length with:
//
//	len(mockedServerClient.GetProjectsCalls())
func (mock *ServerClientMock) GetProjectsCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetProjects.RLock()
	calls = mock.calls.GetProjects
	mock.lockGetProjects.RUnlock()
	return calls
}

// GetStorageBuckets calls GetStorageBucketsFunc.
func (mock *ServerClientMock) GetStorageBuckets(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageBucket, error) {
	if mock.GetStorageBucketsFunc == nil {
		panic("ServerClientMock.GetStorageBucketsFunc: method is nil but ServerClient.GetStorageBuckets was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		ConnectionURL   string
		StoragePoolName string
	}{
		Ctx:             ctx,
		ConnectionURL:   connectionURL,
		StoragePoolName: storagePoolName,
	}
	mock.lockGetStorageBuckets.Lock()
	mock.calls.GetStorageBuckets = append(mock.calls.GetStorageBuckets, callInfo)
	mock.lockGetStorageBuckets.Unlock()
	return mock.GetStorageBucketsFunc(ctx, connectionURL, storagePoolName)
}

// GetStorageBucketsCalls gets all the calls that were made to GetStorageBuckets.
// Check the length with:
//
//	len(mockedServerClient.GetStorageBucketsCalls())
func (mock *ServerClientMock) GetStorageBucketsCalls() []struct {
	Ctx             context.Context
	ConnectionURL   string
	StoragePoolName string
} {
	var calls []struct {
		Ctx             context.Context
		ConnectionURL   string
		StoragePoolName string
	}
	mock.lockGetStorageBuckets.RLock()
	calls = mock.calls.GetStorageBuckets
	mock.lockGetStorageBuckets.RUnlock()
	return calls
}

// GetStoragePools calls GetStoragePoolsFunc.
func (mock *ServerClientMock) GetStoragePools(ctx context.Context, connectionURL string) ([]incusapi.StoragePool, error) {
	if mock.GetStoragePoolsFunc == nil {
		panic("ServerClientMock.GetStoragePoolsFunc: method is nil but ServerClient.GetStoragePools was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetStoragePools.Lock()
	mock.calls.GetStoragePools = append(mock.calls.GetStoragePools, callInfo)
	mock.lockGetStoragePools.Unlock()
	return mock.GetStoragePoolsFunc(ctx, connectionURL)
}

// GetStoragePoolsCalls gets all the calls that were made to GetStoragePools.
// Check the length with:
//
//	len(mockedServerClient.GetStoragePoolsCalls())
func (mock *ServerClientMock) GetStoragePoolsCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetStoragePools.RLock()
	calls = mock.calls.GetStoragePools
	mock.lockGetStoragePools.RUnlock()
	return calls
}

// GetStorageVolumes calls GetStorageVolumesFunc.
func (mock *ServerClientMock) GetStorageVolumes(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageVolume, error) {
	if mock.GetStorageVolumesFunc == nil {
		panic("ServerClientMock.GetStorageVolumesFunc: method is nil but ServerClient.GetStorageVolumes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		ConnectionURL   string
		StoragePoolName string
	}{
		Ctx:             ctx,
		ConnectionURL:   connectionURL,
		StoragePoolName: storagePoolName,
	}
	mock.lockGetStorageVolumes.Lock()
	mock.calls.GetStorageVolumes = append(mock.calls.GetStorageVolumes, callInfo)
	mock.lockGetStorageVolumes.Unlock()
	return mock.GetStorageVolumesFunc(ctx, connectionURL, storagePoolName)
}

// GetStorageVolumesCalls gets all the calls that were made to GetStorageVolumes.
// Check the length with:
//
//	len(mockedServerClient.GetStorageVolumesCalls())
func (mock *ServerClientMock) GetStorageVolumesCalls() []struct {
	Ctx             context.Context
	ConnectionURL   string
	StoragePoolName string
} {
	var calls []struct {
		Ctx             context.Context
		ConnectionURL   string
		StoragePoolName string
	}
	mock.lockGetStorageVolumes.RLock()
	calls = mock.calls.GetStorageVolumes
	mock.lockGetStorageVolumes.RUnlock()
	return calls
}
