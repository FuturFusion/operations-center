// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// Ensure, that ServerClientMock does implement inventory.ServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.ServerClient = &ServerClientMock{}

// ServerClientMock is a mock implementation of inventory.ServerClient.
//
//	func TestSomethingThatUsesServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.ServerClient
//		mockedServerClient := &ServerClientMock{
//			GetImagesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Image, error) {
//				panic("mock out the GetImages method")
//			},
//			GetInstancesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error) {
//				panic("mock out the GetInstances method")
//			},
//			GetNetworkACLsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkACL, error) {
//				panic("mock out the GetNetworkACLs method")
//			},
//			GetNetworkIntegrationsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkIntegration, error) {
//				panic("mock out the GetNetworkIntegrations method")
//			},
//			GetNetworkZonesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error) {
//				panic("mock out the GetNetworkZones method")
//			},
//			GetNetworksFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
//				panic("mock out the GetNetworks method")
//			},
//		}
//
//		// use mockedServerClient in code that requires inventory.ServerClient
//		// and then make assertions.
//
//	}
type ServerClientMock struct {
	// GetImagesFunc mocks the GetImages method.
	GetImagesFunc func(ctx context.Context, connectionURL string) ([]incusapi.Image, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error)

	// GetNetworkACLsFunc mocks the GetNetworkACLs method.
	GetNetworkACLsFunc func(ctx context.Context, connectionURL string) ([]incusapi.NetworkACL, error)

	// GetNetworkIntegrationsFunc mocks the GetNetworkIntegrations method.
	GetNetworkIntegrationsFunc func(ctx context.Context, connectionURL string) ([]incusapi.NetworkIntegration, error)

	// GetNetworkZonesFunc mocks the GetNetworkZones method.
	GetNetworkZonesFunc func(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error)

	// GetNetworksFunc mocks the GetNetworks method.
	GetNetworksFunc func(ctx context.Context, connectionURL string) ([]incusapi.Network, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetImages holds details about calls to the GetImages method.
		GetImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetNetworkACLs holds details about calls to the GetNetworkACLs method.
		GetNetworkACLs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetNetworkIntegrations holds details about calls to the GetNetworkIntegrations method.
		GetNetworkIntegrations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetNetworkZones holds details about calls to the GetNetworkZones method.
		GetNetworkZones []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
		// GetNetworks holds details about calls to the GetNetworks method.
		GetNetworks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
	}
	lockGetImages              sync.RWMutex
	lockGetInstances           sync.RWMutex
	lockGetNetworkACLs         sync.RWMutex
	lockGetNetworkIntegrations sync.RWMutex
	lockGetNetworkZones        sync.RWMutex
	lockGetNetworks            sync.RWMutex
}

// GetImages calls GetImagesFunc.
func (mock *ServerClientMock) GetImages(ctx context.Context, connectionURL string) ([]incusapi.Image, error) {
	if mock.GetImagesFunc == nil {
		panic("ServerClientMock.GetImagesFunc: method is nil but ServerClient.GetImages was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetImages.Lock()
	mock.calls.GetImages = append(mock.calls.GetImages, callInfo)
	mock.lockGetImages.Unlock()
	return mock.GetImagesFunc(ctx, connectionURL)
}

// GetImagesCalls gets all the calls that were made to GetImages.
// Check the length with:
//
//	len(mockedServerClient.GetImagesCalls())
func (mock *ServerClientMock) GetImagesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetImages.RLock()
	calls = mock.calls.GetImages
	mock.lockGetImages.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *ServerClientMock) GetInstances(ctx context.Context, connectionURL string) ([]incusapi.InstanceFull, error) {
	if mock.GetInstancesFunc == nil {
		panic("ServerClientMock.GetInstancesFunc: method is nil but ServerClient.GetInstances was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	mock.lockGetInstances.Unlock()
	return mock.GetInstancesFunc(ctx, connectionURL)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//
//	len(mockedServerClient.GetInstancesCalls())
func (mock *ServerClientMock) GetInstancesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetInstances.RLock()
	calls = mock.calls.GetInstances
	mock.lockGetInstances.RUnlock()
	return calls
}

// GetNetworkACLs calls GetNetworkACLsFunc.
func (mock *ServerClientMock) GetNetworkACLs(ctx context.Context, connectionURL string) ([]incusapi.NetworkACL, error) {
	if mock.GetNetworkACLsFunc == nil {
		panic("ServerClientMock.GetNetworkACLsFunc: method is nil but ServerClient.GetNetworkACLs was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworkACLs.Lock()
	mock.calls.GetNetworkACLs = append(mock.calls.GetNetworkACLs, callInfo)
	mock.lockGetNetworkACLs.Unlock()
	return mock.GetNetworkACLsFunc(ctx, connectionURL)
}

// GetNetworkACLsCalls gets all the calls that were made to GetNetworkACLs.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkACLsCalls())
func (mock *ServerClientMock) GetNetworkACLsCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworkACLs.RLock()
	calls = mock.calls.GetNetworkACLs
	mock.lockGetNetworkACLs.RUnlock()
	return calls
}

// GetNetworkIntegrations calls GetNetworkIntegrationsFunc.
func (mock *ServerClientMock) GetNetworkIntegrations(ctx context.Context, connectionURL string) ([]incusapi.NetworkIntegration, error) {
	if mock.GetNetworkIntegrationsFunc == nil {
		panic("ServerClientMock.GetNetworkIntegrationsFunc: method is nil but ServerClient.GetNetworkIntegrations was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworkIntegrations.Lock()
	mock.calls.GetNetworkIntegrations = append(mock.calls.GetNetworkIntegrations, callInfo)
	mock.lockGetNetworkIntegrations.Unlock()
	return mock.GetNetworkIntegrationsFunc(ctx, connectionURL)
}

// GetNetworkIntegrationsCalls gets all the calls that were made to GetNetworkIntegrations.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkIntegrationsCalls())
func (mock *ServerClientMock) GetNetworkIntegrationsCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworkIntegrations.RLock()
	calls = mock.calls.GetNetworkIntegrations
	mock.lockGetNetworkIntegrations.RUnlock()
	return calls
}

// GetNetworkZones calls GetNetworkZonesFunc.
func (mock *ServerClientMock) GetNetworkZones(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error) {
	if mock.GetNetworkZonesFunc == nil {
		panic("ServerClientMock.GetNetworkZonesFunc: method is nil but ServerClient.GetNetworkZones was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworkZones.Lock()
	mock.calls.GetNetworkZones = append(mock.calls.GetNetworkZones, callInfo)
	mock.lockGetNetworkZones.Unlock()
	return mock.GetNetworkZonesFunc(ctx, connectionURL)
}

// GetNetworkZonesCalls gets all the calls that were made to GetNetworkZones.
// Check the length with:
//
//	len(mockedServerClient.GetNetworkZonesCalls())
func (mock *ServerClientMock) GetNetworkZonesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworkZones.RLock()
	calls = mock.calls.GetNetworkZones
	mock.lockGetNetworkZones.RUnlock()
	return calls
}

// GetNetworks calls GetNetworksFunc.
func (mock *ServerClientMock) GetNetworks(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
	if mock.GetNetworksFunc == nil {
		panic("ServerClientMock.GetNetworksFunc: method is nil but ServerClient.GetNetworks was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworks.Lock()
	mock.calls.GetNetworks = append(mock.calls.GetNetworks, callInfo)
	mock.lockGetNetworks.Unlock()
	return mock.GetNetworksFunc(ctx, connectionURL)
}

// GetNetworksCalls gets all the calls that were made to GetNetworks.
// Check the length with:
//
//	len(mockedServerClient.GetNetworksCalls())
func (mock *ServerClientMock) GetNetworksCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworks.RLock()
	calls = mock.calls.GetNetworks
	mock.lockGetNetworks.RUnlock()
	return calls
}
