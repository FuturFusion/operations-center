// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// Ensure, that NetworkZoneServerClientMock does implement inventory.NetworkZoneServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.NetworkZoneServerClient = &NetworkZoneServerClientMock{}

// NetworkZoneServerClientMock is a mock implementation of inventory.NetworkZoneServerClient.
//
//	func TestSomethingThatUsesNetworkZoneServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkZoneServerClient
//		mockedNetworkZoneServerClient := &NetworkZoneServerClientMock{
//			GetNetworkZonesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error) {
//				panic("mock out the GetNetworkZones method")
//			},
//		}
//
//		// use mockedNetworkZoneServerClient in code that requires inventory.NetworkZoneServerClient
//		// and then make assertions.
//
//	}
type NetworkZoneServerClientMock struct {
	// GetNetworkZonesFunc mocks the GetNetworkZones method.
	GetNetworkZonesFunc func(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNetworkZones holds details about calls to the GetNetworkZones method.
		GetNetworkZones []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
		}
	}
	lockGetNetworkZones sync.RWMutex
}

// GetNetworkZones calls GetNetworkZonesFunc.
func (mock *NetworkZoneServerClientMock) GetNetworkZones(ctx context.Context, connectionURL string) ([]incusapi.NetworkZone, error) {
	if mock.GetNetworkZonesFunc == nil {
		panic("NetworkZoneServerClientMock.GetNetworkZonesFunc: method is nil but NetworkZoneServerClient.GetNetworkZones was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
	}
	mock.lockGetNetworkZones.Lock()
	mock.calls.GetNetworkZones = append(mock.calls.GetNetworkZones, callInfo)
	mock.lockGetNetworkZones.Unlock()
	return mock.GetNetworkZonesFunc(ctx, connectionURL)
}

// GetNetworkZonesCalls gets all the calls that were made to GetNetworkZones.
// Check the length with:
//
//	len(mockedNetworkZoneServerClient.GetNetworkZonesCalls())
func (mock *NetworkZoneServerClientMock) GetNetworkZonesCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
	}
	mock.lockGetNetworkZones.RLock()
	calls = mock.calls.GetNetworkZones
	mock.lockGetNetworkZones.RUnlock()
	return calls
}
