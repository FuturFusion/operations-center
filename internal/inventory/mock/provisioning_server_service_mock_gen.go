// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure, that ProvisioningServerServiceMock does implement inventory.ProvisioningServerService.
// If this is not the case, regenerate this file with moq.
var _ inventory.ProvisioningServerService = &ProvisioningServerServiceMock{}

// ProvisioningServerServiceMock is a mock implementation of inventory.ProvisioningServerService.
//
//	func TestSomethingThatUsesProvisioningServerService(t *testing.T) {
//
//		// make and configure a mocked inventory.ProvisioningServerService
//		mockedProvisioningServerService := &ProvisioningServerServiceMock{
//			GetAllByClusterFunc: func(ctx context.Context, cluster string) (provisioning.Servers, error) {
//				panic("mock out the GetAllByCluster method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (provisioning.Server, error) {
//				panic("mock out the GetByName method")
//			},
//		}
//
//		// use mockedProvisioningServerService in code that requires inventory.ProvisioningServerService
//		// and then make assertions.
//
//	}
type ProvisioningServerServiceMock struct {
	// GetAllByClusterFunc mocks the GetAllByCluster method.
	GetAllByClusterFunc func(ctx context.Context, cluster string) (provisioning.Servers, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (provisioning.Server, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllByCluster holds details about calls to the GetAllByCluster method.
		GetAllByCluster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster string
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
	}
	lockGetAllByCluster sync.RWMutex
	lockGetByName       sync.RWMutex
}

// GetAllByCluster calls GetAllByClusterFunc.
func (mock *ProvisioningServerServiceMock) GetAllByCluster(ctx context.Context, cluster string) (provisioning.Servers, error) {
	if mock.GetAllByClusterFunc == nil {
		panic("ProvisioningServerServiceMock.GetAllByClusterFunc: method is nil but ProvisioningServerService.GetAllByCluster was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster string
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetAllByCluster.Lock()
	mock.calls.GetAllByCluster = append(mock.calls.GetAllByCluster, callInfo)
	mock.lockGetAllByCluster.Unlock()
	return mock.GetAllByClusterFunc(ctx, cluster)
}

// GetAllByClusterCalls gets all the calls that were made to GetAllByCluster.
// Check the length with:
//
//	len(mockedProvisioningServerService.GetAllByClusterCalls())
func (mock *ProvisioningServerServiceMock) GetAllByClusterCalls() []struct {
	Ctx     context.Context
	Cluster string
} {
	var calls []struct {
		Ctx     context.Context
		Cluster string
	}
	mock.lockGetAllByCluster.RLock()
	calls = mock.calls.GetAllByCluster
	mock.lockGetAllByCluster.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *ProvisioningServerServiceMock) GetByName(ctx context.Context, name string) (provisioning.Server, error) {
	if mock.GetByNameFunc == nil {
		panic("ProvisioningServerServiceMock.GetByNameFunc: method is nil but ProvisioningServerService.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedProvisioningServerService.GetByNameCalls())
func (mock *ProvisioningServerServiceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}
