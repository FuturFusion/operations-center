// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure that ProvisioningServerServiceMock does implement inventory.ProvisioningServerService.
// If this is not the case, regenerate this file with mockery.
var _ inventory.ProvisioningServerService = &ProvisioningServerServiceMock{}

// ProvisioningServerServiceMock is a mock implementation of inventory.ProvisioningServerService.
//
//	func TestSomethingThatUsesProvisioningServerService(t *testing.T) {
//
//		// make and configure a mocked inventory.ProvisioningServerService
//		mockedProvisioningServerService := &ProvisioningServerServiceMock{
//			GetAllByClusterNameFunc: func(ctx context.Context, name string) (provisioning.Servers, error) {
//				panic("mock out the GetAllByClusterName method")
//			},
//		}
//
//		// use mockedProvisioningServerService in code that requires inventory.ProvisioningServerService
//		// and then make assertions.
//
//	}
type ProvisioningServerServiceMock struct {
	// GetAllByClusterNameFunc mocks the GetAllByClusterName method.
	GetAllByClusterNameFunc func(ctx context.Context, name string) (provisioning.Servers, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllByClusterName holds details about calls to the GetAllByClusterName method.
		GetAllByClusterName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
	}
	lockGetAllByClusterName sync.RWMutex
}

// GetAllByClusterName calls GetAllByClusterNameFunc.
func (mock *ProvisioningServerServiceMock) GetAllByClusterName(ctx context.Context, name string) (provisioning.Servers, error) {
	if mock.GetAllByClusterNameFunc == nil {
		panic("ProvisioningServerServiceMock.GetAllByClusterNameFunc: method is nil but ProvisioningServerService.GetAllByClusterName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetAllByClusterName.Lock()
	mock.calls.GetAllByClusterName = append(mock.calls.GetAllByClusterName, callInfo)
	mock.lockGetAllByClusterName.Unlock()
	return mock.GetAllByClusterNameFunc(ctx, name)
}

// GetAllByClusterNameCalls gets all the calls that were made to GetAllByClusterName.
// Check the length with:
//
//	len(mockedProvisioningServerService.GetAllByClusterNameCalls())
func (mock *ProvisioningServerServiceMock) GetAllByClusterNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetAllByClusterName.RLock()
	calls = mock.calls.GetAllByClusterName
	mock.lockGetAllByClusterName.RUnlock()
	return calls
}
