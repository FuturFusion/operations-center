// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// Ensure, that StorageVolumeServerClientMock does implement inventory.StorageVolumeServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.StorageVolumeServerClient = &StorageVolumeServerClientMock{}

// StorageVolumeServerClientMock is a mock implementation of inventory.StorageVolumeServerClient.
//
//	func TestSomethingThatUsesStorageVolumeServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.StorageVolumeServerClient
//		mockedStorageVolumeServerClient := &StorageVolumeServerClientMock{
//			GetStorageVolumesFunc: func(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageVolume, error) {
//				panic("mock out the GetStorageVolumes method")
//			},
//		}
//
//		// use mockedStorageVolumeServerClient in code that requires inventory.StorageVolumeServerClient
//		// and then make assertions.
//
//	}
type StorageVolumeServerClientMock struct {
	// GetStorageVolumesFunc mocks the GetStorageVolumes method.
	GetStorageVolumesFunc func(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageVolume, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetStorageVolumes holds details about calls to the GetStorageVolumes method.
		GetStorageVolumes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// StoragePoolName is the storagePoolName argument value.
			StoragePoolName string
		}
	}
	lockGetStorageVolumes sync.RWMutex
}

// GetStorageVolumes calls GetStorageVolumesFunc.
func (mock *StorageVolumeServerClientMock) GetStorageVolumes(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageVolume, error) {
	if mock.GetStorageVolumesFunc == nil {
		panic("StorageVolumeServerClientMock.GetStorageVolumesFunc: method is nil but StorageVolumeServerClient.GetStorageVolumes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		ConnectionURL   string
		StoragePoolName string
	}{
		Ctx:             ctx,
		ConnectionURL:   connectionURL,
		StoragePoolName: storagePoolName,
	}
	mock.lockGetStorageVolumes.Lock()
	mock.calls.GetStorageVolumes = append(mock.calls.GetStorageVolumes, callInfo)
	mock.lockGetStorageVolumes.Unlock()
	return mock.GetStorageVolumesFunc(ctx, connectionURL, storagePoolName)
}

// GetStorageVolumesCalls gets all the calls that were made to GetStorageVolumes.
// Check the length with:
//
//	len(mockedStorageVolumeServerClient.GetStorageVolumesCalls())
func (mock *StorageVolumeServerClientMock) GetStorageVolumesCalls() []struct {
	Ctx             context.Context
	ConnectionURL   string
	StoragePoolName string
} {
	var calls []struct {
		Ctx             context.Context
		ConnectionURL   string
		StoragePoolName string
	}
	mock.lockGetStorageVolumes.RLock()
	calls = mock.calls.GetStorageVolumes
	mock.lockGetStorageVolumes.RUnlock()
	return calls
}
