// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure that ProvisioningClusterServiceMock does implement inventory.ProvisioningClusterService.
// If this is not the case, regenerate this file with moq.
var _ inventory.ProvisioningClusterService = &ProvisioningClusterServiceMock{}

// ProvisioningClusterServiceMock is a mock implementation of inventory.ProvisioningClusterService.
//
//	func TestSomethingThatUsesProvisioningClusterService(t *testing.T) {
//
//		// make and configure a mocked inventory.ProvisioningClusterService
//		mockedProvisioningClusterService := &ProvisioningClusterServiceMock{
//			GetAllFunc: func(ctx context.Context) (provisioning.Clusters, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
//				panic("mock out the GetByName method")
//			},
//		}
//
//		// use mockedProvisioningClusterService in code that requires inventory.ProvisioningClusterService
//		// and then make assertions.
//
//	}
type ProvisioningClusterServiceMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Clusters, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (*provisioning.Cluster, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
	}
	lockGetAll    sync.RWMutex
	lockGetByName sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *ProvisioningClusterServiceMock) GetAll(ctx context.Context) (provisioning.Clusters, error) {
	if mock.GetAllFunc == nil {
		panic("ProvisioningClusterServiceMock.GetAllFunc: method is nil but ProvisioningClusterService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedProvisioningClusterService.GetAllCalls())
func (mock *ProvisioningClusterServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *ProvisioningClusterServiceMock) GetByName(ctx context.Context, name string) (*provisioning.Cluster, error) {
	if mock.GetByNameFunc == nil {
		panic("ProvisioningClusterServiceMock.GetByNameFunc: method is nil but ProvisioningClusterService.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedProvisioningClusterService.GetByNameCalls())
func (mock *ProvisioningClusterServiceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}
