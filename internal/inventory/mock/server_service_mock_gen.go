// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure, that ServerServiceMock does implement inventory.ServerService.
// If this is not the case, regenerate this file with moq.
var _ inventory.ServerService = &ServerServiceMock{}

// ServerServiceMock is a mock implementation of inventory.ServerService.
//
//	func TestSomethingThatUsesServerService(t *testing.T) {
//
//		// make and configure a mocked inventory.ServerService
//		mockedServerService := &ServerServiceMock{
//			GetAllByClusterIDFunc: func(ctx context.Context, clusterID int) (provisioning.Servers, error) {
//				panic("mock out the GetAllByClusterID method")
//			},
//			GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
//				panic("mock out the GetByID method")
//			},
//		}
//
//		// use mockedServerService in code that requires inventory.ServerService
//		// and then make assertions.
//
//	}
type ServerServiceMock struct {
	// GetAllByClusterIDFunc mocks the GetAllByClusterID method.
	GetAllByClusterIDFunc func(ctx context.Context, clusterID int) (provisioning.Servers, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int) (provisioning.Server, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllByClusterID holds details about calls to the GetAllByClusterID method.
		GetAllByClusterID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterID is the clusterID argument value.
			ClusterID int
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
	}
	lockGetAllByClusterID sync.RWMutex
	lockGetByID           sync.RWMutex
}

// GetAllByClusterID calls GetAllByClusterIDFunc.
func (mock *ServerServiceMock) GetAllByClusterID(ctx context.Context, clusterID int) (provisioning.Servers, error) {
	if mock.GetAllByClusterIDFunc == nil {
		panic("ServerServiceMock.GetAllByClusterIDFunc: method is nil but ServerService.GetAllByClusterID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ClusterID int
	}{
		Ctx:       ctx,
		ClusterID: clusterID,
	}
	mock.lockGetAllByClusterID.Lock()
	mock.calls.GetAllByClusterID = append(mock.calls.GetAllByClusterID, callInfo)
	mock.lockGetAllByClusterID.Unlock()
	return mock.GetAllByClusterIDFunc(ctx, clusterID)
}

// GetAllByClusterIDCalls gets all the calls that were made to GetAllByClusterID.
// Check the length with:
//
//	len(mockedServerService.GetAllByClusterIDCalls())
func (mock *ServerServiceMock) GetAllByClusterIDCalls() []struct {
	Ctx       context.Context
	ClusterID int
} {
	var calls []struct {
		Ctx       context.Context
		ClusterID int
	}
	mock.lockGetAllByClusterID.RLock()
	calls = mock.calls.GetAllByClusterID
	mock.lockGetAllByClusterID.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *ServerServiceMock) GetByID(ctx context.Context, id int) (provisioning.Server, error) {
	if mock.GetByIDFunc == nil {
		panic("ServerServiceMock.GetByIDFunc: method is nil but ServerService.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedServerService.GetByIDCalls())
func (mock *ServerServiceMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}
