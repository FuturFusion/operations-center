// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/inventory"
	incusapi "github.com/lxc/incus/v6/shared/api"
)

// Ensure, that NetworkPeerServerClientMock does implement inventory.NetworkPeerServerClient.
// If this is not the case, regenerate this file with moq.
var _ inventory.NetworkPeerServerClient = &NetworkPeerServerClientMock{}

// NetworkPeerServerClientMock is a mock implementation of inventory.NetworkPeerServerClient.
//
//	func TestSomethingThatUsesNetworkPeerServerClient(t *testing.T) {
//
//		// make and configure a mocked inventory.NetworkPeerServerClient
//		mockedNetworkPeerServerClient := &NetworkPeerServerClientMock{
//			GetNetworkPeersFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkPeer, error) {
//				panic("mock out the GetNetworkPeers method")
//			},
//		}
//
//		// use mockedNetworkPeerServerClient in code that requires inventory.NetworkPeerServerClient
//		// and then make assertions.
//
//	}
type NetworkPeerServerClientMock struct {
	// GetNetworkPeersFunc mocks the GetNetworkPeers method.
	GetNetworkPeersFunc func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkPeer, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNetworkPeers holds details about calls to the GetNetworkPeers method.
		GetNetworkPeers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectionURL is the connectionURL argument value.
			ConnectionURL string
			// NetworkName is the networkName argument value.
			NetworkName string
		}
	}
	lockGetNetworkPeers sync.RWMutex
}

// GetNetworkPeers calls GetNetworkPeersFunc.
func (mock *NetworkPeerServerClientMock) GetNetworkPeers(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkPeer, error) {
	if mock.GetNetworkPeersFunc == nil {
		panic("NetworkPeerServerClientMock.GetNetworkPeersFunc: method is nil but NetworkPeerServerClient.GetNetworkPeers was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}{
		Ctx:           ctx,
		ConnectionURL: connectionURL,
		NetworkName:   networkName,
	}
	mock.lockGetNetworkPeers.Lock()
	mock.calls.GetNetworkPeers = append(mock.calls.GetNetworkPeers, callInfo)
	mock.lockGetNetworkPeers.Unlock()
	return mock.GetNetworkPeersFunc(ctx, connectionURL, networkName)
}

// GetNetworkPeersCalls gets all the calls that were made to GetNetworkPeers.
// Check the length with:
//
//	len(mockedNetworkPeerServerClient.GetNetworkPeersCalls())
func (mock *NetworkPeerServerClientMock) GetNetworkPeersCalls() []struct {
	Ctx           context.Context
	ConnectionURL string
	NetworkName   string
} {
	var calls []struct {
		Ctx           context.Context
		ConnectionURL string
		NetworkName   string
	}
	mock.lockGetNetworkPeers.RLock()
	calls = mock.calls.GetNetworkPeers
	mock.lockGetNetworkPeers.RUnlock()
	return calls
}
