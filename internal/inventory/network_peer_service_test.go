// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestNetworkPeerService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkPeerFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, nil, nil, nil, inventory.NetworkPeerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkPeerIDs, err := networkPeerSvc.GetAllIDsWithFilter(context.Background(), inventory.NetworkPeerFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkPeerIDs, tc.count)
		})
	}
}

func TestNetworkPeerService_GetByID(t *testing.T) {
	tests := []struct {
		name                   string
		idArg                  int
		repoGetByIDNetworkPeer inventory.NetworkPeer
		repoGetByIDErr         error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDNetworkPeer: inventory.NetworkPeer{
				ID:          1,
				ClusterID:   1,
				NetworkName: "parent one",
				Name:        "one",
				Object:      incusapi.NetworkPeer{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkPeer, error) {
					return tc.repoGetByIDNetworkPeer, tc.repoGetByIDErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, nil, nil, nil, inventory.NetworkPeerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkPeer, err := networkPeerSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDNetworkPeer, networkPeer)
		})
	}
}

func TestNetworkPeerService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                                     string
		clusterSvcGetByIDCluster                 provisioning.Cluster
		clusterSvcGetByIDErr                     error
		networkPeerClientGetNetworkPeerByName    incusapi.NetworkPeer
		networkPeerClientGetNetworkPeerByNameErr error
		repoGetByIDNetworkPeer                   inventory.NetworkPeer
		repoGetByIDErr                           error
		repoUpdateByIDErr                        error
		repoDeleteByIDErr                        error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDNetworkPeer: inventory.NetworkPeer{
				ID:          1,
				ClusterID:   1,
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByName: incusapi.NetworkPeer{
				Name: "networkPeer one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - networkPeer get by name - not found",
			repoGetByIDNetworkPeer: inventory.NetworkPeer{
				ID:          1,
				ClusterID:   1,
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - networkPeer get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDNetworkPeer: inventory.NetworkPeer{
				ID:          1,
				ClusterID:   1,
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkPeer get by name",
			repoGetByIDNetworkPeer: inventory.NetworkPeer{
				ID:          1,
				ClusterID:   1,
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkPeer get by name - not found - delete by id",
			repoGetByIDNetworkPeer: inventory.NetworkPeer{
				ID:          1,
				ClusterID:   1,
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr:                        boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDNetworkPeer: inventory.NetworkPeer{
				ID:          1,
				ClusterID:   1,
				Name:        "", // invalid
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByName: incusapi.NetworkPeer{
				Name: "networkPeer one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDNetworkPeer: inventory.NetworkPeer{
				ID:          1,
				ClusterID:   1,
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkPeerClientGetNetworkPeerByName: incusapi.NetworkPeer{
				Name: "networkPeer one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkPeer, error) {
					return tc.repoGetByIDNetworkPeer, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkPeer.LastUpdated)
					return inventory.NetworkPeer{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ClusterServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Cluster, error) {
					require.Equal(t, 1, id)
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkPeerClient := &serverMock.NetworkPeerServerClientMock{
				GetNetworkPeerByNameFunc: func(ctx context.Context, connectionURL string, networkName string, networkPeerName string) (incusapi.NetworkPeer, error) {
					require.Equal(t, tc.repoGetByIDNetworkPeer.Name, networkPeerName)
					require.Equal(t, "network", networkName)
					return tc.networkPeerClientGetNetworkPeerByName, tc.networkPeerClientGetNetworkPeerByNameErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, clusterSvc, networkPeerClient, nil, inventory.NetworkPeerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkPeerSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkPeerService_SyncAll(t *testing.T) {
	// Includes also SyncCluster and SyncServer
	tests := []struct {
		name                                string
		clusterSvcGetByIDCluster            provisioning.Cluster
		clusterSvcGetByIDErr                error
		networkClientGetNetworks            []incusapi.Network
		networkClientGetNetworksErr         error
		networkPeerClientGetNetworkPeers    []incusapi.NetworkPeer
		networkPeerClientGetNetworkPeersErr error
		repoDeleteByClusterIDErr            error
		repoCreateErr                       error
		serviceOptions                      []inventory.NetworkPeerServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
				{
					Name: "filtered",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "networkPeer one",
				},
			},
			serviceOptions: []inventory.NetworkPeerServiceOption{
				inventory.NetworkPeerWithParentFilter(func(parent incusapi.Network) bool {
					return parent.Name == "filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network client get Networks",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkClientGetNetworksErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkPeer client get NetworkPeers",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeersErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_peers delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "networkPeer one",
				},
			},
			repoDeleteByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkPeer create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkPeerClientGetNetworkPeers: []incusapi.NetworkPeer{
				{
					Name: "networkPeer one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkPeerRepoMock{
				DeleteByClusterIDFunc: func(ctx context.Context, clusterID int) error {
					return tc.repoDeleteByClusterIDErr
				},
				CreateFunc: func(ctx context.Context, networkPeer inventory.NetworkPeer) (inventory.NetworkPeer, error) {
					return inventory.NetworkPeer{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ClusterServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Cluster, error) {
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkClient := &serverMock.NetworkServerClientMock{
				GetNetworksFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
					return tc.networkClientGetNetworks, tc.networkClientGetNetworksErr
				},
			}

			networkPeerClient := &serverMock.NetworkPeerServerClientMock{
				GetNetworkPeersFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkPeer, error) {
					return tc.networkPeerClientGetNetworkPeers, tc.networkPeerClientGetNetworkPeersErr
				},
			}

			networkPeerSvc := inventory.NewNetworkPeerService(repo, clusterSvc, networkPeerClient, networkClient,
				append(
					tc.serviceOptions,
					inventory.NetworkPeerWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkPeerSvc.SyncCluster(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}
