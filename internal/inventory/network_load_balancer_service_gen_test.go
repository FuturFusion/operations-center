// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestNetworkLoadBalancerService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.NetworkLoadBalancers
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.NetworkLoadBalancers{
				inventory.NetworkLoadBalancer{
					Name: "one",
				},
				inventory.NetworkLoadBalancer{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.NetworkLoadBalancers{
				inventory.NetworkLoadBalancer{
					Name: "one",
				},
				inventory.NetworkLoadBalancer{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.NetworkLoadBalancers{
				inventory.NetworkLoadBalancer{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.NetworkLoadBalancers{
				inventory.NetworkLoadBalancer{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.NetworkLoadBalancers{
				inventory.NetworkLoadBalancer{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, i ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.NetworkLoadBalancerFilter) (inventory.NetworkLoadBalancers, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, nil, nil, nil, inventory.NetworkLoadBalancerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkLoadBalancer, err := networkLoadBalancerSvc.GetAllWithFilter(context.Background(), inventory.NetworkLoadBalancerFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkLoadBalancer, tc.count)
		})
	}
}

func TestNetworkLoadBalancerService_GetAllUUIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                         string
		filterExpression             *string
		repoGetAllUUIDsWithFilter    []uuid.UUID
		repoGetAllUUIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`UUID == "6c652183-8d93-4c7d-9510-cd2ae54f31fd"`),
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
				uuid.MustParse(`56d0823e-5c6d-45ff-ac6d-a9ae61026a4e`),
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuid.MustParse(`6c652183-8d93-4c7d-9510-cd2ae54f31fd`),
			},

			assertErr: func(tt require.TestingT, err error, i ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                         "error - repo",
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkLoadBalancerFilter) ([]uuid.UUID, error) {
					return tc.repoGetAllUUIDsWithFilter, tc.repoGetAllUUIDsWithFilterErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, nil, nil, nil, inventory.NetworkLoadBalancerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkLoadBalancerUUIDs, err := networkLoadBalancerSvc.GetAllUUIDsWithFilter(context.Background(), inventory.NetworkLoadBalancerFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkLoadBalancerUUIDs, tc.count)
		})
	}
}

func TestNetworkLoadBalancerService_GetByUUID(t *testing.T) {
	tests := []struct {
		name                             string
		idArg                            uuid.UUID
		repoGetByUUIDNetworkLoadBalancer inventory.NetworkLoadBalancer
		repoGetByUUIDErr                 error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				NetworkName: "parent one",
				Name:        "one",
				Object:      incusapi.NetworkLoadBalancer{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:             "error - repo",
			idArg:            uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkLoadBalancer, error) {
					return tc.repoGetByUUIDNetworkLoadBalancer, tc.repoGetByUUIDErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, nil, nil, nil, inventory.NetworkLoadBalancerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkLoadBalancer, err := networkLoadBalancerSvc.GetByUUID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByUUIDNetworkLoadBalancer, networkLoadBalancer)
		})
	}
}

func TestNetworkLoadBalancerService_ResyncByUUID(t *testing.T) {
	tests := []struct {
		name                                                     string
		clusterSvcGetByIDCluster                                 provisioning.Cluster
		clusterSvcGetByIDErr                                     error
		networkLoadBalancerClientGetNetworkLoadBalancerByName    incusapi.NetworkLoadBalancer
		networkLoadBalancerClientGetNetworkLoadBalancerByNameErr error
		repoGetByUUIDNetworkLoadBalancer                         inventory.NetworkLoadBalancer
		repoGetByUUIDErr                                         error
		repoUpdateByUUIDErr                                      error
		repoDeleteByUUIDErr                                      error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByUUIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByName: incusapi.NetworkLoadBalancer{
				ListenAddress: "networkLoadBalancer one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - networkLoadBalancer get by name - not found",
			repoGetByUUIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:             "error - networkLoadBalancer get by UUID",
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByUUIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkLoadBalancer get by name",
			repoGetByUUIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkLoadBalancer get by name - not found - delete by uuid",
			repoGetByUUIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByNameErr: domain.ErrNotFound,
			repoDeleteByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByUUIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "", // invalid
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByName: incusapi.NetworkLoadBalancer{
				ListenAddress: "networkLoadBalancer one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by UUID",
			repoGetByUUIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				UUID:        uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`),
				Cluster:     "one",
				Name:        "one",
				NetworkName: "network",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByName: incusapi.NetworkLoadBalancer{
				ListenAddress: "networkLoadBalancer one",
			},
			repoUpdateByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.NetworkLoadBalancer, error) {
					return tc.repoGetByUUIDNetworkLoadBalancer, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, networkLoadBalancer inventory.NetworkLoadBalancer) (inventory.NetworkLoadBalancer, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkLoadBalancer.LastUpdated)
					return inventory.NetworkLoadBalancer{}, tc.repoUpdateByUUIDErr
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return tc.repoDeleteByUUIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkLoadBalancerClient := &serverMock.NetworkLoadBalancerServerClientMock{
				GetNetworkLoadBalancerByNameFunc: func(ctx context.Context, connectionURL string, networkName string, networkLoadBalancerName string) (incusapi.NetworkLoadBalancer, error) {
					require.Equal(t, tc.repoGetByUUIDNetworkLoadBalancer.Name, networkLoadBalancerName)
					require.Equal(t, "network", networkName)
					return tc.networkLoadBalancerClientGetNetworkLoadBalancerByName, tc.networkLoadBalancerClientGetNetworkLoadBalancerByNameErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, clusterSvc, networkLoadBalancerClient, nil, inventory.NetworkLoadBalancerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkLoadBalancerSvc.ResyncByUUID(context.Background(), uuid.MustParse(`8df91697-be30-464a-bd26-55d1bbe4b07f`))

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkLoadBalancerService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                                string
		clusterSvcGetByIDCluster                            provisioning.Cluster
		clusterSvcGetByIDErr                                error
		networkClientGetNetworks                            []incusapi.Network
		networkClientGetNetworksErr                         error
		networkLoadBalancerClientGetNetworkLoadBalancers    []incusapi.NetworkLoadBalancer
		networkLoadBalancerClientGetNetworkLoadBalancersErr error
		repoDeleteByClusterNameErr                          error
		repoCreateErr                                       error
		serviceOptions                                      []inventory.NetworkLoadBalancerServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "networkLoadBalancer one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with parent filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
				{
					Name: "filtered",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "networkLoadBalancer one",
				},
			},
			serviceOptions: []inventory.NetworkLoadBalancerServiceOption{
				inventory.NetworkLoadBalancerWithParentFilter(func(parent incusapi.Network) bool {
					return parent.Name == "filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "networkLoadBalancer one",
				},
				{
					ListenAddress: "networkLoadBalancer filtered",
				},
			},
			serviceOptions: []inventory.NetworkLoadBalancerServiceOption{
				inventory.NetworkLoadBalancerWithSyncFilter(func(networkLoadBalancer inventory.NetworkLoadBalancer) bool {
					return networkLoadBalancer.Name == "networkLoadBalancer filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network client get Networks",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworksErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkLoadBalancer client get NetworkLoadBalancers",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancersErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_load_balancers delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "networkLoadBalancer one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkLoadBalancer create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "networkLoadBalancer one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, networkLoadBalancer inventory.NetworkLoadBalancer) (inventory.NetworkLoadBalancer, error) {
					return inventory.NetworkLoadBalancer{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			networkClient := &serverMock.NetworkServerClientMock{
				GetNetworksFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
					return tc.networkClientGetNetworks, tc.networkClientGetNetworksErr
				},
			}

			networkLoadBalancerClient := &serverMock.NetworkLoadBalancerServerClientMock{
				GetNetworkLoadBalancersFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkLoadBalancer, error) {
					return tc.networkLoadBalancerClientGetNetworkLoadBalancers, tc.networkLoadBalancerClientGetNetworkLoadBalancersErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, clusterSvc, networkLoadBalancerClient, networkClient,
				append(
					tc.serviceOptions,
					inventory.NetworkLoadBalancerWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := networkLoadBalancerSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
