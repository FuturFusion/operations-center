// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestClusterMemberService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ClusterMemberRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.ClusterMemberFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			clusterMemberSvc := inventory.NewClusterMemberService(repo, nil, nil, inventory.ClusterMemberWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			clusterMemberIDs, err := clusterMemberSvc.GetAllIDsWithFilter(context.Background(), inventory.ClusterMemberFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, clusterMemberIDs, tc.count)
		})
	}
}

func TestClusterMemberService_GetByID(t *testing.T) {
	tests := []struct {
		name                     string
		idArg                    int
		repoGetByIDClusterMember inventory.ClusterMember
		repoGetByIDErr           error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDClusterMember: inventory.ClusterMember{
				ID:          1,
				ClusterID:   1,
				Name:        "one",
				Object:      incusapi.ClusterMember{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ClusterMemberRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.ClusterMember, error) {
					return tc.repoGetByIDClusterMember, tc.repoGetByIDErr
				},
			}

			clusterMemberSvc := inventory.NewClusterMemberService(repo, nil, nil, inventory.ClusterMemberWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			clusterMember, err := clusterMemberSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDClusterMember, clusterMember)
		})
	}
}

func TestClusterMemberService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                                         string
		clusterSvcGetByIDCluster                     provisioning.Cluster
		clusterSvcGetByIDErr                         error
		clusterMemberClientGetClusterMemberByName    incusapi.ClusterMember
		clusterMemberClientGetClusterMemberByNameErr error
		repoGetByIDClusterMember                     inventory.ClusterMember
		repoGetByIDErr                               error
		repoUpdateByIDErr                            error
		repoDeleteByIDErr                            error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDClusterMember: inventory.ClusterMember{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMemberByName: incusapi.ClusterMember{
				ServerName: "clusterMember one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - clusterMember get by name - not found",
			repoGetByIDClusterMember: inventory.ClusterMember{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMemberByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - clusterMember get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDClusterMember: inventory.ClusterMember{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - clusterMember get by name",
			repoGetByIDClusterMember: inventory.ClusterMember{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMemberByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - clusterMember get by name - not found - delete by id",
			repoGetByIDClusterMember: inventory.ClusterMember{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMemberByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDClusterMember: inventory.ClusterMember{
				ID:        1,
				ClusterID: 1,
				Name:      "", // invalid
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMemberByName: incusapi.ClusterMember{
				ServerName: "clusterMember one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDClusterMember: inventory.ClusterMember{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMemberByName: incusapi.ClusterMember{
				ServerName: "clusterMember one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ClusterMemberRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.ClusterMember, error) {
					return tc.repoGetByIDClusterMember, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, clusterMember inventory.ClusterMember) (inventory.ClusterMember, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), clusterMember.LastUpdated)
					return inventory.ClusterMember{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Cluster, error) {
					require.Equal(t, 1, id)
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			clusterMemberClient := &serverMock.ClusterMemberServerClientMock{
				GetClusterMemberByNameFunc: func(ctx context.Context, connectionURL string, clusterMemberName string) (incusapi.ClusterMember, error) {
					require.Equal(t, tc.repoGetByIDClusterMember.Name, clusterMemberName)
					return tc.clusterMemberClientGetClusterMemberByName, tc.clusterMemberClientGetClusterMemberByNameErr
				},
			}

			clusterMemberSvc := inventory.NewClusterMemberService(repo, clusterSvc, clusterMemberClient, inventory.ClusterMemberWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := clusterMemberSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestClusterMemberService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                    string
		clusterSvcGetByIDCluster                provisioning.Cluster
		clusterSvcGetByIDErr                    error
		clusterMemberClientGetClusterMembers    []incusapi.ClusterMember
		clusterMemberClientGetClusterMembersErr error
		repoDeleteByClusterIDErr                error
		repoCreateErr                           error
		serviceOptions                          []inventory.ClusterMemberServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMembers: []incusapi.ClusterMember{
				{
					ServerName: "clusterMember one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - clusterMember client get ClusterMembers",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMembersErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster_members delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMembers: []incusapi.ClusterMember{
				{
					ServerName: "clusterMember one",
				},
			},
			repoDeleteByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMembers: []incusapi.ClusterMember{
				{
					ServerName: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - clusterMember create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			clusterMemberClientGetClusterMembers: []incusapi.ClusterMember{
				{
					ServerName: "clusterMember one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ClusterMemberRepoMock{
				DeleteByClusterIDFunc: func(ctx context.Context, clusterID int) error {
					return tc.repoDeleteByClusterIDErr
				},
				CreateFunc: func(ctx context.Context, clusterMember inventory.ClusterMember) (inventory.ClusterMember, error) {
					return inventory.ClusterMember{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Cluster, error) {
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			clusterMemberClient := &serverMock.ClusterMemberServerClientMock{
				GetClusterMembersFunc: func(ctx context.Context, connectionURL string) ([]incusapi.ClusterMember, error) {
					return tc.clusterMemberClientGetClusterMembers, tc.clusterMemberClientGetClusterMembersErr
				},
			}

			clusterMemberSvc := inventory.NewClusterMemberService(repo, clusterSvc, clusterMemberClient,
				append(
					tc.serviceOptions,
					inventory.ClusterMemberWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := clusterMemberSvc.SyncCluster(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}
