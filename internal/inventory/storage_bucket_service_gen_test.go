// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
	"github.com/FuturFusion/operations-center/internal/testing/uuidgen"
)

func TestStorageBucketService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.StorageBuckets
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.StorageBuckets{
				inventory.StorageBucket{
					Name: "one",
				},
				inventory.StorageBucket{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.StorageBuckets{
				inventory.StorageBucket{
					Name: "one",
				},
				inventory.StorageBucket{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.StorageBuckets{
				inventory.StorageBucket{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.StorageBuckets{
				inventory.StorageBucket{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.StorageBuckets{
				inventory.StorageBucket{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageBucketRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.StorageBucketFilter) (inventory.StorageBuckets, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			storageBucketSvc := inventory.NewStorageBucketService(repo, nil, nil, nil, inventory.StorageBucketWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			storageBucket, err := storageBucketSvc.GetAllWithFilter(context.Background(), inventory.StorageBucketFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, storageBucket, tc.count)
		})
	}
}

func TestStorageBucketService_GetAllUUIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                         string
		filterExpression             *string
		repoGetAllUUIDsWithFilter    []uuid.UUID
		repoGetAllUUIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
				uuidgen.FromPattern(t, "2"),
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`UUID == "11111111-1111-1111-1111-111111111111"`),
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
				uuidgen.FromPattern(t, "2"),
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllUUIDsWithFilter: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                         "error - repo",
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageBucketRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.StorageBucketFilter) ([]uuid.UUID, error) {
					return tc.repoGetAllUUIDsWithFilter, tc.repoGetAllUUIDsWithFilterErr
				},
			}

			storageBucketSvc := inventory.NewStorageBucketService(repo, nil, nil, nil, inventory.StorageBucketWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			storageBucketUUIDs, err := storageBucketSvc.GetAllUUIDsWithFilter(context.Background(), inventory.StorageBucketFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, storageBucketUUIDs, tc.count)
		})
	}
}

func TestStorageBucketService_GetByUUID(t *testing.T) {
	tests := []struct {
		name                       string
		idArg                      uuid.UUID
		repoGetByUUIDStorageBucket inventory.StorageBucket
		repoGetByUUIDErr           error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: uuidgen.FromPattern(t, "1"),
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "one",
				ProjectName:     "one",
				StoragePoolName: "parent one",
				Name:            "one",
				Object:          incusapi.StorageBucket{},
				LastUpdated:     time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:             "error - repo",
			idArg:            uuidgen.FromPattern(t, "1"),
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageBucketRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.StorageBucket, error) {
					return tc.repoGetByUUIDStorageBucket, tc.repoGetByUUIDErr
				},
			}

			storageBucketSvc := inventory.NewStorageBucketService(repo, nil, nil, nil, inventory.StorageBucketWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			storageBucket, err := storageBucketSvc.GetByUUID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByUUIDStorageBucket, storageBucket)
		})
	}
}

func TestStorageBucketService_ResyncByUUID(t *testing.T) {
	tests := []struct {
		name                                         string
		clusterSvcGetEndpoint                        provisioning.Endpoint
		clusterSvcGetEndpointErr                     error
		storageBucketClientGetStorageBucketByName    incusapi.StorageBucket
		storageBucketClientGetStorageBucketByNameErr error
		repoGetByUUIDStorageBucket                   inventory.StorageBucket
		repoGetByUUIDErr                             error
		repoUpdateByUUIDErr                          error
		repoDeleteByUUIDErr                          error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "one",
				Name:            "one",
				ProjectName:     "project one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByName: incusapi.StorageBucket{
				Name:     "storageBucket one",
				Location: "one",
				Project:  "project one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - storageBucket get by name - not found",
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "one",
				Name:            "one",
				ProjectName:     "project one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:             "error - storageBucket get by UUID",
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "one",
				Name:            "one",
				ProjectName:     "project one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetEndpointErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storageBucket get by name",
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "one",
				Name:            "one",
				ProjectName:     "project one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storageBucket get by name - not found - delete by uuid",
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "one",
				Name:            "one",
				ProjectName:     "project one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByNameErr: domain.ErrNotFound,
			repoDeleteByUUIDErr:                          boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "one",
				Name:            "", // invalid
				ProjectName:     "project one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByName: incusapi.StorageBucket{
				Name:     "storageBucket one",
				Location: "one",
				Project:  "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by UUID",
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "one",
				Name:            "one",
				ProjectName:     "project one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByName: incusapi.StorageBucket{
				Name:     "storageBucket one",
				Location: "one",
				Project:  "project one",
			},
			repoUpdateByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageBucketRepoMock{
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.StorageBucket, error) {
					return tc.repoGetByUUIDStorageBucket, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), storageBucket.LastUpdated)
					return inventory.StorageBucket{}, tc.repoUpdateByUUIDErr
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return tc.repoDeleteByUUIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					require.Equal(t, "one", name)
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			storageBucketClient := &serverMock.StorageBucketServerClientMock{
				GetStorageBucketByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, projectName string, storagePoolName string, storageBucketName string) (incusapi.StorageBucket, error) {
					require.Equal(t, tc.repoGetByUUIDStorageBucket.Name, storageBucketName)
					require.Equal(t, tc.repoGetByUUIDStorageBucket.ProjectName, projectName)
					require.Equal(t, "storage_pool", storagePoolName)
					return tc.storageBucketClientGetStorageBucketByName, tc.storageBucketClientGetStorageBucketByNameErr
				},
			}

			storageBucketSvc := inventory.NewStorageBucketService(repo, clusterSvc, storageBucketClient, nil, inventory.StorageBucketWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := storageBucketSvc.ResyncByUUID(context.Background(), uuidgen.FromPattern(t, "1"))

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestStorageBucketService_ResyncByName(t *testing.T) {
	tests := []struct {
		name                                         string
		argClusterName                               string
		argLifecycleEvent                            domain.LifecycleEvent
		repoGetAllUUIDsWithFilterUUIDs               []uuid.UUID
		repoGetAllUUIDsWithFilterErr                 error
		clusterSvcGetEndpoint                        provisioning.Endpoint
		clusterSvcGetEndpointErr                     error
		storageBucketClientGetStorageBucketByName    incusapi.StorageBucket
		storageBucketClientGetStorageBucketByNameErr error
		serviceOptions                               []inventory.StorageBucketServiceOption
		repoCreateErr                                error
		repoGetByUUIDStorageBucket                   inventory.StorageBucket
		repoGetByUUIDErr                             error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:           "success - not responsible",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "invalid",
			},

			assertErr: require.NoError,
		},
		{
			name:           "success - not found",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByName: incusapi.StorageBucket{
				Name:     "storage_bucket",
				Location: "server01",
				Project:  "project",
			},

			assertErr: require.NoError,
		},
		{
			name:           "success - not found with sync filter",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByName: incusapi.StorageBucket{
				Name:     "storage_bucket filtered", // matches filter
				Location: "server01",
				Project:  "project",
			},
			serviceOptions: []inventory.StorageBucketServiceOption{
				inventory.StorageBucketWithSyncFilter(func(storageBucket inventory.StorageBucket) bool {
					return storageBucket.Name == "storage_bucket filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:           "success - update existing",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},
			repoGetByUUIDStorageBucket: inventory.StorageBucket{
				UUID:            uuidgen.FromPattern(t, "1"),
				Cluster:         "cluster",
				Name:            "storage_bucket",
				ProjectName:     "project",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByName: incusapi.StorageBucket{
				Name:     "storage_bucket",
				Location: "server01",
				Project:  "project",
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo.GetAllUUIDsWithFilter",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterErr: boom.Error,

			assertErr: require.Error,
		},
		{
			name:           "error - not found - clusterSvc.GetEndpoint",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpointErr:       boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name:           "error - not found - client.GetStorageBucketByName",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name:           "error - not found - validate",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByName: incusapi.StorageBucket{
				Name:     "", // invalid
				Location: "server01",
				Project:  "project",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name:           "error - not found - repo.Create",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{},
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:        "https://server01/",
					Certificate:          "cert",
					Cluster:              ptr.To("cluster"),
					ClusterConnectionURL: ptr.To("https://cluster/"),
					ClusterCertificate:   ptr.To("cluster-cert"),
				},
			},
			storageBucketClientGetStorageBucketByName: incusapi.StorageBucket{
				Name:     "storage_bucket",
				Location: "server01",
				Project:  "project",
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name:           "error - update existing - ResyncByUUID",
			argClusterName: "cluster",
			argLifecycleEvent: domain.LifecycleEvent{
				ResourceType: "storage-bucket",
				Source: domain.LifecycleSource{
					ProjectName: "project",
					ParentName:  "storage_pool",
					Name:        "storage_bucket",
				},
			},
			repoGetAllUUIDsWithFilterUUIDs: []uuid.UUID{
				uuidgen.FromPattern(t, "1"),
			},
			repoGetByUUIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageBucketRepoMock{
				GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter inventory.StorageBucketFilter) ([]uuid.UUID, error) {
					require.Equal(t, tc.argClusterName, *filter.Cluster)
					require.Equal(t, tc.argLifecycleEvent.Source.ProjectName, *filter.Project)
					require.Equal(t, tc.argLifecycleEvent.Source.ParentName, *filter.StoragePoolName)
					require.Equal(t, tc.argLifecycleEvent.Source.Name, *filter.Name)
					return tc.repoGetAllUUIDsWithFilterUUIDs, tc.repoGetAllUUIDsWithFilterErr
				},
				CreateFunc: func(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error) {
					require.Equal(t, tc.argClusterName, storageBucket.Cluster)
					require.Equal(t, tc.argLifecycleEvent.Source.ProjectName, storageBucket.ProjectName)
					require.Equal(t, tc.argLifecycleEvent.Source.ParentName, storageBucket.StoragePoolName)
					require.Equal(t, tc.argLifecycleEvent.Source.Name, storageBucket.Name)
					return inventory.StorageBucket{}, tc.repoCreateErr
				},
				GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (inventory.StorageBucket, error) {
					return tc.repoGetByUUIDStorageBucket, tc.repoGetByUUIDErr
				},
				UpdateByUUIDFunc: func(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), storageBucket.LastUpdated)
					return inventory.StorageBucket{}, nil
				},
				DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
					return nil
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					require.Equal(t, tc.argClusterName, name)
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			storageBucketClient := &serverMock.StorageBucketServerClientMock{
				GetStorageBucketByNameFunc: func(ctx context.Context, endpoint provisioning.Endpoint, projectName string, storagePoolName string, storageBucketName string) (incusapi.StorageBucket, error) {
					clusterName, err := endpoint.GetServerName()
					require.NoError(t, err)
					require.Equal(t, tc.argClusterName, clusterName)
					require.Equal(t, tc.argLifecycleEvent.Source.ProjectName, projectName)
					require.Equal(t, tc.argLifecycleEvent.Source.ParentName, storagePoolName)
					require.Equal(t, tc.argLifecycleEvent.Source.Name, storageBucketName)
					return tc.storageBucketClientGetStorageBucketByName, tc.storageBucketClientGetStorageBucketByNameErr
				},
			}

			storageBucketSvc := inventory.NewStorageBucketService(repo, clusterSvc, storageBucketClient, nil,
				append(tc.serviceOptions,
					inventory.StorageBucketWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := storageBucketSvc.ResyncByName(context.Background(), tc.argClusterName, tc.argLifecycleEvent)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestStorageBucketService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                    string
		clusterSvcGetEndpoint                   provisioning.Endpoint
		clusterSvcGetEndpointErr                error
		storagePoolClientGetStoragePools        []incusapi.StoragePool
		storagePoolClientGetStoragePoolsErr     error
		storageBucketClientGetStorageBuckets    []incusapi.StorageBucket
		storageBucketClientGetStorageBucketsErr error
		repoDeleteByClusterNameErr              error
		repoCreateErr                           error
		serviceOptions                          []inventory.StorageBucketServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageBucketClientGetStorageBuckets: []incusapi.StorageBucket{
				{
					Name:     "storageBucket one",
					Location: "one",
					Project:  "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with parent filter",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
				{
					Name: "filtered",
				},
			},
			storageBucketClientGetStorageBuckets: []incusapi.StorageBucket{
				{
					Name:     "storageBucket one",
					Location: "one",
					Project:  "project one",
				},
			},
			serviceOptions: []inventory.StorageBucketServiceOption{
				inventory.StorageBucketWithParentFilter(func(parent incusapi.StoragePool) bool {
					return parent.Name == "filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageBucketClientGetStorageBuckets: []incusapi.StorageBucket{
				{
					Name:     "storageBucket one",
					Location: "one",
					Project:  "project one",
				},
				{
					Name:     "storageBucket filtered",
					Location: "one",
					Project:  "project one",
				},
			},
			serviceOptions: []inventory.StorageBucketServiceOption{
				inventory.StorageBucketWithSyncFilter(func(storageBucket inventory.StorageBucket) bool {
					return storageBucket.Name == "storageBucket filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                     "error - cluster service get by ID",
			clusterSvcGetEndpointErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storagePool client get StoragePools",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storagePoolClientGetStoragePoolsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storageBucket client get StorageBuckets",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageBucketClientGetStorageBucketsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storage_buckets delete by cluster ID",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageBucketClientGetStorageBuckets: []incusapi.StorageBucket{
				{
					Name:     "storageBucket one",
					Location: "one",
					Project:  "project one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageBucketClientGetStorageBuckets: []incusapi.StorageBucket{
				{
					Name:     "", // invalid
					Location: "one",
					Project:  "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - storageBucket create",
			clusterSvcGetEndpoint: provisioning.ClusterEndpoint{
				{
					ConnectionURL:      "https://server-one/",
					Certificate:        "cert",
					ClusterCertificate: ptr.To("cluster-cert"),
				},
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageBucketClientGetStorageBuckets: []incusapi.StorageBucket{
				{
					Name:     "storageBucket one",
					Location: "one",
					Project:  "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageBucketRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, storageBucket inventory.StorageBucket) (inventory.StorageBucket, error) {
					return inventory.StorageBucket{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetEndpointFunc: func(ctx context.Context, name string) (provisioning.Endpoint, error) {
					return tc.clusterSvcGetEndpoint, tc.clusterSvcGetEndpointErr
				},
			}

			storagePoolClient := &serverMock.StoragePoolServerClientMock{
				GetStoragePoolsFunc: func(ctx context.Context, endpoint provisioning.Endpoint) ([]incusapi.StoragePool, error) {
					return tc.storagePoolClientGetStoragePools, tc.storagePoolClientGetStoragePoolsErr
				},
			}

			storageBucketClient := &serverMock.StorageBucketServerClientMock{
				GetStorageBucketsFunc: func(ctx context.Context, endpoint provisioning.Endpoint, storagePoolName string) ([]incusapi.StorageBucket, error) {
					return tc.storageBucketClientGetStorageBuckets, tc.storageBucketClientGetStorageBucketsErr
				},
			}

			storageBucketSvc := inventory.NewStorageBucketService(repo, clusterSvc, storageBucketClient, storagePoolClient,
				append(
					tc.serviceOptions,
					inventory.StorageBucketWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := storageBucketSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
