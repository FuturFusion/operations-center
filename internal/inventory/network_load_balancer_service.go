// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkLoadBalancerService struct {
	repo                      NetworkLoadBalancerRepo
	clusterSvc                ProvisioningClusterService
	networkClient             NetworkServerClient
	networkLoadBalancerClient NetworkLoadBalancerServerClient
	isParentFiltered          func(incusapi.Network) bool

	clusterSyncFilterFunc func(networkLoadBalancer NetworkLoadBalancer) bool

	now func() time.Time
}

var _ NetworkLoadBalancerService = &networkLoadBalancerService{}

type NetworkLoadBalancerServiceOption func(s *networkLoadBalancerService)

func NetworkLoadBalancerWithSyncFilter(clusterSyncFilterFunc func(networkLoadBalancer NetworkLoadBalancer) bool) NetworkLoadBalancerServiceOption {
	return func(s *networkLoadBalancerService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NetworkLoadBalancerWithParentFilter(f func(incusapi.Network) bool) NetworkLoadBalancerServiceOption {
	return func(s *networkLoadBalancerService) {
		s.isParentFiltered = f
	}
}

func NewNetworkLoadBalancerService(repo NetworkLoadBalancerRepo, clusterSvc ProvisioningClusterService, client NetworkLoadBalancerServerClient, parentClient NetworkServerClient, opts ...NetworkLoadBalancerServiceOption) networkLoadBalancerService {
	networkLoadBalancerSvc := networkLoadBalancerService{
		repo:                      repo,
		clusterSvc:                clusterSvc,
		networkClient:             parentClient,
		networkLoadBalancerClient: client,

		clusterSyncFilterFunc: func(networkLoadBalancer NetworkLoadBalancer) bool {
			return false
		},

		isParentFiltered: func(_ incusapi.Network) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkLoadBalancerSvc)
	}

	return networkLoadBalancerSvc
}

func (s networkLoadBalancerService) GetAllWithFilter(ctx context.Context, filter NetworkLoadBalancerFilter) (NetworkLoadBalancers, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(NetworkLoadBalancer{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkLoadBalancers, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkLoadBalancers NetworkLoadBalancers
	if filter.Expression != nil {
		for _, networkLoadBalancer := range networkLoadBalancers {
			output, err := expr.Run(filterExpression, networkLoadBalancer)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkLoadBalancers = append(filteredNetworkLoadBalancers, networkLoadBalancer)
			}
		}

		return filteredNetworkLoadBalancers, nil
	}

	return networkLoadBalancers, nil
}

func (s networkLoadBalancerService) GetAllIDsWithFilter(ctx context.Context, filter NetworkLoadBalancerFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s networkLoadBalancerService) GetByID(ctx context.Context, id int) (NetworkLoadBalancer, error) {
	return s.repo.GetByID(ctx, id)
}

func (s networkLoadBalancerService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkLoadBalancer, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, networkLoadBalancer.Cluster)
		if err != nil {
			return err
		}

		retrievedNetworkLoadBalancer, err := s.networkLoadBalancerClient.GetNetworkLoadBalancerByName(ctx, cluster.ConnectionURL, networkLoadBalancer.NetworkName, networkLoadBalancer.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, networkLoadBalancer.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkLoadBalancer.Object = retrievedNetworkLoadBalancer
		networkLoadBalancer.LastUpdated = s.now()

		err = networkLoadBalancer.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, networkLoadBalancer)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkLoadBalancerService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedNetworks, err := s.networkClient.GetNetworks(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	for _, network := range retrievedNetworks {
		if s.isParentFiltered(network) {
			continue
		}

		retrievedNetworkLoadBalancers, err := s.networkLoadBalancerClient.GetNetworkLoadBalancers(ctx, cluster.ConnectionURL, network.Name)
		if err != nil {
			return err
		}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			err = s.repo.DeleteByClusterName(ctx, name)
			if err != nil && !errors.Is(err, domain.ErrNotFound) {
				return err
			}

			for _, retrievedNetworkLoadBalancer := range retrievedNetworkLoadBalancers {
				networkLoadBalancer := NetworkLoadBalancer{
					Cluster:     name,
					NetworkName: network.Name,
					Name:        retrievedNetworkLoadBalancer.ListenAddress,
					Object:      retrievedNetworkLoadBalancer,
					LastUpdated: s.now(),
				}

				if s.clusterSyncFilterFunc(networkLoadBalancer) {
					continue
				}

				err = networkLoadBalancer.Validate()
				if err != nil {
					return err
				}

				_, err := s.repo.Create(ctx, networkLoadBalancer)
				if err != nil {
					return err
				}
			}

			return nil
		})
		if err != nil {
			return err
		}
	}

	return nil
}
