// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type storagePoolService struct {
	repo              StoragePoolRepo
	clusterSvc        ClusterService
	serverSvc         ServerService
	storagePoolClient StoragePoolServerClient

	now func() time.Time
}

var _ StoragePoolService = &storagePoolService{}

type StoragePoolServiceOption func(s *storagePoolService)

func NewStoragePoolService(repo StoragePoolRepo, clusterSvc ClusterService, serverSvc ServerService, client StoragePoolServerClient, opts ...StoragePoolServiceOption) storagePoolService {
	storagePoolSvc := storagePoolService{
		repo:              repo,
		clusterSvc:        clusterSvc,
		serverSvc:         serverSvc,
		storagePoolClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&storagePoolSvc)
	}

	return storagePoolSvc
}

func (s storagePoolService) GetAllIDs(ctx context.Context) ([]int, error) {
	return s.repo.GetAllIDs(ctx)
}

func (s storagePoolService) GetByID(ctx context.Context, id int) (StoragePool, error) {
	return s.repo.GetByID(ctx, id)
}

func (s storagePoolService) SyncAll(ctx context.Context) error {
	clusters, err := s.clusterSvc.GetAll(ctx)
	if err != nil {
		return err
	}

	for _, cluster := range clusters {
		err = s.SyncCluster(ctx, cluster.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s storagePoolService) SyncCluster(ctx context.Context, clusterID int) error {
	servers, err := s.serverSvc.GetAllByClusterID(ctx, clusterID)
	if err != nil {
		return err
	}

	for _, server := range servers {
		err = s.SyncServer(ctx, server.ID)
		if err != nil {
			return err
		}
	}

	return nil
}

func (s storagePoolService) SyncServer(ctx context.Context, serverID int) error {
	server, err := s.serverSvc.GetByID(ctx, serverID)
	if err != nil {
		return err
	}

	serverStoragePools, err := s.storagePoolClient.GetStoragePools(ctx, server.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByServerID(ctx, serverID)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, serverStoragePool := range serverStoragePools {
			storagePool := StoragePool{
				ClusterID:   server.ClusterID,
				ServerID:    serverID,
				Name:        serverStoragePool.Name,
				Object:      serverStoragePool,
				LastUpdated: s.now(),
			}

			_, err := s.repo.Create(ctx, storagePool)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
