// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type storagePoolService struct {
	repo              StoragePoolRepo
	clusterSvc        ProvisioningClusterService
	storagePoolClient StoragePoolServerClient

	clusterSyncFilterFunc func(storagePool StoragePool) bool

	now func() time.Time
}

var _ StoragePoolService = &storagePoolService{}

type StoragePoolServiceOption func(s *storagePoolService)

func StoragePoolWithSyncFilter(clusterSyncFilterFunc func(storagePool StoragePool) bool) StoragePoolServiceOption {
	return func(s *storagePoolService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewStoragePoolService(repo StoragePoolRepo, clusterSvc ProvisioningClusterService, client StoragePoolServerClient, opts ...StoragePoolServiceOption) storagePoolService {
	storagePoolSvc := storagePoolService{
		repo:              repo,
		clusterSvc:        clusterSvc,
		storagePoolClient: client,

		clusterSyncFilterFunc: func(storagePool StoragePool) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&storagePoolSvc)
	}

	return storagePoolSvc
}

func (s storagePoolService) GetAllWithFilter(ctx context.Context, filter StoragePoolFilter) (StoragePools, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(StoragePool{})}...)
		if err != nil {
			return nil, err
		}
	}

	storagePools, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredStoragePools StoragePools
	if filter.Expression != nil {
		for _, storagePool := range storagePools {
			output, err := expr.Run(filterExpression, storagePool)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredStoragePools = append(filteredStoragePools, storagePool)
			}
		}

		return filteredStoragePools, nil
	}

	return storagePools, nil
}

func (s storagePoolService) GetAllIDsWithFilter(ctx context.Context, filter StoragePoolFilter) ([]int, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		ID int
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	storagePoolsIDs, err := s.repo.GetAllIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredStoragePoolsIDs []int
	if filter.Expression != nil {
		for _, storagePoolID := range storagePoolsIDs {
			output, err := expr.Run(filterExpression, Env{storagePoolID})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredStoragePoolsIDs = append(filteredStoragePoolsIDs, storagePoolID)
			}
		}

		return filteredStoragePoolsIDs, nil
	}

	return storagePoolsIDs, nil
}

func (s storagePoolService) GetByID(ctx context.Context, id int) (StoragePool, error) {
	return s.repo.GetByID(ctx, id)
}

func (s storagePoolService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		storagePool, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, storagePool.Cluster)
		if err != nil {
			return err
		}

		retrievedStoragePool, err := s.storagePoolClient.GetStoragePoolByName(ctx, cluster.ConnectionURL, storagePool.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, storagePool.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		storagePool.Object = retrievedStoragePool
		storagePool.LastUpdated = s.now()

		err = storagePool.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, storagePool)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s storagePoolService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedStoragePools, err := s.storagePoolClient.GetStoragePools(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedStoragePool := range retrievedStoragePools {
			storagePool := StoragePool{
				Cluster:     name,
				Name:        retrievedStoragePool.Name,
				Object:      retrievedStoragePool,
				LastUpdated: s.now(),
			}

			if s.clusterSyncFilterFunc(storagePool) {
				continue
			}

			err = storagePool.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, storagePool)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
