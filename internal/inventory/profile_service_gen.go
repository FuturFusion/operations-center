// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type profileService struct {
	repo          ProfileRepo
	clusterSvc    ProvisioningClusterService
	profileClient ProfileServerClient

	clusterSyncFilterFunc func(profile Profile) bool

	now func() time.Time
}

var _ ProfileService = &profileService{}

type ProfileServiceOption func(s *profileService)

func ProfileWithSyncFilter(clusterSyncFilterFunc func(profile Profile) bool) ProfileServiceOption {
	return func(s *profileService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewProfileService(repo ProfileRepo, clusterSvc ProvisioningClusterService, client ProfileServerClient, opts ...ProfileServiceOption) profileService {
	profileSvc := profileService{
		repo:          repo,
		clusterSvc:    clusterSvc,
		profileClient: client,

		clusterSyncFilterFunc: func(profile Profile) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&profileSvc)
	}

	return profileSvc
}

func (s profileService) GetAllWithFilter(ctx context.Context, filter ProfileFilter) (Profiles, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Profile{})}...)
		if err != nil {
			return nil, err
		}
	}

	profiles, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredProfiles Profiles
	if filter.Expression != nil {
		for _, profile := range profiles {
			output, err := expr.Run(filterExpression, profile)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredProfiles = append(filteredProfiles, profile)
			}
		}

		return filteredProfiles, nil
	}

	return profiles, nil
}

func (s profileService) GetAllUUIDsWithFilter(ctx context.Context, filter ProfileFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	profilesUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredProfilesUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, profileUUID := range profilesUUIDs {
			output, err := expr.Run(filterExpression, Env{profileUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredProfilesUUIDs = append(filteredProfilesUUIDs, profileUUID)
			}
		}

		return filteredProfilesUUIDs, nil
	}

	return profilesUUIDs, nil
}

func (s profileService) GetByUUID(ctx context.Context, id uuid.UUID) (Profile, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s profileService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		profile, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		endpoint, err := s.clusterSvc.GetEndpoint(ctx, profile.Cluster)
		if err != nil {
			return err
		}

		retrievedProfile, err := s.profileClient.GetProfileByName(ctx, endpoint, profile.ProjectName, profile.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, profile.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		profile.ProjectName = retrievedProfile.Project
		profile.Object = retrievedProfile
		profile.LastUpdated = s.now()
		profile.DeriveUUID()

		err = profile.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, profile)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s profileService) ResyncByName(ctx context.Context, clusterName string, event domain.LifecycleEvent) error {
	if event.ResourceType != "profile" {
		return nil
	}

	UUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, ProfileFilter{
		Cluster: &clusterName,
		Project: &event.Source.ProjectName,
		Name:    &event.Source.Name,
	})
	if err != nil {
		return err
	}

	if len(UUIDs) == 0 {
		// This inventory is not found, try to fetch it from source and create it.
		endpoint, err := s.clusterSvc.GetEndpoint(ctx, clusterName)
		if err != nil {
			return err
		}

		retrievedProfile, err := s.profileClient.GetProfileByName(ctx, endpoint, event.Source.ProjectName, event.Source.Name)
		if err != nil {
			return err
		}

		profile := Profile{
			Cluster:     clusterName,
			ProjectName: retrievedProfile.Project,
			Name:        retrievedProfile.Name,
			Object:      retrievedProfile,
			LastUpdated: s.now(),
		}

		profile.DeriveUUID()

		if s.clusterSyncFilterFunc(profile) {
			return nil
		}

		err = profile.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.Create(ctx, profile)
		if err != nil {
			return err
		}

		return nil
	}

	var errs []error
	for _, UUID := range UUIDs {
		err := s.ResyncByUUID(ctx, UUID)
		errs = append(errs, err)
	}

	err = errors.Join(errs...)
	if err != nil {
		return fmt.Errorf("Failed to resync instance by name: %w", errors.Join(errs...))
	}

	return nil
}

func (s profileService) SyncCluster(ctx context.Context, name string) error {
	endpoint, err := s.clusterSvc.GetEndpoint(ctx, name)
	if err != nil {
		return err
	}

	retrievedProfiles, err := s.profileClient.GetProfiles(ctx, endpoint)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedProfile := range retrievedProfiles {
			profile := Profile{
				Cluster:     name,
				ProjectName: retrievedProfile.Project,
				Name:        retrievedProfile.Name,
				Object:      retrievedProfile,
				LastUpdated: s.now(),
			}

			profile.DeriveUUID()

			if s.clusterSyncFilterFunc(profile) {
				continue
			}

			err = profile.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, profile)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
