// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkService struct {
	repo          NetworkRepo
	clusterSvc    ProvisioningClusterService
	networkClient NetworkServerClient

	clusterSyncFilterFunc func(network Network) bool

	now func() time.Time
}

var _ NetworkService = &networkService{}

type NetworkServiceOption func(s *networkService)

func NetworkWithSyncFilter(clusterSyncFilterFunc func(network Network) bool) NetworkServiceOption {
	return func(s *networkService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewNetworkService(repo NetworkRepo, clusterSvc ProvisioningClusterService, client NetworkServerClient, opts ...NetworkServiceOption) networkService {
	networkSvc := networkService{
		repo:          repo,
		clusterSvc:    clusterSvc,
		networkClient: client,

		clusterSyncFilterFunc: func(network Network) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkSvc)
	}

	return networkSvc
}

func (s networkService) GetAllWithFilter(ctx context.Context, filter NetworkFilter) (Networks, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Network{})}...)
		if err != nil {
			return nil, err
		}
	}

	networks, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworks Networks
	if filter.Expression != nil {
		for _, network := range networks {
			output, err := expr.Run(filterExpression, network)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworks = append(filteredNetworks, network)
			}
		}

		return filteredNetworks, nil
	}

	return networks, nil
}

func (s networkService) GetAllUUIDsWithFilter(ctx context.Context, filter NetworkFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	networksUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworksUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, networkUUID := range networksUUIDs {
			output, err := expr.Run(filterExpression, Env{networkUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworksUUIDs = append(filteredNetworksUUIDs, networkUUID)
			}
		}

		return filteredNetworksUUIDs, nil
	}

	return networksUUIDs, nil
}

func (s networkService) GetByUUID(ctx context.Context, id uuid.UUID) (Network, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s networkService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		network, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		endpoint, err := s.clusterSvc.GetEndpoint(ctx, network.Cluster)
		if err != nil {
			return err
		}

		retrievedNetwork, err := s.networkClient.GetNetworkByName(ctx, endpoint, network.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, network.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		network.ProjectName = retrievedNetwork.Project
		network.Object = retrievedNetwork
		network.LastUpdated = s.now()
		network.DeriveUUID()

		err = network.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, network)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkService) SyncCluster(ctx context.Context, name string) error {
	endpoint, err := s.clusterSvc.GetEndpoint(ctx, name)
	if err != nil {
		return err
	}

	retrievedNetworks, err := s.networkClient.GetNetworks(ctx, endpoint)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedNetwork := range retrievedNetworks {
			network := Network{
				Cluster:     name,
				ProjectName: retrievedNetwork.Project,
				Name:        retrievedNetwork.Name,
				Object:      retrievedNetwork,
				LastUpdated: s.now(),
			}

			network.DeriveUUID()

			if s.clusterSyncFilterFunc(network) {
				continue
			}

			err = network.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, network)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
