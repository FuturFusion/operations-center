// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestProfileService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetAllIDsFunc: func(ctx context.Context) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, nil, nil, nil)

			// Run test
			profileHostnames, err := profileSvc.GetAllIDs(context.Background())

			// Assert
			tc.assertErr(t, err)
			require.Len(t, profileHostnames, tc.count)
		})
	}
}

func TestProfileService_GetByID(t *testing.T) {
	tests := []struct {
		name               string
		idArg              int
		repoGetByIDProfile inventory.Profile
		repoGetByIDErr     error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDProfile: inventory.Profile{
				ID:          1,
				ServerID:    1,
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.Profile{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Profile, error) {
					return tc.repoGetByIDProfile, tc.repoGetByIDErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, nil, nil, nil)

			// Run test
			profile, err := profileSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDProfile, profile)
		})
	}
}

func TestProfileService_SyncAll(t *testing.T) {
	// Includes also SyncCluster and SyncServer
	tests := []struct {
		name                              string
		clusterSvcGetAllClusters          provisioning.Clusters
		clusterSvcGetAllErr               error
		serverSvcGetAllByClusterIDServers provisioning.Servers
		serverSvcGetAllByClusterIDErr     error
		serverSvcGetByIDServer            provisioning.Server
		serverSvcGetByIDErr               error
		profileClientGetProfiles          []incusapi.Profile
		profileClientGetProfilesErr       error
		repoDeleteByServerIDErr           error
		repoCreateErr                     error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name: "profile one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                "error - cluster service get all",
			clusterSvcGetAllErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server service get all by cluster ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server service get by ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profile client get Profiles",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			profileClientGetProfilesErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profiles delete by server ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name: "profile one",
				},
			},
			repoDeleteByServerIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profile create",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name: "profile one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				DeleteByServerIDFunc: func(ctx context.Context, serverID int) error {
					return tc.repoDeleteByServerIDErr
				},
				CreateFunc: func(ctx context.Context, profile inventory.Profile) (inventory.Profile, error) {
					return inventory.Profile{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ClusterServiceMock{
				GetAllFunc: func(ctx context.Context) (provisioning.Clusters, error) {
					return tc.clusterSvcGetAllClusters, tc.clusterSvcGetAllErr
				},
			}

			serverSvc := &serviceMock.ServerServiceMock{
				GetAllByClusterIDFunc: func(ctx context.Context, clusterID int) (provisioning.Servers, error) {
					return tc.serverSvcGetAllByClusterIDServers, tc.serverSvcGetAllByClusterIDErr
				},
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
					return tc.serverSvcGetByIDServer, tc.serverSvcGetByIDErr
				},
			}

			profileClient := &serviceMock.ProfileServerClientMock{
				GetProfilesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Profile, error) {
					return tc.profileClientGetProfiles, tc.profileClientGetProfilesErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, clusterSvc, serverSvc, profileClient)

			// Run test
			err := profileSvc.SyncAll(context.Background())

			// Assert
			tc.assertErr(t, err)
		})
	}
}
