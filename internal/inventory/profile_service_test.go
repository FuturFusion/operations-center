// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestProfileService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.ProfileFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, nil, nil, inventory.ProfileWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			profileIDs, err := profileSvc.GetAllIDsWithFilter(context.Background(), inventory.ProfileFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, profileIDs, tc.count)
		})
	}
}

func TestProfileService_GetByID(t *testing.T) {
	tests := []struct {
		name               string
		idArg              int
		repoGetByIDProfile inventory.Profile
		repoGetByIDErr     error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDProfile: inventory.Profile{
				ID:          1,
				ClusterID:   1,
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.Profile{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Profile, error) {
					return tc.repoGetByIDProfile, tc.repoGetByIDErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, nil, nil, inventory.ProfileWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			profile, err := profileSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDProfile, profile)
		})
	}
}

func TestProfileService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                             string
		clusterSvcGetByIDCluster         provisioning.Cluster
		clusterSvcGetByIDErr             error
		profileClientGetProfileByName    incusapi.Profile
		profileClientGetProfileByNameErr error
		repoGetByIDProfile               inventory.Profile
		repoGetByIDErr                   error
		repoUpdateByIDErr                error
		repoDeleteByIDErr                error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDProfile: inventory.Profile{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfileByName: incusapi.Profile{
				Name:    "profile one",
				Project: "project one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - profile get by name - not found",
			repoGetByIDProfile: inventory.Profile{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfileByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - profile get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDProfile: inventory.Profile{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profile get by name",
			repoGetByIDProfile: inventory.Profile{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfileByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profile get by name - not found - delete by id",
			repoGetByIDProfile: inventory.Profile{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfileByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr:                boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDProfile: inventory.Profile{
				ID:        1,
				ClusterID: 1,
				Name:      "", // invalid
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfileByName: incusapi.Profile{
				Name:    "profile one",
				Project: "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDProfile: inventory.Profile{
				ID:        1,
				ClusterID: 1,
				Name:      "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfileByName: incusapi.Profile{
				Name:    "profile one",
				Project: "project one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Profile, error) {
					return tc.repoGetByIDProfile, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, profile inventory.Profile) (inventory.Profile, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), profile.LastUpdated)
					return inventory.Profile{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ClusterServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Cluster, error) {
					require.Equal(t, 1, id)
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			profileClient := &serverMock.ProfileServerClientMock{
				GetProfileByNameFunc: func(ctx context.Context, connectionURL string, profileName string) (incusapi.Profile, error) {
					require.Equal(t, tc.repoGetByIDProfile.Name, profileName)
					return tc.profileClientGetProfileByName, tc.profileClientGetProfileByNameErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, clusterSvc, profileClient, inventory.ProfileWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := profileSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestProfileService_SyncAll(t *testing.T) {
	// Includes also SyncCluster and SyncServer
	tests := []struct {
		name                        string
		clusterSvcGetAllClusters    provisioning.Clusters
		clusterSvcGetAllErr         error
		clusterSvcGetByIDCluster    provisioning.Cluster
		clusterSvcGetByIDErr        error
		profileClientGetProfiles    []incusapi.Profile
		profileClientGetProfilesErr error
		repoDeleteByClusterIDErr    error
		repoCreateErr               error
		serviceOptions              []inventory.ProfileServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "profile one",
					Project: "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                "error - cluster service get all",
			clusterSvcGetAllErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster service get by ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profile client get Profiles",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfilesErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - profiles delete by cluster ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "profile one",
					Project: "project one",
				},
			},
			repoDeleteByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "", // invalid
					Project: "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - profile create",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				ID:   1,
				Name: "cluster-one",
			},
			profileClientGetProfiles: []incusapi.Profile{
				{
					Name:    "profile one",
					Project: "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ProfileRepoMock{
				DeleteByClusterIDFunc: func(ctx context.Context, clusterID int) error {
					return tc.repoDeleteByClusterIDErr
				},
				CreateFunc: func(ctx context.Context, profile inventory.Profile) (inventory.Profile, error) {
					return inventory.Profile{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ClusterServiceMock{
				GetAllFunc: func(ctx context.Context) (provisioning.Clusters, error) {
					return tc.clusterSvcGetAllClusters, tc.clusterSvcGetAllErr
				},
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Cluster, error) {
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			profileClient := &serverMock.ProfileServerClientMock{
				GetProfilesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Profile, error) {
					return tc.profileClientGetProfiles, tc.profileClientGetProfilesErr
				},
			}

			profileSvc := inventory.NewProfileService(repo, clusterSvc, profileClient,
				append(
					tc.serviceOptions,
					inventory.ProfileWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := profileSvc.SyncAll(context.Background())

			// Assert
			tc.assertErr(t, err)
		})
	}
}
