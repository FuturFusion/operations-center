// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"time"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkACLService struct {
	repo             NetworkACLRepo
	clusterSvc       ProvisioningClusterService
	networkACLClient NetworkACLServerClient

	now func() time.Time
}

var _ NetworkACLService = &networkACLService{}

type NetworkACLServiceOption func(s *networkACLService)

func NewNetworkACLService(repo NetworkACLRepo, clusterSvc ProvisioningClusterService, client NetworkACLServerClient, opts ...NetworkACLServiceOption) networkACLService {
	networkACLSvc := networkACLService{
		repo:             repo,
		clusterSvc:       clusterSvc,
		networkACLClient: client,

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkACLSvc)
	}

	return networkACLSvc
}

func (s networkACLService) GetAllIDsWithFilter(ctx context.Context, filter NetworkACLFilter) ([]int, error) {
	return s.repo.GetAllIDsWithFilter(ctx, filter)
}

func (s networkACLService) GetByID(ctx context.Context, id int) (NetworkACL, error) {
	return s.repo.GetByID(ctx, id)
}

func (s networkACLService) ResyncByID(ctx context.Context, id int) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkACL, err := s.repo.GetByID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, networkACL.Cluster)
		if err != nil {
			return err
		}

		retrievedNetworkACL, err := s.networkACLClient.GetNetworkACLByName(ctx, cluster.ConnectionURL, networkACL.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByID(ctx, networkACL.ID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkACL.ProjectName = retrievedNetworkACL.Project
		networkACL.Object = retrievedNetworkACL
		networkACL.LastUpdated = s.now()

		err = networkACL.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByID(ctx, networkACL)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkACLService) SyncCluster(ctx context.Context, clusterName string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, clusterName)
	if err != nil {
		return err
	}

	retrievedNetworkACLs, err := s.networkACLClient.GetNetworkACLs(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByCluster(ctx, clusterName)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedNetworkACL := range retrievedNetworkACLs {
			networkACL := NetworkACL{
				Cluster:     clusterName,
				ProjectName: retrievedNetworkACL.Project,
				Name:        retrievedNetworkACL.Name,
				Object:      retrievedNetworkACL,
				LastUpdated: s.now(),
			}

			err = networkACL.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, networkACL)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
