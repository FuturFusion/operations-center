// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkACLService struct {
	repo             NetworkACLRepo
	clusterSvc       ProvisioningClusterService
	networkACLClient NetworkACLServerClient

	clusterSyncFilterFunc func(networkACL NetworkACL) bool

	now func() time.Time
}

var _ NetworkACLService = &networkACLService{}

type NetworkACLServiceOption func(s *networkACLService)

func NetworkACLWithSyncFilter(clusterSyncFilterFunc func(networkACL NetworkACL) bool) NetworkACLServiceOption {
	return func(s *networkACLService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewNetworkACLService(repo NetworkACLRepo, clusterSvc ProvisioningClusterService, client NetworkACLServerClient, opts ...NetworkACLServiceOption) networkACLService {
	networkACLSvc := networkACLService{
		repo:             repo,
		clusterSvc:       clusterSvc,
		networkACLClient: client,

		clusterSyncFilterFunc: func(networkACL NetworkACL) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkACLSvc)
	}

	return networkACLSvc
}

func (s networkACLService) GetAllWithFilter(ctx context.Context, filter NetworkACLFilter) (NetworkACLs, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(NetworkACL{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkACLs, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkACLs NetworkACLs
	if filter.Expression != nil {
		for _, networkACL := range networkACLs {
			output, err := expr.Run(filterExpression, networkACL)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkACLs = append(filteredNetworkACLs, networkACL)
			}
		}

		return filteredNetworkACLs, nil
	}

	return networkACLs, nil
}

func (s networkACLService) GetAllUUIDsWithFilter(ctx context.Context, filter NetworkACLFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkACLsUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkACLsUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, networkACLUUID := range networkACLsUUIDs {
			output, err := expr.Run(filterExpression, Env{networkACLUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkACLsUUIDs = append(filteredNetworkACLsUUIDs, networkACLUUID)
			}
		}

		return filteredNetworkACLsUUIDs, nil
	}

	return networkACLsUUIDs, nil
}

func (s networkACLService) GetByUUID(ctx context.Context, id uuid.UUID) (NetworkACL, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s networkACLService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkACL, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, networkACL.Cluster)
		if err != nil {
			return err
		}

		retrievedNetworkACL, err := s.networkACLClient.GetNetworkACLByName(ctx, cluster.ConnectionURL, networkACL.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, networkACL.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkACL.ProjectName = retrievedNetworkACL.Project
		networkACL.Object = retrievedNetworkACL
		networkACL.LastUpdated = s.now()
		networkACL.DeriveUUID()

		err = networkACL.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, networkACL)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkACLService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedNetworkACLs, err := s.networkACLClient.GetNetworkACLs(ctx, cluster.ConnectionURL)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedNetworkACL := range retrievedNetworkACLs {
			networkACL := NetworkACL{
				Cluster:     name,
				ProjectName: retrievedNetworkACL.Project,
				Name:        retrievedNetworkACL.Name,
				Object:      retrievedNetworkACL,
				LastUpdated: s.now(),
			}

			networkACL.DeriveUUID()

			if s.clusterSyncFilterFunc(networkACL) {
				continue
			}

			err = networkACL.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, networkACL)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
