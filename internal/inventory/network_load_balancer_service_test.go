// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestNetworkLoadBalancerService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.NetworkLoadBalancerFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, nil, nil, nil, nil, inventory.NetworkLoadBalancerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkLoadBalancerHostnames, err := networkLoadBalancerSvc.GetAllIDsWithFilter(context.Background(), inventory.NetworkLoadBalancerFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, networkLoadBalancerHostnames, tc.count)
		})
	}
}

func TestNetworkLoadBalancerService_GetByID(t *testing.T) {
	tests := []struct {
		name                           string
		idArg                          int
		repoGetByIDNetworkLoadBalancer inventory.NetworkLoadBalancer
		repoGetByIDErr                 error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				ID:          1,
				ServerID:    1,
				NetworkName: "parent one",
				Name:        "one",
				Object:      incusapi.NetworkLoadBalancer{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkLoadBalancer, error) {
					return tc.repoGetByIDNetworkLoadBalancer, tc.repoGetByIDErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, nil, nil, nil, nil, inventory.NetworkLoadBalancerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			networkLoadBalancer, err := networkLoadBalancerSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDNetworkLoadBalancer, networkLoadBalancer)
		})
	}
}

func TestNetworkLoadBalancerService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                                                     string
		serverSvcGetByIDServer                                   provisioning.Server
		serverSvcGetByIDErr                                      error
		networkLoadBalancerClientGetNetworkLoadBalancerByName    incusapi.NetworkLoadBalancer
		networkLoadBalancerClientGetNetworkLoadBalancerByNameErr error
		repoGetByIDNetworkLoadBalancer                           inventory.NetworkLoadBalancer
		repoGetByIDErr                                           error
		repoUpdateByIDErr                                        error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				ID:          1,
				ServerID:    1,
				Name:        "one",
				NetworkName: "network",
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByName: incusapi.NetworkLoadBalancer{
				ListenAddress: "networkLoadBalancer one",
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - networkLoadBalancer get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server get by ID",
			repoGetByIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				ID:          1,
				ServerID:    1,
				Name:        "one",
				NetworkName: "network",
			},
			serverSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkLoadBalancer get by name",
			repoGetByIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				ID:          1,
				ServerID:    1,
				Name:        "one",
				NetworkName: "network",
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				ID:          1,
				ServerID:    1,
				Name:        "", // invalid
				NetworkName: "network",
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByName: incusapi.NetworkLoadBalancer{
				ListenAddress: "networkLoadBalancer one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDNetworkLoadBalancer: inventory.NetworkLoadBalancer{
				ID:          1,
				ServerID:    1,
				Name:        "one",
				NetworkName: "network",
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkLoadBalancerClientGetNetworkLoadBalancerByName: incusapi.NetworkLoadBalancer{
				ListenAddress: "networkLoadBalancer one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.NetworkLoadBalancer, error) {
					return tc.repoGetByIDNetworkLoadBalancer, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, networkLoadBalancer inventory.NetworkLoadBalancer) (inventory.NetworkLoadBalancer, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), networkLoadBalancer.LastUpdated)
					return inventory.NetworkLoadBalancer{}, tc.repoUpdateByIDErr
				},
			}

			serverSvc := &serviceMock.ServerServiceMock{
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
					require.Equal(t, 1, id)
					return tc.serverSvcGetByIDServer, tc.serverSvcGetByIDErr
				},
			}

			networkLoadBalancerClient := &serverMock.NetworkLoadBalancerServerClientMock{
				GetNetworkLoadBalancerByNameFunc: func(ctx context.Context, connectionURL string, networkName string, networkLoadBalancerName string) (incusapi.NetworkLoadBalancer, error) {
					require.Equal(t, tc.repoGetByIDNetworkLoadBalancer.Name, networkLoadBalancerName)
					require.Equal(t, "network", networkName)
					return tc.networkLoadBalancerClientGetNetworkLoadBalancerByName, tc.networkLoadBalancerClientGetNetworkLoadBalancerByNameErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, nil, serverSvc, networkLoadBalancerClient, nil, inventory.NetworkLoadBalancerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkLoadBalancerSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestNetworkLoadBalancerService_SyncAll(t *testing.T) {
	// Includes also SyncCluster and SyncServer
	tests := []struct {
		name                                                string
		clusterSvcGetAllClusters                            provisioning.Clusters
		clusterSvcGetAllErr                                 error
		serverSvcGetAllByClusterIDServers                   provisioning.Servers
		serverSvcGetAllByClusterIDErr                       error
		serverSvcGetByIDServer                              provisioning.Server
		serverSvcGetByIDErr                                 error
		networkClientGetNetworks                            []incusapi.Network
		networkClientGetNetworksErr                         error
		networkLoadBalancerClientGetNetworkLoadBalancers    []incusapi.NetworkLoadBalancer
		networkLoadBalancerClientGetNetworkLoadBalancersErr error
		repoDeleteByServerIDErr                             error
		repoCreateErr                                       error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "networkLoadBalancer one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name:                "error - cluster service get all",
			clusterSvcGetAllErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server service get all by cluster ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - server service get by ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network client get Networks",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkClientGetNetworksErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - networkLoadBalancer client get NetworkLoadBalancers",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancersErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - network_load_balancers delete by server ID",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "networkLoadBalancer one",
				},
			},
			repoDeleteByServerIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "", // invalid
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - networkLoadBalancer create",
			clusterSvcGetAllClusters: provisioning.Clusters{
				{
					ID:   1,
					Name: "cluster one",
				},
			},
			serverSvcGetAllByClusterIDServers: provisioning.Servers{
				{
					ID:        1,
					ClusterID: 1,
					Hostname:  "server-one",
				},
			},
			serverSvcGetByIDServer: provisioning.Server{
				ID:        1,
				ClusterID: 1,
				Hostname:  "server-one",
			},
			networkClientGetNetworks: []incusapi.Network{
				{
					Name: "network one",
				},
			},
			networkLoadBalancerClientGetNetworkLoadBalancers: []incusapi.NetworkLoadBalancer{
				{
					ListenAddress: "networkLoadBalancer one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.NetworkLoadBalancerRepoMock{
				DeleteByServerIDFunc: func(ctx context.Context, serverID int) error {
					return tc.repoDeleteByServerIDErr
				},
				CreateFunc: func(ctx context.Context, networkLoadBalancer inventory.NetworkLoadBalancer) (inventory.NetworkLoadBalancer, error) {
					return inventory.NetworkLoadBalancer{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ClusterServiceMock{
				GetAllFunc: func(ctx context.Context) (provisioning.Clusters, error) {
					return tc.clusterSvcGetAllClusters, tc.clusterSvcGetAllErr
				},
			}

			serverSvc := &serviceMock.ServerServiceMock{
				GetAllByClusterIDFunc: func(ctx context.Context, clusterID int) (provisioning.Servers, error) {
					return tc.serverSvcGetAllByClusterIDServers, tc.serverSvcGetAllByClusterIDErr
				},
				GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
					return tc.serverSvcGetByIDServer, tc.serverSvcGetByIDErr
				},
			}

			networkClient := &serverMock.NetworkServerClientMock{
				GetNetworksFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Network, error) {
					return tc.networkClientGetNetworks, tc.networkClientGetNetworksErr
				},
			}

			networkLoadBalancerClient := &serverMock.NetworkLoadBalancerServerClientMock{
				GetNetworkLoadBalancersFunc: func(ctx context.Context, connectionURL string, networkName string) ([]incusapi.NetworkLoadBalancer, error) {
					return tc.networkLoadBalancerClientGetNetworkLoadBalancers, tc.networkLoadBalancerClientGetNetworkLoadBalancersErr
				},
			}

			networkLoadBalancerSvc := inventory.NewNetworkLoadBalancerService(repo, clusterSvc, serverSvc, networkLoadBalancerClient, networkClient, inventory.NetworkLoadBalancerWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := networkLoadBalancerSvc.SyncAll(context.Background())

			// Assert
			tc.assertErr(t, err)
		})
	}
}
