// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestStorageVolumeService_GetAllIDs(t *testing.T) {
	tests := []struct {
		name             string
		repoGetAllIDs    []int
		repoGetAllIDsErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success",
			repoGetAllIDs: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "error - repo",
			repoGetAllIDsErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageVolumeRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.StorageVolumeFilter) ([]int, error) {
					return tc.repoGetAllIDs, tc.repoGetAllIDsErr
				},
			}

			storageVolumeSvc := inventory.NewStorageVolumeService(repo, nil, nil, nil, inventory.StorageVolumeWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			storageVolumeIDs, err := storageVolumeSvc.GetAllIDsWithFilter(context.Background(), inventory.StorageVolumeFilter{})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, storageVolumeIDs, tc.count)
		})
	}
}

func TestStorageVolumeService_GetByID(t *testing.T) {
	tests := []struct {
		name                     string
		idArg                    int
		repoGetByIDStorageVolume inventory.StorageVolume
		repoGetByIDErr           error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDStorageVolume: inventory.StorageVolume{
				ID:              1,
				Cluster:         "one",
				ProjectName:     "one",
				StoragePoolName: "parent one",
				Name:            "one",
				Object:          incusapi.StorageVolume{},
				LastUpdated:     time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageVolumeRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.StorageVolume, error) {
					return tc.repoGetByIDStorageVolume, tc.repoGetByIDErr
				},
			}

			storageVolumeSvc := inventory.NewStorageVolumeService(repo, nil, nil, nil, inventory.StorageVolumeWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			storageVolume, err := storageVolumeSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDStorageVolume, storageVolume)
		})
	}
}

func TestStorageVolumeService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                                         string
		clusterSvcGetByIDCluster                     provisioning.Cluster
		clusterSvcGetByIDErr                         error
		storageVolumeClientGetStorageVolumeByName    incusapi.StorageVolume
		storageVolumeClientGetStorageVolumeByNameErr error
		repoGetByIDStorageVolume                     inventory.StorageVolume
		repoGetByIDErr                               error
		repoUpdateByIDErr                            error
		repoDeleteByIDErr                            error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDStorageVolume: inventory.StorageVolume{
				ID:              1,
				Cluster:         "one",
				Name:            "one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storageVolumeClientGetStorageVolumeByName: incusapi.StorageVolume{
				Name:     "storageVolume one",
				Location: "one",
				Project:  "project one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - storageVolume get by name - not found",
			repoGetByIDStorageVolume: inventory.StorageVolume{
				ID:              1,
				Cluster:         "one",
				Name:            "one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storageVolumeClientGetStorageVolumeByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - storageVolume get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDStorageVolume: inventory.StorageVolume{
				ID:              1,
				Cluster:         "one",
				Name:            "one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storageVolume get by name",
			repoGetByIDStorageVolume: inventory.StorageVolume{
				ID:              1,
				Cluster:         "one",
				Name:            "one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storageVolumeClientGetStorageVolumeByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storageVolume get by name - not found - delete by id",
			repoGetByIDStorageVolume: inventory.StorageVolume{
				ID:              1,
				Cluster:         "one",
				Name:            "one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storageVolumeClientGetStorageVolumeByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDStorageVolume: inventory.StorageVolume{
				ID:              1,
				Cluster:         "one",
				Name:            "", // invalid
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storageVolumeClientGetStorageVolumeByName: incusapi.StorageVolume{
				Name:     "storageVolume one",
				Location: "one",
				Project:  "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDStorageVolume: inventory.StorageVolume{
				ID:              1,
				Cluster:         "one",
				Name:            "one",
				StoragePoolName: "storage_pool",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storageVolumeClientGetStorageVolumeByName: incusapi.StorageVolume{
				Name:     "storageVolume one",
				Location: "one",
				Project:  "project one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageVolumeRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.StorageVolume, error) {
					return tc.repoGetByIDStorageVolume, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, storageVolume inventory.StorageVolume) (inventory.StorageVolume, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), storageVolume.LastUpdated)
					return inventory.StorageVolume{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			storageVolumeClient := &serverMock.StorageVolumeServerClientMock{
				GetStorageVolumeByNameFunc: func(ctx context.Context, connectionURL string, storagePoolName string, storageVolumeName string, storageVolumeType string) (incusapi.StorageVolume, error) {
					require.Equal(t, tc.repoGetByIDStorageVolume.Name, storageVolumeName)
					require.Equal(t, "storage_pool", storagePoolName)
					return tc.storageVolumeClientGetStorageVolumeByName, tc.storageVolumeClientGetStorageVolumeByNameErr
				},
			}

			storageVolumeSvc := inventory.NewStorageVolumeService(repo, clusterSvc, storageVolumeClient, nil, inventory.StorageVolumeWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := storageVolumeSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestStorageVolumeService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                                    string
		clusterSvcGetByIDCluster                provisioning.Cluster
		clusterSvcGetByIDErr                    error
		storagePoolClientGetStoragePools        []incusapi.StoragePool
		storagePoolClientGetStoragePoolsErr     error
		storageVolumeClientGetStorageVolumes    []incusapi.StorageVolume
		storageVolumeClientGetStorageVolumesErr error
		repoDeleteByClusterNameErr              error
		repoCreateErr                           error
		serviceOptions                          []inventory.StorageVolumeServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
				{
					Name: "filtered",
				},
			},
			storageVolumeClientGetStorageVolumes: []incusapi.StorageVolume{
				{
					Name:     "storageVolume one",
					Location: "one",
					Project:  "project one",
				},
			},
			serviceOptions: []inventory.StorageVolumeServiceOption{
				inventory.StorageVolumeWithParentFilter(func(parent incusapi.StoragePool) bool {
					return parent.Name == "filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storagePool client get StoragePools",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePoolsErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storageVolume client get StorageVolumes",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageVolumeClientGetStorageVolumesErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - storage_volumes delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageVolumeClientGetStorageVolumes: []incusapi.StorageVolume{
				{
					Name:     "storageVolume one",
					Location: "one",
					Project:  "project one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageVolumeClientGetStorageVolumes: []incusapi.StorageVolume{
				{
					Name:     "", // invalid
					Location: "one",
					Project:  "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - storageVolume create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			storagePoolClientGetStoragePools: []incusapi.StoragePool{
				{
					Name: "storagePool one",
				},
			},
			storageVolumeClientGetStorageVolumes: []incusapi.StorageVolume{
				{
					Name:     "storageVolume one",
					Location: "one",
					Project:  "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.StorageVolumeRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, storageVolume inventory.StorageVolume) (inventory.StorageVolume, error) {
					return inventory.StorageVolume{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (provisioning.Cluster, error) {
					return tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			storagePoolClient := &serverMock.StoragePoolServerClientMock{
				GetStoragePoolsFunc: func(ctx context.Context, connectionURL string) ([]incusapi.StoragePool, error) {
					return tc.storagePoolClientGetStoragePools, tc.storagePoolClientGetStoragePoolsErr
				},
			}

			storageVolumeClient := &serverMock.StorageVolumeServerClientMock{
				GetStorageVolumesFunc: func(ctx context.Context, connectionURL string, storagePoolName string) ([]incusapi.StorageVolume, error) {
					return tc.storageVolumeClientGetStorageVolumes, tc.storageVolumeClientGetStorageVolumesErr
				},
			}

			storageVolumeSvc := inventory.NewStorageVolumeService(repo, clusterSvc, storageVolumeClient, storagePoolClient,
				append(
					tc.serviceOptions,
					inventory.StorageVolumeWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := storageVolumeSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
