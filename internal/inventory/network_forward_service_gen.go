// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkForwardService struct {
	repo                 NetworkForwardRepo
	clusterSvc           ProvisioningClusterService
	networkClient        NetworkServerClient
	networkForwardClient NetworkForwardServerClient
	isParentFiltered     func(incusapi.Network) bool

	clusterSyncFilterFunc func(networkForward NetworkForward) bool

	now func() time.Time
}

var _ NetworkForwardService = &networkForwardService{}

type NetworkForwardServiceOption func(s *networkForwardService)

func NetworkForwardWithSyncFilter(clusterSyncFilterFunc func(networkForward NetworkForward) bool) NetworkForwardServiceOption {
	return func(s *networkForwardService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NetworkForwardWithParentFilter(f func(incusapi.Network) bool) NetworkForwardServiceOption {
	return func(s *networkForwardService) {
		s.isParentFiltered = f
	}
}

func NewNetworkForwardService(repo NetworkForwardRepo, clusterSvc ProvisioningClusterService, client NetworkForwardServerClient, parentClient NetworkServerClient, opts ...NetworkForwardServiceOption) networkForwardService {
	networkForwardSvc := networkForwardService{
		repo:                 repo,
		clusterSvc:           clusterSvc,
		networkClient:        parentClient,
		networkForwardClient: client,

		clusterSyncFilterFunc: func(networkForward NetworkForward) bool {
			return false
		},

		isParentFiltered: func(_ incusapi.Network) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkForwardSvc)
	}

	return networkForwardSvc
}

func (s networkForwardService) GetAllWithFilter(ctx context.Context, filter NetworkForwardFilter) (NetworkForwards, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(NetworkForward{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkForwards, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkForwards NetworkForwards
	if filter.Expression != nil {
		for _, networkForward := range networkForwards {
			output, err := expr.Run(filterExpression, networkForward)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkForwards = append(filteredNetworkForwards, networkForward)
			}
		}

		return filteredNetworkForwards, nil
	}

	return networkForwards, nil
}

func (s networkForwardService) GetAllUUIDsWithFilter(ctx context.Context, filter NetworkForwardFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkForwardsUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkForwardsUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, networkForwardUUID := range networkForwardsUUIDs {
			output, err := expr.Run(filterExpression, Env{networkForwardUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkForwardsUUIDs = append(filteredNetworkForwardsUUIDs, networkForwardUUID)
			}
		}

		return filteredNetworkForwardsUUIDs, nil
	}

	return networkForwardsUUIDs, nil
}

func (s networkForwardService) GetByUUID(ctx context.Context, id uuid.UUID) (NetworkForward, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s networkForwardService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkForward, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		endpoint, err := s.clusterSvc.GetEndpoint(ctx, networkForward.Cluster)
		if err != nil {
			return err
		}

		retrievedNetworkForward, err := s.networkForwardClient.GetNetworkForwardByName(ctx, endpoint, networkForward.NetworkName, networkForward.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, networkForward.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkForward.Object = retrievedNetworkForward
		networkForward.LastUpdated = s.now()
		networkForward.DeriveUUID()

		err = networkForward.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, networkForward)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkForwardService) ResyncByName(ctx context.Context, clusterName string, event domain.LifecycleEvent) error {
	if event.ResourceType != "network-forward" {
		return nil
	}

	UUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, NetworkForwardFilter{
		Cluster:     &clusterName,
		NetworkName: &event.Source.ParentName,
		Name:        &event.Source.Name,
	})
	if err != nil {
		return err
	}

	if len(UUIDs) == 0 {
		// This inventory is not found, try to fetch it from source and create it.
		endpoint, err := s.clusterSvc.GetEndpoint(ctx, clusterName)
		if err != nil {
			return err
		}

		retrievedNetworkForward, err := s.networkForwardClient.GetNetworkForwardByName(ctx, endpoint, event.Source.ParentName, event.Source.Name)
		if err != nil {
			return err
		}

		networkForward := NetworkForward{
			Cluster:     clusterName,
			NetworkName: event.Source.ParentName,
			Name:        retrievedNetworkForward.ListenAddress,
			Object:      retrievedNetworkForward,
			LastUpdated: s.now(),
		}

		networkForward.DeriveUUID()

		if s.clusterSyncFilterFunc(networkForward) {
			return nil
		}

		err = networkForward.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.Create(ctx, networkForward)
		if err != nil {
			return err
		}

		return nil
	}

	var errs []error
	for _, UUID := range UUIDs {
		err := s.ResyncByUUID(ctx, UUID)
		errs = append(errs, err)
	}

	err = errors.Join(errs...)
	if err != nil {
		return fmt.Errorf("Failed to resync instance by name: %w", errors.Join(errs...))
	}

	return nil
}

func (s networkForwardService) SyncCluster(ctx context.Context, name string) error {
	endpoint, err := s.clusterSvc.GetEndpoint(ctx, name)
	if err != nil {
		return err
	}

	retrievedNetworks, err := s.networkClient.GetNetworks(ctx, endpoint)
	if err != nil {
		return err
	}

	for _, network := range retrievedNetworks {
		if s.isParentFiltered(network) {
			continue
		}

		retrievedNetworkForwards, err := s.networkForwardClient.GetNetworkForwards(ctx, endpoint, network.Name)
		if err != nil {
			return err
		}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			err = s.repo.DeleteByClusterName(ctx, name)
			if err != nil && !errors.Is(err, domain.ErrNotFound) {
				return err
			}

			for _, retrievedNetworkForward := range retrievedNetworkForwards {
				networkForward := NetworkForward{
					Cluster:     name,
					NetworkName: network.Name,
					Name:        retrievedNetworkForward.ListenAddress,
					Object:      retrievedNetworkForward,
					LastUpdated: s.now(),
				}

				networkForward.DeriveUUID()

				if s.clusterSyncFilterFunc(networkForward) {
					continue
				}

				err = networkForward.Validate()
				if err != nil {
					return err
				}

				_, err := s.repo.Create(ctx, networkForward)
				if err != nil {
					return err
				}
			}

			return nil
		})
		if err != nil {
			return err
		}
	}

	return nil
}
