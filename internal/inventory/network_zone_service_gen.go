// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/expr-lang/expr"
	"github.com/expr-lang/expr/vm"
	"github.com/google/uuid"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

type networkZoneService struct {
	repo              NetworkZoneRepo
	clusterSvc        ProvisioningClusterService
	networkZoneClient NetworkZoneServerClient

	clusterSyncFilterFunc func(networkZone NetworkZone) bool

	now func() time.Time
}

var _ NetworkZoneService = &networkZoneService{}

type NetworkZoneServiceOption func(s *networkZoneService)

func NetworkZoneWithSyncFilter(clusterSyncFilterFunc func(networkZone NetworkZone) bool) NetworkZoneServiceOption {
	return func(s *networkZoneService) {
		s.clusterSyncFilterFunc = clusterSyncFilterFunc
	}
}

func NewNetworkZoneService(repo NetworkZoneRepo, clusterSvc ProvisioningClusterService, client NetworkZoneServerClient, opts ...NetworkZoneServiceOption) networkZoneService {
	networkZoneSvc := networkZoneService{
		repo:              repo,
		clusterSvc:        clusterSvc,
		networkZoneClient: client,

		clusterSyncFilterFunc: func(networkZone NetworkZone) bool {
			return false
		},

		now: time.Now,
	}

	for _, opt := range opts {
		opt(&networkZoneSvc)
	}

	return networkZoneSvc
}

func (s networkZoneService) GetAllWithFilter(ctx context.Context, filter NetworkZoneFilter) (NetworkZones, error) {
	var filterExpression *vm.Program
	var err error

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(NetworkZone{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkZones, err := s.repo.GetAllWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkZones NetworkZones
	if filter.Expression != nil {
		for _, networkZone := range networkZones {
			output, err := expr.Run(filterExpression, networkZone)
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkZones = append(filteredNetworkZones, networkZone)
			}
		}

		return filteredNetworkZones, nil
	}

	return networkZones, nil
}

func (s networkZoneService) GetAllUUIDsWithFilter(ctx context.Context, filter NetworkZoneFilter) ([]uuid.UUID, error) {
	var filterExpression *vm.Program
	var err error

	type Env struct {
		UUID string
	}

	if filter.Expression != nil {
		filterExpression, err = expr.Compile(*filter.Expression, []expr.Option{expr.Env(Env{})}...)
		if err != nil {
			return nil, err
		}
	}

	networkZonesUUIDs, err := s.repo.GetAllUUIDsWithFilter(ctx, filter)
	if err != nil {
		return nil, err
	}

	var filteredNetworkZonesUUIDs []uuid.UUID
	if filter.Expression != nil {
		for _, networkZoneUUID := range networkZonesUUIDs {
			output, err := expr.Run(filterExpression, Env{networkZoneUUID.String()})
			if err != nil {
				return nil, err
			}

			result, ok := output.(bool)
			if !ok {
				return nil, fmt.Errorf("Filter expression %q does not evaluate to boolean result: %v", *filter.Expression, output)
			}

			if result {
				filteredNetworkZonesUUIDs = append(filteredNetworkZonesUUIDs, networkZoneUUID)
			}
		}

		return filteredNetworkZonesUUIDs, nil
	}

	return networkZonesUUIDs, nil
}

func (s networkZoneService) GetByUUID(ctx context.Context, id uuid.UUID) (NetworkZone, error) {
	return s.repo.GetByUUID(ctx, id)
}

func (s networkZoneService) ResyncByUUID(ctx context.Context, id uuid.UUID) error {
	err := transaction.Do(ctx, func(ctx context.Context) error {
		networkZone, err := s.repo.GetByUUID(ctx, id)
		if err != nil {
			return err
		}

		cluster, err := s.clusterSvc.GetByName(ctx, networkZone.Cluster)
		if err != nil {
			return err
		}

		retrievedNetworkZone, err := s.networkZoneClient.GetNetworkZoneByName(ctx, *cluster, networkZone.Name)
		if errors.Is(err, domain.ErrNotFound) {
			err = s.repo.DeleteByUUID(ctx, networkZone.UUID)
			if err != nil {
				return err
			}

			return nil
		}

		if err != nil {
			return err
		}

		networkZone.ProjectName = retrievedNetworkZone.Project
		networkZone.Object = retrievedNetworkZone
		networkZone.LastUpdated = s.now()
		networkZone.DeriveUUID()

		err = networkZone.Validate()
		if err != nil {
			return err
		}

		_, err = s.repo.UpdateByUUID(ctx, networkZone)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func (s networkZoneService) SyncCluster(ctx context.Context, name string) error {
	cluster, err := s.clusterSvc.GetByName(ctx, name)
	if err != nil {
		return err
	}

	retrievedNetworkZones, err := s.networkZoneClient.GetNetworkZones(ctx, *cluster)
	if err != nil {
		return err
	}

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = s.repo.DeleteByClusterName(ctx, name)
		if err != nil && !errors.Is(err, domain.ErrNotFound) {
			return err
		}

		for _, retrievedNetworkZone := range retrievedNetworkZones {
			networkZone := NetworkZone{
				Cluster:     name,
				ProjectName: retrievedNetworkZone.Project,
				Name:        retrievedNetworkZone.Name,
				Object:      retrievedNetworkZone,
				LastUpdated: s.now(),
			}

			networkZone.DeriveUUID()

			if s.clusterSyncFilterFunc(networkZone) {
				continue
			}

			err = networkZone.Validate()
			if err != nil {
				return err
			}

			_, err := s.repo.Create(ctx, networkZone)
			if err != nil {
				return err
			}
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
