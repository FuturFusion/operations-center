// Code generated by generate-inventory; DO NOT EDIT.

package inventory

import (
	"net/url"
	"strings"
	"time"

	"github.com/google/uuid"
	incusapi "github.com/lxc/incus/v6/shared/api"

	"github.com/FuturFusion/operations-center/internal/domain"
)

type StoragePool struct {
	ID          int
	UUID        uuid.UUID
	Cluster     string
	Name        string
	Object      incusapi.StoragePool
	LastUpdated time.Time
}

func (m *StoragePool) DeriveUUID() *StoragePool {
	identifier := strings.Join([]string{
		m.Cluster,
		m.Name,
	}, ":")

	m.UUID = uuid.NewSHA1(InventorySpaceUUID, []byte(identifier))

	return m
}

func (m StoragePool) Validate() error {
	if m.Cluster == "" {
		return domain.NewValidationErrf("Invalid StoragePool, cluster can not be empty")
	}

	if m.Name == "" {
		return domain.NewValidationErrf("Invalid StoragePool, name can not be empty")
	}

	clone := m
	clone.DeriveUUID()
	if clone.UUID != m.UUID {
		return domain.NewValidationErrf("Invalid UUID, does not match derived value")
	}

	return nil
}

type StoragePools []StoragePool

type StoragePoolFilter struct {
	Cluster    *string
	Expression *string
}

func (f StoragePoolFilter) AppendToURLValues(query url.Values) url.Values {
	if f.Cluster != nil {
		query.Add("cluster", *f.Cluster)
	}

	if f.Expression != nil {
		query.Add("filter", *f.Expression)
	}

	return query
}

func (f StoragePoolFilter) String() string {
	return f.AppendToURLValues(url.Values{}).Encode()
}
