// Code generated by generate-inventory; DO NOT EDIT.

package inventory_test

import (
	"context"
	"testing"
	"time"

	incusapi "github.com/lxc/incus/v6/shared/api"
	"github.com/stretchr/testify/require"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/inventory"
	serviceMock "github.com/FuturFusion/operations-center/internal/inventory/mock"
	repoMock "github.com/FuturFusion/operations-center/internal/inventory/repo/mock"
	serverMock "github.com/FuturFusion/operations-center/internal/inventory/server/mock"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/ptr"
	"github.com/FuturFusion/operations-center/internal/testing/boom"
)

func TestImageService_GetAllWithFilter(t *testing.T) {
	tests := []struct {
		name                    string
		filterExpression        *string
		repoGetAllWithFilter    inventory.Images
		repoGetAllWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllWithFilter: inventory.Images{
				inventory.Image{
					Name: "one",
				},
				inventory.Image{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`Name == "one"`),
			repoGetAllWithFilter: inventory.Images{
				inventory.Image{
					Name: "one",
				},
				inventory.Image{
					Name: "two",
				},
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllWithFilter: inventory.Images{
				inventory.Image{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllWithFilter: inventory.Images{
				inventory.Image{
					Name: "one",
				},
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllWithFilter: inventory.Images{
				inventory.Image{
					Name: "one",
				},
			},

			assertErr: func(tt require.TestingT, err error, i ...interface{}) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                    "error - repo",
			repoGetAllWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ImageRepoMock{
				GetAllWithFilterFunc: func(ctx context.Context, filter inventory.ImageFilter) (inventory.Images, error) {
					return tc.repoGetAllWithFilter, tc.repoGetAllWithFilterErr
				},
			}

			imageSvc := inventory.NewImageService(repo, nil, nil, inventory.ImageWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			image, err := imageSvc.GetAllWithFilter(context.Background(), inventory.ImageFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, image, tc.count)
		})
	}
}

func TestImageService_GetAllIDsWithFilter(t *testing.T) {
	tests := []struct {
		name                       string
		filterExpression           *string
		repoGetAllIDsWithFilter    []int
		repoGetAllIDsWithFilterErr error

		assertErr require.ErrorAssertionFunc
		count     int
	}{
		{
			name: "success - no filter expression",
			repoGetAllIDsWithFilter: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     2,
		},
		{
			name:             "success - with filter expression",
			filterExpression: ptr.To(`ID < 2`),
			repoGetAllIDsWithFilter: []int{
				1, 2,
			},

			assertErr: require.NoError,
			count:     1,
		},
		{
			name:             "error - invalid filter expression",
			filterExpression: ptr.To(``), // the empty expression is an invalid expression.
			repoGetAllIDsWithFilter: []int{
				1,
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - filter expression run",
			filterExpression: ptr.To(`fromBase64("~invalid")`), // invalid, returns runtime error during evauluation of the expression.
			repoGetAllIDsWithFilter: []int{
				1,
			},

			assertErr: require.Error,
			count:     0,
		},
		{
			name:             "error - non bool expression",
			filterExpression: ptr.To(`"string"`), // invalid, does evaluate to string instead of boolean.
			repoGetAllIDsWithFilter: []int{
				1,
			},

			assertErr: func(tt require.TestingT, err error, i ...interface{}) {
				require.ErrorContains(tt, err, "does not evaluate to boolean result")
			},
			count: 0,
		},
		{
			name:                       "error - repo",
			repoGetAllIDsWithFilterErr: boom.Error,

			assertErr: boom.ErrorIs,
			count:     0,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ImageRepoMock{
				GetAllIDsWithFilterFunc: func(ctx context.Context, filter inventory.ImageFilter) ([]int, error) {
					return tc.repoGetAllIDsWithFilter, tc.repoGetAllIDsWithFilterErr
				},
			}

			imageSvc := inventory.NewImageService(repo, nil, nil, inventory.ImageWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			imageIDs, err := imageSvc.GetAllIDsWithFilter(context.Background(), inventory.ImageFilter{
				Expression: tc.filterExpression,
			})

			// Assert
			tc.assertErr(t, err)
			require.Len(t, imageIDs, tc.count)
		})
	}
}

func TestImageService_GetByID(t *testing.T) {
	tests := []struct {
		name             string
		idArg            int
		repoGetByIDImage inventory.Image
		repoGetByIDErr   error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name:  "success",
			idArg: 1,
			repoGetByIDImage: inventory.Image{
				ID:          1,
				Cluster:     "one",
				ProjectName: "one",
				Name:        "one",
				Object:      incusapi.Image{},
				LastUpdated: time.Now(),
			},

			assertErr: require.NoError,
		},
		{
			name:           "error - repo",
			idArg:          1,
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ImageRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Image, error) {
					return tc.repoGetByIDImage, tc.repoGetByIDErr
				},
			}

			imageSvc := inventory.NewImageService(repo, nil, nil, inventory.ImageWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			image, err := imageSvc.GetByID(context.Background(), tc.idArg)

			// Assert
			tc.assertErr(t, err)
			require.Equal(t, tc.repoGetByIDImage, image)
		})
	}
}

func TestImageService_ResyncByID(t *testing.T) {
	tests := []struct {
		name                         string
		clusterSvcGetByIDCluster     provisioning.Cluster
		clusterSvcGetByIDErr         error
		imageClientGetImageByName    incusapi.Image
		imageClientGetImageByNameErr error
		repoGetByIDImage             inventory.Image
		repoGetByIDErr               error
		repoUpdateByIDErr            error
		repoDeleteByIDErr            error

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			repoGetByIDImage: inventory.Image{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImageByName: incusapi.Image{
				Fingerprint: "image one",
				Project:     "project one",
			},

			assertErr: require.NoError,
		},
		{
			name: "success - image get by name - not found",
			repoGetByIDImage: inventory.Image{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImageByNameErr: domain.ErrNotFound,

			assertErr: require.NoError,
		},
		{
			name:           "error - image get by ID",
			repoGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - cluster get by ID",
			repoGetByIDImage: inventory.Image{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - image get by name",
			repoGetByIDImage: inventory.Image{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImageByNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - image get by name - not found - delete by id",
			repoGetByIDImage: inventory.Image{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImageByNameErr: domain.ErrNotFound,
			repoDeleteByIDErr:            boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			repoGetByIDImage: inventory.Image{
				ID:      1,
				Cluster: "one",
				Name:    "", // invalid
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImageByName: incusapi.Image{
				Fingerprint: "image one",
				Project:     "project one",
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - update by ID",
			repoGetByIDImage: inventory.Image{
				ID:      1,
				Cluster: "one",
				Name:    "one",
			},
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImageByName: incusapi.Image{
				Fingerprint: "image one",
				Project:     "project one",
			},
			repoUpdateByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ImageRepoMock{
				GetByIDFunc: func(ctx context.Context, id int) (inventory.Image, error) {
					return tc.repoGetByIDImage, tc.repoGetByIDErr
				},
				UpdateByIDFunc: func(ctx context.Context, image inventory.Image) (inventory.Image, error) {
					require.Equal(t, time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC), image.LastUpdated)
					return inventory.Image{}, tc.repoUpdateByIDErr
				},
				DeleteByIDFunc: func(ctx context.Context, id int) error {
					return tc.repoDeleteByIDErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					require.Equal(t, "one", name)
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			imageClient := &serverMock.ImageServerClientMock{
				GetImageByNameFunc: func(ctx context.Context, connectionURL string, imageName string) (incusapi.Image, error) {
					require.Equal(t, tc.repoGetByIDImage.Name, imageName)
					return tc.imageClientGetImageByName, tc.imageClientGetImageByNameErr
				},
			}

			imageSvc := inventory.NewImageService(repo, clusterSvc, imageClient, inventory.ImageWithNow(func() time.Time {
				return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
			}))

			// Run test
			err := imageSvc.ResyncByID(context.Background(), 1)

			// Assert
			tc.assertErr(t, err)
		})
	}
}

func TestImageService_SyncAll(t *testing.T) {
	// Includes also SyncCluster
	tests := []struct {
		name                       string
		clusterSvcGetByIDCluster   provisioning.Cluster
		clusterSvcGetByIDErr       error
		imageClientGetImages       []incusapi.Image
		imageClientGetImagesErr    error
		repoDeleteByClusterNameErr error
		repoCreateErr              error
		serviceOptions             []inventory.ImageServiceOption

		assertErr require.ErrorAssertionFunc
	}{
		{
			name: "success",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImages: []incusapi.Image{
				{
					Fingerprint: "image one",
					Project:     "project one",
				},
			},

			assertErr: require.NoError,
		},
		{
			name: "success - with sync filter",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImages: []incusapi.Image{
				{
					Fingerprint: "image one",
					Project:     "project one",
				},
				{
					Fingerprint: "image filtered",
					Project:     "project one",
				},
			},
			serviceOptions: []inventory.ImageServiceOption{
				inventory.ImageWithSyncFilter(func(image inventory.Image) bool {
					return image.Name == "image filtered"
				}),
			},

			assertErr: require.NoError,
		},
		{
			name:                 "error - cluster service get by ID",
			clusterSvcGetByIDErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - image client get Images",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImagesErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - images delete by cluster ID",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImages: []incusapi.Image{
				{
					Fingerprint: "image one",
					Project:     "project one",
				},
			},
			repoDeleteByClusterNameErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
		{
			name: "error - validate",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImages: []incusapi.Image{
				{
					Fingerprint: "", // invalid
					Project:     "project one",
				},
			},

			assertErr: func(tt require.TestingT, err error, a ...any) {
				var verr domain.ErrValidation
				require.ErrorAs(tt, err, &verr, a...)
			},
		},
		{
			name: "error - image create",
			clusterSvcGetByIDCluster: provisioning.Cluster{
				Name: "cluster-one",
			},
			imageClientGetImages: []incusapi.Image{
				{
					Fingerprint: "image one",
					Project:     "project one",
				},
			},
			repoCreateErr: boom.Error,

			assertErr: boom.ErrorIs,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			repo := &repoMock.ImageRepoMock{
				DeleteByClusterNameFunc: func(ctx context.Context, clusterName string) error {
					return tc.repoDeleteByClusterNameErr
				},
				CreateFunc: func(ctx context.Context, image inventory.Image) (inventory.Image, error) {
					return inventory.Image{}, tc.repoCreateErr
				},
			}

			clusterSvc := &serviceMock.ProvisioningClusterServiceMock{
				GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
					return &tc.clusterSvcGetByIDCluster, tc.clusterSvcGetByIDErr
				},
			}

			imageClient := &serverMock.ImageServerClientMock{
				GetImagesFunc: func(ctx context.Context, connectionURL string) ([]incusapi.Image, error) {
					return tc.imageClientGetImages, tc.imageClientGetImagesErr
				},
			}

			imageSvc := inventory.NewImageService(repo, clusterSvc, imageClient,
				append(
					tc.serviceOptions,
					inventory.ImageWithNow(func() time.Time {
						return time.Date(2025, 2, 26, 8, 54, 35, 123, time.UTC)
					}),
				)...,
			)

			// Run test
			err := imageSvc.SyncCluster(context.Background(), "one")

			// Assert
			tc.assertErr(t, err)
		})
	}
}
