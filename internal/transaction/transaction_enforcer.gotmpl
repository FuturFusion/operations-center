// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package {{ .PkgName }}

import (
{{ range .Imports -}}
	{{ .Alias }} "{{ .Path }}"
{{ end -}}
)


{{ range $i, $mock := .Mocks }}

{{ $decorator := (or .TemplateData.DecoratorName (printf "%sWithTransactionEnforcer" $mock.InterfaceName)) }}

// {{$decorator}} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} that enforces a transaction.
type {{$decorator}} struct {
	_base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}
}

// New{{$decorator}} instruments an implementation of the {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} with simple logging.
func New{{$decorator}}(base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}) {{$decorator}} {
	return {{$decorator}}{
		_base: base,
	}
}

{{ range $method := $mock.Methods }}

	// {{$method.Name}} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}.
	func (_d {{$decorator}}) {{.Name}}({{.ArgList}}) ({{.ReturnArgList}}) {
		{{- $acceptsContext := false -}}
		{{- if and (gt ($method.Params | len) 0) (eq (index $method.Params 0).TypeString "context.Context") -}}
		{{- $acceptsContext = true -}}
		{{- end -}}
		{{- $returnsError := false -}}
		{{- $lastType := "" -}}
		{{- range $method.Returns -}}
		{{- $lastType = .TypeString }}
		{{- end -}}
		{{- if eq $lastType "error" -}}
		{{- $returnsError = true -}}
		{{- end -}}

		{{- if not $acceptsContext }}
		ctx := context.Background()
		{{- end }}
		{{- if not $returnsError }}
		var err error
		{{- end }}

		err = transaction.Do(ctx, func(ctx context.Context) error {
			{{ $method.ReturnArgNameList }} = _d._base.{{ $method.Name }}({{ $method.ArgCallList }})
			return err
		})

		return {{ $method.ReturnArgNameList }}
	}
{{ end }}

{{ end }}
