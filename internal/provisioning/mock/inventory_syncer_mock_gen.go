// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/domain"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure that InventorySyncerMock does implement provisioning.InventorySyncer.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.InventorySyncer = &InventorySyncerMock{}

// InventorySyncerMock is a mock implementation of provisioning.InventorySyncer.
//
//	func TestSomethingThatUsesInventorySyncer(t *testing.T) {
//
//		// make and configure a mocked provisioning.InventorySyncer
//		mockedInventorySyncer := &InventorySyncerMock{
//			ResyncByNameFunc: func(ctx context.Context, clusterName string, sourceDetails domain.LifecycleEvent) error {
//				panic("mock out the ResyncByName method")
//			},
//			SyncClusterFunc: func(ctx context.Context, clusterName string) error {
//				panic("mock out the SyncCluster method")
//			},
//		}
//
//		// use mockedInventorySyncer in code that requires provisioning.InventorySyncer
//		// and then make assertions.
//
//	}
type InventorySyncerMock struct {
	// ResyncByNameFunc mocks the ResyncByName method.
	ResyncByNameFunc func(ctx context.Context, clusterName string, sourceDetails domain.LifecycleEvent) error

	// SyncClusterFunc mocks the SyncCluster method.
	SyncClusterFunc func(ctx context.Context, clusterName string) error

	// calls tracks calls to the methods.
	calls struct {
		// ResyncByName holds details about calls to the ResyncByName method.
		ResyncByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterName is the clusterName argument value.
			ClusterName string
			// SourceDetails is the sourceDetails argument value.
			SourceDetails domain.LifecycleEvent
		}
		// SyncCluster holds details about calls to the SyncCluster method.
		SyncCluster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterName is the clusterName argument value.
			ClusterName string
		}
	}
	lockResyncByName sync.RWMutex
	lockSyncCluster  sync.RWMutex
}

// ResyncByName calls ResyncByNameFunc.
func (mock *InventorySyncerMock) ResyncByName(ctx context.Context, clusterName string, sourceDetails domain.LifecycleEvent) error {
	if mock.ResyncByNameFunc == nil {
		panic("InventorySyncerMock.ResyncByNameFunc: method is nil but InventorySyncer.ResyncByName was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ClusterName   string
		SourceDetails domain.LifecycleEvent
	}{
		Ctx:           ctx,
		ClusterName:   clusterName,
		SourceDetails: sourceDetails,
	}
	mock.lockResyncByName.Lock()
	mock.calls.ResyncByName = append(mock.calls.ResyncByName, callInfo)
	mock.lockResyncByName.Unlock()
	return mock.ResyncByNameFunc(ctx, clusterName, sourceDetails)
}

// ResyncByNameCalls gets all the calls that were made to ResyncByName.
// Check the length with:
//
//	len(mockedInventorySyncer.ResyncByNameCalls())
func (mock *InventorySyncerMock) ResyncByNameCalls() []struct {
	Ctx           context.Context
	ClusterName   string
	SourceDetails domain.LifecycleEvent
} {
	var calls []struct {
		Ctx           context.Context
		ClusterName   string
		SourceDetails domain.LifecycleEvent
	}
	mock.lockResyncByName.RLock()
	calls = mock.calls.ResyncByName
	mock.lockResyncByName.RUnlock()
	return calls
}

// SyncCluster calls SyncClusterFunc.
func (mock *InventorySyncerMock) SyncCluster(ctx context.Context, clusterName string) error {
	if mock.SyncClusterFunc == nil {
		panic("InventorySyncerMock.SyncClusterFunc: method is nil but InventorySyncer.SyncCluster was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ClusterName string
	}{
		Ctx:         ctx,
		ClusterName: clusterName,
	}
	mock.lockSyncCluster.Lock()
	mock.calls.SyncCluster = append(mock.calls.SyncCluster, callInfo)
	mock.lockSyncCluster.Unlock()
	return mock.SyncClusterFunc(ctx, clusterName)
}

// SyncClusterCalls gets all the calls that were made to SyncCluster.
// Check the length with:
//
//	len(mockedInventorySyncer.SyncClusterCalls())
func (mock *InventorySyncerMock) SyncClusterCalls() []struct {
	Ctx         context.Context
	ClusterName string
} {
	var calls []struct {
		Ctx         context.Context
		ClusterName string
	}
	mock.lockSyncCluster.RLock()
	calls = mock.calls.SyncCluster
	mock.lockSyncCluster.RUnlock()
	return calls
}
