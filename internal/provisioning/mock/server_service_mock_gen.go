// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure, that ServerServiceMock does implement provisioning.ServerService.
// If this is not the case, regenerate this file with moq.
var _ provisioning.ServerService = &ServerServiceMock{}

// ServerServiceMock is a mock implementation of provisioning.ServerService.
//
//	func TestSomethingThatUsesServerService(t *testing.T) {
//
//		// make and configure a mocked provisioning.ServerService
//		mockedServerService := &ServerServiceMock{
//			CreateFunc: func(ctx context.Context, server provisioning.Server) (provisioning.Server, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the DeleteByName method")
//			},
//			GetAllFunc: func(ctx context.Context) (provisioning.Servers, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllByClusterIDFunc: func(ctx context.Context, clusterID int) (provisioning.Servers, error) {
//				panic("mock out the GetAllByClusterID method")
//			},
//			GetAllNamesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllNames method")
//			},
//			GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (provisioning.Server, error) {
//				panic("mock out the GetByName method")
//			},
//			RenameByNameFunc: func(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error) {
//				panic("mock out the RenameByName method")
//			},
//			UpdateByNameFunc: func(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error) {
//				panic("mock out the UpdateByName method")
//			},
//		}
//
//		// use mockedServerService in code that requires provisioning.ServerService
//		// and then make assertions.
//
//	}
type ServerServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, server provisioning.Server) (provisioning.Server, error)

	// DeleteByNameFunc mocks the DeleteByName method.
	DeleteByNameFunc func(ctx context.Context, name string) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Servers, error)

	// GetAllByClusterIDFunc mocks the GetAllByClusterID method.
	GetAllByClusterIDFunc func(ctx context.Context, clusterID int) (provisioning.Servers, error)

	// GetAllNamesFunc mocks the GetAllNames method.
	GetAllNamesFunc func(ctx context.Context) ([]string, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int) (provisioning.Server, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (provisioning.Server, error)

	// RenameByNameFunc mocks the RenameByName method.
	RenameByNameFunc func(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error)

	// UpdateByNameFunc mocks the UpdateByName method.
	UpdateByNameFunc func(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
		// DeleteByName holds details about calls to the DeleteByName method.
		DeleteByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllByClusterID holds details about calls to the GetAllByClusterID method.
		GetAllByClusterID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterID is the clusterID argument value.
			ClusterID int
		}
		// GetAllNames holds details about calls to the GetAllNames method.
		GetAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// RenameByName holds details about calls to the RenameByName method.
		RenameByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Server is the server argument value.
			Server provisioning.Server
		}
		// UpdateByName holds details about calls to the UpdateByName method.
		UpdateByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Server is the server argument value.
			Server provisioning.Server
		}
	}
	lockCreate            sync.RWMutex
	lockDeleteByName      sync.RWMutex
	lockGetAll            sync.RWMutex
	lockGetAllByClusterID sync.RWMutex
	lockGetAllNames       sync.RWMutex
	lockGetByID           sync.RWMutex
	lockGetByName         sync.RWMutex
	lockRenameByName      sync.RWMutex
	lockUpdateByName      sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ServerServiceMock) Create(ctx context.Context, server provisioning.Server) (provisioning.Server, error) {
	if mock.CreateFunc == nil {
		panic("ServerServiceMock.CreateFunc: method is nil but ServerService.Create was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, server)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedServerService.CreateCalls())
func (mock *ServerServiceMock) CreateCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByName calls DeleteByNameFunc.
func (mock *ServerServiceMock) DeleteByName(ctx context.Context, name string) error {
	if mock.DeleteByNameFunc == nil {
		panic("ServerServiceMock.DeleteByNameFunc: method is nil but ServerService.DeleteByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockDeleteByName.Lock()
	mock.calls.DeleteByName = append(mock.calls.DeleteByName, callInfo)
	mock.lockDeleteByName.Unlock()
	return mock.DeleteByNameFunc(ctx, name)
}

// DeleteByNameCalls gets all the calls that were made to DeleteByName.
// Check the length with:
//
//	len(mockedServerService.DeleteByNameCalls())
func (mock *ServerServiceMock) DeleteByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockDeleteByName.RLock()
	calls = mock.calls.DeleteByName
	mock.lockDeleteByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *ServerServiceMock) GetAll(ctx context.Context) (provisioning.Servers, error) {
	if mock.GetAllFunc == nil {
		panic("ServerServiceMock.GetAllFunc: method is nil but ServerService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedServerService.GetAllCalls())
func (mock *ServerServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllByClusterID calls GetAllByClusterIDFunc.
func (mock *ServerServiceMock) GetAllByClusterID(ctx context.Context, clusterID int) (provisioning.Servers, error) {
	if mock.GetAllByClusterIDFunc == nil {
		panic("ServerServiceMock.GetAllByClusterIDFunc: method is nil but ServerService.GetAllByClusterID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ClusterID int
	}{
		Ctx:       ctx,
		ClusterID: clusterID,
	}
	mock.lockGetAllByClusterID.Lock()
	mock.calls.GetAllByClusterID = append(mock.calls.GetAllByClusterID, callInfo)
	mock.lockGetAllByClusterID.Unlock()
	return mock.GetAllByClusterIDFunc(ctx, clusterID)
}

// GetAllByClusterIDCalls gets all the calls that were made to GetAllByClusterID.
// Check the length with:
//
//	len(mockedServerService.GetAllByClusterIDCalls())
func (mock *ServerServiceMock) GetAllByClusterIDCalls() []struct {
	Ctx       context.Context
	ClusterID int
} {
	var calls []struct {
		Ctx       context.Context
		ClusterID int
	}
	mock.lockGetAllByClusterID.RLock()
	calls = mock.calls.GetAllByClusterID
	mock.lockGetAllByClusterID.RUnlock()
	return calls
}

// GetAllNames calls GetAllNamesFunc.
func (mock *ServerServiceMock) GetAllNames(ctx context.Context) ([]string, error) {
	if mock.GetAllNamesFunc == nil {
		panic("ServerServiceMock.GetAllNamesFunc: method is nil but ServerService.GetAllNames was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllNames.Lock()
	mock.calls.GetAllNames = append(mock.calls.GetAllNames, callInfo)
	mock.lockGetAllNames.Unlock()
	return mock.GetAllNamesFunc(ctx)
}

// GetAllNamesCalls gets all the calls that were made to GetAllNames.
// Check the length with:
//
//	len(mockedServerService.GetAllNamesCalls())
func (mock *ServerServiceMock) GetAllNamesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllNames.RLock()
	calls = mock.calls.GetAllNames
	mock.lockGetAllNames.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *ServerServiceMock) GetByID(ctx context.Context, id int) (provisioning.Server, error) {
	if mock.GetByIDFunc == nil {
		panic("ServerServiceMock.GetByIDFunc: method is nil but ServerService.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedServerService.GetByIDCalls())
func (mock *ServerServiceMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *ServerServiceMock) GetByName(ctx context.Context, name string) (provisioning.Server, error) {
	if mock.GetByNameFunc == nil {
		panic("ServerServiceMock.GetByNameFunc: method is nil but ServerService.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedServerService.GetByNameCalls())
func (mock *ServerServiceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// RenameByName calls RenameByNameFunc.
func (mock *ServerServiceMock) RenameByName(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error) {
	if mock.RenameByNameFunc == nil {
		panic("ServerServiceMock.RenameByNameFunc: method is nil but ServerService.RenameByName was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Name   string
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Name:   name,
		Server: server,
	}
	mock.lockRenameByName.Lock()
	mock.calls.RenameByName = append(mock.calls.RenameByName, callInfo)
	mock.lockRenameByName.Unlock()
	return mock.RenameByNameFunc(ctx, name, server)
}

// RenameByNameCalls gets all the calls that were made to RenameByName.
// Check the length with:
//
//	len(mockedServerService.RenameByNameCalls())
func (mock *ServerServiceMock) RenameByNameCalls() []struct {
	Ctx    context.Context
	Name   string
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Name   string
		Server provisioning.Server
	}
	mock.lockRenameByName.RLock()
	calls = mock.calls.RenameByName
	mock.lockRenameByName.RUnlock()
	return calls
}

// UpdateByName calls UpdateByNameFunc.
func (mock *ServerServiceMock) UpdateByName(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error) {
	if mock.UpdateByNameFunc == nil {
		panic("ServerServiceMock.UpdateByNameFunc: method is nil but ServerService.UpdateByName was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Name   string
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Name:   name,
		Server: server,
	}
	mock.lockUpdateByName.Lock()
	mock.calls.UpdateByName = append(mock.calls.UpdateByName, callInfo)
	mock.lockUpdateByName.Unlock()
	return mock.UpdateByNameFunc(ctx, name, server)
}

// UpdateByNameCalls gets all the calls that were made to UpdateByName.
// Check the length with:
//
//	len(mockedServerService.UpdateByNameCalls())
func (mock *ServerServiceMock) UpdateByNameCalls() []struct {
	Ctx    context.Context
	Name   string
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Name   string
		Server provisioning.Server
	}
	mock.lockUpdateByName.RLock()
	calls = mock.calls.UpdateByName
	mock.lockUpdateByName.RUnlock()
	return calls
}
