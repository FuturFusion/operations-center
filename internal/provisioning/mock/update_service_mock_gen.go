// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"archive/tar"
	"context"
	"io"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// Ensure that UpdateServiceMock does implement provisioning.UpdateService.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.UpdateService = &UpdateServiceMock{}

// UpdateServiceMock is a mock implementation of provisioning.UpdateService.
//
//	func TestSomethingThatUsesUpdateService(t *testing.T) {
//
//		// make and configure a mocked provisioning.UpdateService
//		mockedUpdateService := &UpdateServiceMock{
//			CleanupAllFunc: func(ctx context.Context) error {
//				panic("mock out the CleanupAll method")
//			},
//			CreateFromArchiveFunc: func(ctx context.Context, tarReader *tar.Reader) (uuid.UUID, error) {
//				panic("mock out the CreateFromArchive method")
//			},
//			GetAllFunc: func(ctx context.Context) (provisioning.Updates, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllUUIDsFunc: func(ctx context.Context) ([]uuid.UUID, error) {
//				panic("mock out the GetAllUUIDs method")
//			},
//			GetAllUUIDsWithFilterFunc: func(ctx context.Context, filter provisioning.UpdateFilter) ([]uuid.UUID, error) {
//				panic("mock out the GetAllUUIDsWithFilter method")
//			},
//			GetAllWithFilterFunc: func(ctx context.Context, filter provisioning.UpdateFilter) (provisioning.Updates, error) {
//				panic("mock out the GetAllWithFilter method")
//			},
//			GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (*provisioning.Update, error) {
//				panic("mock out the GetByUUID method")
//			},
//			GetUpdateAllFilesFunc: func(ctx context.Context, id uuid.UUID) (provisioning.UpdateFiles, error) {
//				panic("mock out the GetUpdateAllFiles method")
//			},
//			GetUpdateFileByFilenameFunc: func(ctx context.Context, id uuid.UUID, filename string) (io.ReadCloser, int, error) {
//				panic("mock out the GetUpdateFileByFilename method")
//			},
//			PrunePendingFunc: func(ctx context.Context) error {
//				panic("mock out the PrunePending method")
//			},
//			RefreshFunc: func(ctx context.Context) error {
//				panic("mock out the Refresh method")
//			},
//		}
//
//		// use mockedUpdateService in code that requires provisioning.UpdateService
//		// and then make assertions.
//
//	}
type UpdateServiceMock struct {
	// CleanupAllFunc mocks the CleanupAll method.
	CleanupAllFunc func(ctx context.Context) error

	// CreateFromArchiveFunc mocks the CreateFromArchive method.
	CreateFromArchiveFunc func(ctx context.Context, tarReader *tar.Reader) (uuid.UUID, error)

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Updates, error)

	// GetAllUUIDsFunc mocks the GetAllUUIDs method.
	GetAllUUIDsFunc func(ctx context.Context) ([]uuid.UUID, error)

	// GetAllUUIDsWithFilterFunc mocks the GetAllUUIDsWithFilter method.
	GetAllUUIDsWithFilterFunc func(ctx context.Context, filter provisioning.UpdateFilter) ([]uuid.UUID, error)

	// GetAllWithFilterFunc mocks the GetAllWithFilter method.
	GetAllWithFilterFunc func(ctx context.Context, filter provisioning.UpdateFilter) (provisioning.Updates, error)

	// GetByUUIDFunc mocks the GetByUUID method.
	GetByUUIDFunc func(ctx context.Context, id uuid.UUID) (*provisioning.Update, error)

	// GetUpdateAllFilesFunc mocks the GetUpdateAllFiles method.
	GetUpdateAllFilesFunc func(ctx context.Context, id uuid.UUID) (provisioning.UpdateFiles, error)

	// GetUpdateFileByFilenameFunc mocks the GetUpdateFileByFilename method.
	GetUpdateFileByFilenameFunc func(ctx context.Context, id uuid.UUID, filename string) (io.ReadCloser, int, error)

	// PrunePendingFunc mocks the PrunePending method.
	PrunePendingFunc func(ctx context.Context) error

	// RefreshFunc mocks the Refresh method.
	RefreshFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// CleanupAll holds details about calls to the CleanupAll method.
		CleanupAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CreateFromArchive holds details about calls to the CreateFromArchive method.
		CreateFromArchive []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TarReader is the tarReader argument value.
			TarReader *tar.Reader
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllUUIDs holds details about calls to the GetAllUUIDs method.
		GetAllUUIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllUUIDsWithFilter holds details about calls to the GetAllUUIDsWithFilter method.
		GetAllUUIDsWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter provisioning.UpdateFilter
		}
		// GetAllWithFilter holds details about calls to the GetAllWithFilter method.
		GetAllWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter provisioning.UpdateFilter
		}
		// GetByUUID holds details about calls to the GetByUUID method.
		GetByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetUpdateAllFiles holds details about calls to the GetUpdateAllFiles method.
		GetUpdateAllFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetUpdateFileByFilename holds details about calls to the GetUpdateFileByFilename method.
		GetUpdateFileByFilename []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Filename is the filename argument value.
			Filename string
		}
		// PrunePending holds details about calls to the PrunePending method.
		PrunePending []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Refresh holds details about calls to the Refresh method.
		Refresh []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCleanupAll              sync.RWMutex
	lockCreateFromArchive       sync.RWMutex
	lockGetAll                  sync.RWMutex
	lockGetAllUUIDs             sync.RWMutex
	lockGetAllUUIDsWithFilter   sync.RWMutex
	lockGetAllWithFilter        sync.RWMutex
	lockGetByUUID               sync.RWMutex
	lockGetUpdateAllFiles       sync.RWMutex
	lockGetUpdateFileByFilename sync.RWMutex
	lockPrunePending            sync.RWMutex
	lockRefresh                 sync.RWMutex
}

// CleanupAll calls CleanupAllFunc.
func (mock *UpdateServiceMock) CleanupAll(ctx context.Context) error {
	if mock.CleanupAllFunc == nil {
		panic("UpdateServiceMock.CleanupAllFunc: method is nil but UpdateService.CleanupAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCleanupAll.Lock()
	mock.calls.CleanupAll = append(mock.calls.CleanupAll, callInfo)
	mock.lockCleanupAll.Unlock()
	return mock.CleanupAllFunc(ctx)
}

// CleanupAllCalls gets all the calls that were made to CleanupAll.
// Check the length with:
//
//	len(mockedUpdateService.CleanupAllCalls())
func (mock *UpdateServiceMock) CleanupAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCleanupAll.RLock()
	calls = mock.calls.CleanupAll
	mock.lockCleanupAll.RUnlock()
	return calls
}

// CreateFromArchive calls CreateFromArchiveFunc.
func (mock *UpdateServiceMock) CreateFromArchive(ctx context.Context, tarReader *tar.Reader) (uuid.UUID, error) {
	if mock.CreateFromArchiveFunc == nil {
		panic("UpdateServiceMock.CreateFromArchiveFunc: method is nil but UpdateService.CreateFromArchive was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		TarReader *tar.Reader
	}{
		Ctx:       ctx,
		TarReader: tarReader,
	}
	mock.lockCreateFromArchive.Lock()
	mock.calls.CreateFromArchive = append(mock.calls.CreateFromArchive, callInfo)
	mock.lockCreateFromArchive.Unlock()
	return mock.CreateFromArchiveFunc(ctx, tarReader)
}

// CreateFromArchiveCalls gets all the calls that were made to CreateFromArchive.
// Check the length with:
//
//	len(mockedUpdateService.CreateFromArchiveCalls())
func (mock *UpdateServiceMock) CreateFromArchiveCalls() []struct {
	Ctx       context.Context
	TarReader *tar.Reader
} {
	var calls []struct {
		Ctx       context.Context
		TarReader *tar.Reader
	}
	mock.lockCreateFromArchive.RLock()
	calls = mock.calls.CreateFromArchive
	mock.lockCreateFromArchive.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *UpdateServiceMock) GetAll(ctx context.Context) (provisioning.Updates, error) {
	if mock.GetAllFunc == nil {
		panic("UpdateServiceMock.GetAllFunc: method is nil but UpdateService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedUpdateService.GetAllCalls())
func (mock *UpdateServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllUUIDs calls GetAllUUIDsFunc.
func (mock *UpdateServiceMock) GetAllUUIDs(ctx context.Context) ([]uuid.UUID, error) {
	if mock.GetAllUUIDsFunc == nil {
		panic("UpdateServiceMock.GetAllUUIDsFunc: method is nil but UpdateService.GetAllUUIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUUIDs.Lock()
	mock.calls.GetAllUUIDs = append(mock.calls.GetAllUUIDs, callInfo)
	mock.lockGetAllUUIDs.Unlock()
	return mock.GetAllUUIDsFunc(ctx)
}

// GetAllUUIDsCalls gets all the calls that were made to GetAllUUIDs.
// Check the length with:
//
//	len(mockedUpdateService.GetAllUUIDsCalls())
func (mock *UpdateServiceMock) GetAllUUIDsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUUIDs.RLock()
	calls = mock.calls.GetAllUUIDs
	mock.lockGetAllUUIDs.RUnlock()
	return calls
}

// GetAllUUIDsWithFilter calls GetAllUUIDsWithFilterFunc.
func (mock *UpdateServiceMock) GetAllUUIDsWithFilter(ctx context.Context, filter provisioning.UpdateFilter) ([]uuid.UUID, error) {
	if mock.GetAllUUIDsWithFilterFunc == nil {
		panic("UpdateServiceMock.GetAllUUIDsWithFilterFunc: method is nil but UpdateService.GetAllUUIDsWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter provisioning.UpdateFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllUUIDsWithFilter.Lock()
	mock.calls.GetAllUUIDsWithFilter = append(mock.calls.GetAllUUIDsWithFilter, callInfo)
	mock.lockGetAllUUIDsWithFilter.Unlock()
	return mock.GetAllUUIDsWithFilterFunc(ctx, filter)
}

// GetAllUUIDsWithFilterCalls gets all the calls that were made to GetAllUUIDsWithFilter.
// Check the length with:
//
//	len(mockedUpdateService.GetAllUUIDsWithFilterCalls())
func (mock *UpdateServiceMock) GetAllUUIDsWithFilterCalls() []struct {
	Ctx    context.Context
	Filter provisioning.UpdateFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter provisioning.UpdateFilter
	}
	mock.lockGetAllUUIDsWithFilter.RLock()
	calls = mock.calls.GetAllUUIDsWithFilter
	mock.lockGetAllUUIDsWithFilter.RUnlock()
	return calls
}

// GetAllWithFilter calls GetAllWithFilterFunc.
func (mock *UpdateServiceMock) GetAllWithFilter(ctx context.Context, filter provisioning.UpdateFilter) (provisioning.Updates, error) {
	if mock.GetAllWithFilterFunc == nil {
		panic("UpdateServiceMock.GetAllWithFilterFunc: method is nil but UpdateService.GetAllWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter provisioning.UpdateFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllWithFilter.Lock()
	mock.calls.GetAllWithFilter = append(mock.calls.GetAllWithFilter, callInfo)
	mock.lockGetAllWithFilter.Unlock()
	return mock.GetAllWithFilterFunc(ctx, filter)
}

// GetAllWithFilterCalls gets all the calls that were made to GetAllWithFilter.
// Check the length with:
//
//	len(mockedUpdateService.GetAllWithFilterCalls())
func (mock *UpdateServiceMock) GetAllWithFilterCalls() []struct {
	Ctx    context.Context
	Filter provisioning.UpdateFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter provisioning.UpdateFilter
	}
	mock.lockGetAllWithFilter.RLock()
	calls = mock.calls.GetAllWithFilter
	mock.lockGetAllWithFilter.RUnlock()
	return calls
}

// GetByUUID calls GetByUUIDFunc.
func (mock *UpdateServiceMock) GetByUUID(ctx context.Context, id uuid.UUID) (*provisioning.Update, error) {
	if mock.GetByUUIDFunc == nil {
		panic("UpdateServiceMock.GetByUUIDFunc: method is nil but UpdateService.GetByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByUUID.Lock()
	mock.calls.GetByUUID = append(mock.calls.GetByUUID, callInfo)
	mock.lockGetByUUID.Unlock()
	return mock.GetByUUIDFunc(ctx, id)
}

// GetByUUIDCalls gets all the calls that were made to GetByUUID.
// Check the length with:
//
//	len(mockedUpdateService.GetByUUIDCalls())
func (mock *UpdateServiceMock) GetByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByUUID.RLock()
	calls = mock.calls.GetByUUID
	mock.lockGetByUUID.RUnlock()
	return calls
}

// GetUpdateAllFiles calls GetUpdateAllFilesFunc.
func (mock *UpdateServiceMock) GetUpdateAllFiles(ctx context.Context, id uuid.UUID) (provisioning.UpdateFiles, error) {
	if mock.GetUpdateAllFilesFunc == nil {
		panic("UpdateServiceMock.GetUpdateAllFilesFunc: method is nil but UpdateService.GetUpdateAllFiles was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUpdateAllFiles.Lock()
	mock.calls.GetUpdateAllFiles = append(mock.calls.GetUpdateAllFiles, callInfo)
	mock.lockGetUpdateAllFiles.Unlock()
	return mock.GetUpdateAllFilesFunc(ctx, id)
}

// GetUpdateAllFilesCalls gets all the calls that were made to GetUpdateAllFiles.
// Check the length with:
//
//	len(mockedUpdateService.GetUpdateAllFilesCalls())
func (mock *UpdateServiceMock) GetUpdateAllFilesCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetUpdateAllFiles.RLock()
	calls = mock.calls.GetUpdateAllFiles
	mock.lockGetUpdateAllFiles.RUnlock()
	return calls
}

// GetUpdateFileByFilename calls GetUpdateFileByFilenameFunc.
func (mock *UpdateServiceMock) GetUpdateFileByFilename(ctx context.Context, id uuid.UUID, filename string) (io.ReadCloser, int, error) {
	if mock.GetUpdateFileByFilenameFunc == nil {
		panic("UpdateServiceMock.GetUpdateFileByFilenameFunc: method is nil but UpdateService.GetUpdateFileByFilename was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ID       uuid.UUID
		Filename string
	}{
		Ctx:      ctx,
		ID:       id,
		Filename: filename,
	}
	mock.lockGetUpdateFileByFilename.Lock()
	mock.calls.GetUpdateFileByFilename = append(mock.calls.GetUpdateFileByFilename, callInfo)
	mock.lockGetUpdateFileByFilename.Unlock()
	return mock.GetUpdateFileByFilenameFunc(ctx, id, filename)
}

// GetUpdateFileByFilenameCalls gets all the calls that were made to GetUpdateFileByFilename.
// Check the length with:
//
//	len(mockedUpdateService.GetUpdateFileByFilenameCalls())
func (mock *UpdateServiceMock) GetUpdateFileByFilenameCalls() []struct {
	Ctx      context.Context
	ID       uuid.UUID
	Filename string
} {
	var calls []struct {
		Ctx      context.Context
		ID       uuid.UUID
		Filename string
	}
	mock.lockGetUpdateFileByFilename.RLock()
	calls = mock.calls.GetUpdateFileByFilename
	mock.lockGetUpdateFileByFilename.RUnlock()
	return calls
}

// PrunePending calls PrunePendingFunc.
func (mock *UpdateServiceMock) PrunePending(ctx context.Context) error {
	if mock.PrunePendingFunc == nil {
		panic("UpdateServiceMock.PrunePendingFunc: method is nil but UpdateService.PrunePending was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPrunePending.Lock()
	mock.calls.PrunePending = append(mock.calls.PrunePending, callInfo)
	mock.lockPrunePending.Unlock()
	return mock.PrunePendingFunc(ctx)
}

// PrunePendingCalls gets all the calls that were made to PrunePending.
// Check the length with:
//
//	len(mockedUpdateService.PrunePendingCalls())
func (mock *UpdateServiceMock) PrunePendingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPrunePending.RLock()
	calls = mock.calls.PrunePending
	mock.lockPrunePending.RUnlock()
	return calls
}

// Refresh calls RefreshFunc.
func (mock *UpdateServiceMock) Refresh(ctx context.Context) error {
	if mock.RefreshFunc == nil {
		panic("UpdateServiceMock.RefreshFunc: method is nil but UpdateService.Refresh was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRefresh.Lock()
	mock.calls.Refresh = append(mock.calls.Refresh, callInfo)
	mock.lockRefresh.Unlock()
	return mock.RefreshFunc(ctx)
}

// RefreshCalls gets all the calls that were made to Refresh.
// Check the length with:
//
//	len(mockedUpdateService.RefreshCalls())
func (mock *UpdateServiceMock) RefreshCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRefresh.RLock()
	calls = mock.calls.Refresh
	mock.lockRefresh.RUnlock()
	return calls
}
