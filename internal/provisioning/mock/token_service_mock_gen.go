// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"io"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
	"github.com/google/uuid"
)

// Ensure that TokenServiceMock does implement provisioning.TokenService.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.TokenService = &TokenServiceMock{}

// TokenServiceMock is a mock implementation of provisioning.TokenService.
//
//	func TestSomethingThatUsesTokenService(t *testing.T) {
//
//		// make and configure a mocked provisioning.TokenService
//		mockedTokenService := &TokenServiceMock{
//			ConsumeFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the Consume method")
//			},
//			CreateFunc: func(ctx context.Context, token provisioning.Token) (provisioning.Token, error) {
//				panic("mock out the Create method")
//			},
//			CreateTokenSeedFunc: func(ctx context.Context, tokenSeedConfig provisioning.TokenSeed) (provisioning.TokenSeed, error) {
//				panic("mock out the CreateTokenSeed method")
//			},
//			DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByUUID method")
//			},
//			DeleteTokenSeedByNameFunc: func(ctx context.Context, id uuid.UUID, name string) error {
//				panic("mock out the DeleteTokenSeedByName method")
//			},
//			GetAllFunc: func(ctx context.Context) (provisioning.Tokens, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllUUIDsFunc: func(ctx context.Context) ([]uuid.UUID, error) {
//				panic("mock out the GetAllUUIDs method")
//			},
//			GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (*provisioning.Token, error) {
//				panic("mock out the GetByUUID method")
//			},
//			GetPreSeedImageFunc: func(ctx context.Context, id uuid.UUID, imageType api.ImageType, architecture api.Architecture, seedConfig provisioning.TokenImageSeedConfigs) (io.ReadCloser, error) {
//				panic("mock out the GetPreSeedImage method")
//			},
//			GetTokenImageFromTokenSeedFunc: func(ctx context.Context, id uuid.UUID, name string, imageType api.ImageType, architecture api.Architecture) (io.ReadCloser, error) {
//				panic("mock out the GetTokenImageFromTokenSeed method")
//			},
//			GetTokenSeedAllFunc: func(ctx context.Context, id uuid.UUID) (provisioning.TokenSeeds, error) {
//				panic("mock out the GetTokenSeedAll method")
//			},
//			GetTokenSeedAllNamesFunc: func(ctx context.Context, id uuid.UUID) ([]string, error) {
//				panic("mock out the GetTokenSeedAllNames method")
//			},
//			GetTokenSeedByNameFunc: func(ctx context.Context, id uuid.UUID, name string) (*provisioning.TokenSeed, error) {
//				panic("mock out the GetTokenSeedByName method")
//			},
//			UpdateFunc: func(ctx context.Context, token provisioning.Token) error {
//				panic("mock out the Update method")
//			},
//			UpdateTokenSeedFunc: func(ctx context.Context, tokenSeed provisioning.TokenSeed) error {
//				panic("mock out the UpdateTokenSeed method")
//			},
//		}
//
//		// use mockedTokenService in code that requires provisioning.TokenService
//		// and then make assertions.
//
//	}
type TokenServiceMock struct {
	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func(ctx context.Context, id uuid.UUID) error

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, token provisioning.Token) (provisioning.Token, error)

	// CreateTokenSeedFunc mocks the CreateTokenSeed method.
	CreateTokenSeedFunc func(ctx context.Context, tokenSeedConfig provisioning.TokenSeed) (provisioning.TokenSeed, error)

	// DeleteByUUIDFunc mocks the DeleteByUUID method.
	DeleteByUUIDFunc func(ctx context.Context, id uuid.UUID) error

	// DeleteTokenSeedByNameFunc mocks the DeleteTokenSeedByName method.
	DeleteTokenSeedByNameFunc func(ctx context.Context, id uuid.UUID, name string) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Tokens, error)

	// GetAllUUIDsFunc mocks the GetAllUUIDs method.
	GetAllUUIDsFunc func(ctx context.Context) ([]uuid.UUID, error)

	// GetByUUIDFunc mocks the GetByUUID method.
	GetByUUIDFunc func(ctx context.Context, id uuid.UUID) (*provisioning.Token, error)

	// GetPreSeedImageFunc mocks the GetPreSeedImage method.
	GetPreSeedImageFunc func(ctx context.Context, id uuid.UUID, imageType api.ImageType, architecture api.Architecture, seedConfig provisioning.TokenImageSeedConfigs) (io.ReadCloser, error)

	// GetTokenImageFromTokenSeedFunc mocks the GetTokenImageFromTokenSeed method.
	GetTokenImageFromTokenSeedFunc func(ctx context.Context, id uuid.UUID, name string, imageType api.ImageType, architecture api.Architecture) (io.ReadCloser, error)

	// GetTokenSeedAllFunc mocks the GetTokenSeedAll method.
	GetTokenSeedAllFunc func(ctx context.Context, id uuid.UUID) (provisioning.TokenSeeds, error)

	// GetTokenSeedAllNamesFunc mocks the GetTokenSeedAllNames method.
	GetTokenSeedAllNamesFunc func(ctx context.Context, id uuid.UUID) ([]string, error)

	// GetTokenSeedByNameFunc mocks the GetTokenSeedByName method.
	GetTokenSeedByNameFunc func(ctx context.Context, id uuid.UUID, name string) (*provisioning.TokenSeed, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, token provisioning.Token) error

	// UpdateTokenSeedFunc mocks the UpdateTokenSeed method.
	UpdateTokenSeedFunc func(ctx context.Context, tokenSeed provisioning.TokenSeed) error

	// calls tracks calls to the methods.
	calls struct {
		// Consume holds details about calls to the Consume method.
		Consume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token provisioning.Token
		}
		// CreateTokenSeed holds details about calls to the CreateTokenSeed method.
		CreateTokenSeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenSeedConfig is the tokenSeedConfig argument value.
			TokenSeedConfig provisioning.TokenSeed
		}
		// DeleteByUUID holds details about calls to the DeleteByUUID method.
		DeleteByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteTokenSeedByName holds details about calls to the DeleteTokenSeedByName method.
		DeleteTokenSeedByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllUUIDs holds details about calls to the GetAllUUIDs method.
		GetAllUUIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByUUID holds details about calls to the GetByUUID method.
		GetByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetPreSeedImage holds details about calls to the GetPreSeedImage method.
		GetPreSeedImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// ImageType is the imageType argument value.
			ImageType api.ImageType
			// Architecture is the architecture argument value.
			Architecture api.Architecture
			// SeedConfig is the seedConfig argument value.
			SeedConfig provisioning.TokenImageSeedConfigs
		}
		// GetTokenImageFromTokenSeed holds details about calls to the GetTokenImageFromTokenSeed method.
		GetTokenImageFromTokenSeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// ImageType is the imageType argument value.
			ImageType api.ImageType
			// Architecture is the architecture argument value.
			Architecture api.Architecture
		}
		// GetTokenSeedAll holds details about calls to the GetTokenSeedAll method.
		GetTokenSeedAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetTokenSeedAllNames holds details about calls to the GetTokenSeedAllNames method.
		GetTokenSeedAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetTokenSeedByName holds details about calls to the GetTokenSeedByName method.
		GetTokenSeedByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token provisioning.Token
		}
		// UpdateTokenSeed holds details about calls to the UpdateTokenSeed method.
		UpdateTokenSeed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenSeed is the tokenSeed argument value.
			TokenSeed provisioning.TokenSeed
		}
	}
	lockConsume                    sync.RWMutex
	lockCreate                     sync.RWMutex
	lockCreateTokenSeed            sync.RWMutex
	lockDeleteByUUID               sync.RWMutex
	lockDeleteTokenSeedByName      sync.RWMutex
	lockGetAll                     sync.RWMutex
	lockGetAllUUIDs                sync.RWMutex
	lockGetByUUID                  sync.RWMutex
	lockGetPreSeedImage            sync.RWMutex
	lockGetTokenImageFromTokenSeed sync.RWMutex
	lockGetTokenSeedAll            sync.RWMutex
	lockGetTokenSeedAllNames       sync.RWMutex
	lockGetTokenSeedByName         sync.RWMutex
	lockUpdate                     sync.RWMutex
	lockUpdateTokenSeed            sync.RWMutex
}

// Consume calls ConsumeFunc.
func (mock *TokenServiceMock) Consume(ctx context.Context, id uuid.UUID) error {
	if mock.ConsumeFunc == nil {
		panic("TokenServiceMock.ConsumeFunc: method is nil but TokenService.Consume was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	mock.lockConsume.Unlock()
	return mock.ConsumeFunc(ctx, id)
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//
//	len(mockedTokenService.ConsumeCalls())
func (mock *TokenServiceMock) ConsumeCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockConsume.RLock()
	calls = mock.calls.Consume
	mock.lockConsume.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *TokenServiceMock) Create(ctx context.Context, token provisioning.Token) (provisioning.Token, error) {
	if mock.CreateFunc == nil {
		panic("TokenServiceMock.CreateFunc: method is nil but TokenService.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token provisioning.Token
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, token)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTokenService.CreateCalls())
func (mock *TokenServiceMock) CreateCalls() []struct {
	Ctx   context.Context
	Token provisioning.Token
} {
	var calls []struct {
		Ctx   context.Context
		Token provisioning.Token
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// CreateTokenSeed calls CreateTokenSeedFunc.
func (mock *TokenServiceMock) CreateTokenSeed(ctx context.Context, tokenSeedConfig provisioning.TokenSeed) (provisioning.TokenSeed, error) {
	if mock.CreateTokenSeedFunc == nil {
		panic("TokenServiceMock.CreateTokenSeedFunc: method is nil but TokenService.CreateTokenSeed was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		TokenSeedConfig provisioning.TokenSeed
	}{
		Ctx:             ctx,
		TokenSeedConfig: tokenSeedConfig,
	}
	mock.lockCreateTokenSeed.Lock()
	mock.calls.CreateTokenSeed = append(mock.calls.CreateTokenSeed, callInfo)
	mock.lockCreateTokenSeed.Unlock()
	return mock.CreateTokenSeedFunc(ctx, tokenSeedConfig)
}

// CreateTokenSeedCalls gets all the calls that were made to CreateTokenSeed.
// Check the length with:
//
//	len(mockedTokenService.CreateTokenSeedCalls())
func (mock *TokenServiceMock) CreateTokenSeedCalls() []struct {
	Ctx             context.Context
	TokenSeedConfig provisioning.TokenSeed
} {
	var calls []struct {
		Ctx             context.Context
		TokenSeedConfig provisioning.TokenSeed
	}
	mock.lockCreateTokenSeed.RLock()
	calls = mock.calls.CreateTokenSeed
	mock.lockCreateTokenSeed.RUnlock()
	return calls
}

// DeleteByUUID calls DeleteByUUIDFunc.
func (mock *TokenServiceMock) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByUUIDFunc == nil {
		panic("TokenServiceMock.DeleteByUUIDFunc: method is nil but TokenService.DeleteByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByUUID.Lock()
	mock.calls.DeleteByUUID = append(mock.calls.DeleteByUUID, callInfo)
	mock.lockDeleteByUUID.Unlock()
	return mock.DeleteByUUIDFunc(ctx, id)
}

// DeleteByUUIDCalls gets all the calls that were made to DeleteByUUID.
// Check the length with:
//
//	len(mockedTokenService.DeleteByUUIDCalls())
func (mock *TokenServiceMock) DeleteByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByUUID.RLock()
	calls = mock.calls.DeleteByUUID
	mock.lockDeleteByUUID.RUnlock()
	return calls
}

// DeleteTokenSeedByName calls DeleteTokenSeedByNameFunc.
func (mock *TokenServiceMock) DeleteTokenSeedByName(ctx context.Context, id uuid.UUID, name string) error {
	if mock.DeleteTokenSeedByNameFunc == nil {
		panic("TokenServiceMock.DeleteTokenSeedByNameFunc: method is nil but TokenService.DeleteTokenSeedByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
	}{
		Ctx:  ctx,
		ID:   id,
		Name: name,
	}
	mock.lockDeleteTokenSeedByName.Lock()
	mock.calls.DeleteTokenSeedByName = append(mock.calls.DeleteTokenSeedByName, callInfo)
	mock.lockDeleteTokenSeedByName.Unlock()
	return mock.DeleteTokenSeedByNameFunc(ctx, id, name)
}

// DeleteTokenSeedByNameCalls gets all the calls that were made to DeleteTokenSeedByName.
// Check the length with:
//
//	len(mockedTokenService.DeleteTokenSeedByNameCalls())
func (mock *TokenServiceMock) DeleteTokenSeedByNameCalls() []struct {
	Ctx  context.Context
	ID   uuid.UUID
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
	}
	mock.lockDeleteTokenSeedByName.RLock()
	calls = mock.calls.DeleteTokenSeedByName
	mock.lockDeleteTokenSeedByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *TokenServiceMock) GetAll(ctx context.Context) (provisioning.Tokens, error) {
	if mock.GetAllFunc == nil {
		panic("TokenServiceMock.GetAllFunc: method is nil but TokenService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedTokenService.GetAllCalls())
func (mock *TokenServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllUUIDs calls GetAllUUIDsFunc.
func (mock *TokenServiceMock) GetAllUUIDs(ctx context.Context) ([]uuid.UUID, error) {
	if mock.GetAllUUIDsFunc == nil {
		panic("TokenServiceMock.GetAllUUIDsFunc: method is nil but TokenService.GetAllUUIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUUIDs.Lock()
	mock.calls.GetAllUUIDs = append(mock.calls.GetAllUUIDs, callInfo)
	mock.lockGetAllUUIDs.Unlock()
	return mock.GetAllUUIDsFunc(ctx)
}

// GetAllUUIDsCalls gets all the calls that were made to GetAllUUIDs.
// Check the length with:
//
//	len(mockedTokenService.GetAllUUIDsCalls())
func (mock *TokenServiceMock) GetAllUUIDsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUUIDs.RLock()
	calls = mock.calls.GetAllUUIDs
	mock.lockGetAllUUIDs.RUnlock()
	return calls
}

// GetByUUID calls GetByUUIDFunc.
func (mock *TokenServiceMock) GetByUUID(ctx context.Context, id uuid.UUID) (*provisioning.Token, error) {
	if mock.GetByUUIDFunc == nil {
		panic("TokenServiceMock.GetByUUIDFunc: method is nil but TokenService.GetByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByUUID.Lock()
	mock.calls.GetByUUID = append(mock.calls.GetByUUID, callInfo)
	mock.lockGetByUUID.Unlock()
	return mock.GetByUUIDFunc(ctx, id)
}

// GetByUUIDCalls gets all the calls that were made to GetByUUID.
// Check the length with:
//
//	len(mockedTokenService.GetByUUIDCalls())
func (mock *TokenServiceMock) GetByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByUUID.RLock()
	calls = mock.calls.GetByUUID
	mock.lockGetByUUID.RUnlock()
	return calls
}

// GetPreSeedImage calls GetPreSeedImageFunc.
func (mock *TokenServiceMock) GetPreSeedImage(ctx context.Context, id uuid.UUID, imageType api.ImageType, architecture api.Architecture, seedConfig provisioning.TokenImageSeedConfigs) (io.ReadCloser, error) {
	if mock.GetPreSeedImageFunc == nil {
		panic("TokenServiceMock.GetPreSeedImageFunc: method is nil but TokenService.GetPreSeedImage was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ID           uuid.UUID
		ImageType    api.ImageType
		Architecture api.Architecture
		SeedConfig   provisioning.TokenImageSeedConfigs
	}{
		Ctx:          ctx,
		ID:           id,
		ImageType:    imageType,
		Architecture: architecture,
		SeedConfig:   seedConfig,
	}
	mock.lockGetPreSeedImage.Lock()
	mock.calls.GetPreSeedImage = append(mock.calls.GetPreSeedImage, callInfo)
	mock.lockGetPreSeedImage.Unlock()
	return mock.GetPreSeedImageFunc(ctx, id, imageType, architecture, seedConfig)
}

// GetPreSeedImageCalls gets all the calls that were made to GetPreSeedImage.
// Check the length with:
//
//	len(mockedTokenService.GetPreSeedImageCalls())
func (mock *TokenServiceMock) GetPreSeedImageCalls() []struct {
	Ctx          context.Context
	ID           uuid.UUID
	ImageType    api.ImageType
	Architecture api.Architecture
	SeedConfig   provisioning.TokenImageSeedConfigs
} {
	var calls []struct {
		Ctx          context.Context
		ID           uuid.UUID
		ImageType    api.ImageType
		Architecture api.Architecture
		SeedConfig   provisioning.TokenImageSeedConfigs
	}
	mock.lockGetPreSeedImage.RLock()
	calls = mock.calls.GetPreSeedImage
	mock.lockGetPreSeedImage.RUnlock()
	return calls
}

// GetTokenImageFromTokenSeed calls GetTokenImageFromTokenSeedFunc.
func (mock *TokenServiceMock) GetTokenImageFromTokenSeed(ctx context.Context, id uuid.UUID, name string, imageType api.ImageType, architecture api.Architecture) (io.ReadCloser, error) {
	if mock.GetTokenImageFromTokenSeedFunc == nil {
		panic("TokenServiceMock.GetTokenImageFromTokenSeedFunc: method is nil but TokenService.GetTokenImageFromTokenSeed was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ID           uuid.UUID
		Name         string
		ImageType    api.ImageType
		Architecture api.Architecture
	}{
		Ctx:          ctx,
		ID:           id,
		Name:         name,
		ImageType:    imageType,
		Architecture: architecture,
	}
	mock.lockGetTokenImageFromTokenSeed.Lock()
	mock.calls.GetTokenImageFromTokenSeed = append(mock.calls.GetTokenImageFromTokenSeed, callInfo)
	mock.lockGetTokenImageFromTokenSeed.Unlock()
	return mock.GetTokenImageFromTokenSeedFunc(ctx, id, name, imageType, architecture)
}

// GetTokenImageFromTokenSeedCalls gets all the calls that were made to GetTokenImageFromTokenSeed.
// Check the length with:
//
//	len(mockedTokenService.GetTokenImageFromTokenSeedCalls())
func (mock *TokenServiceMock) GetTokenImageFromTokenSeedCalls() []struct {
	Ctx          context.Context
	ID           uuid.UUID
	Name         string
	ImageType    api.ImageType
	Architecture api.Architecture
} {
	var calls []struct {
		Ctx          context.Context
		ID           uuid.UUID
		Name         string
		ImageType    api.ImageType
		Architecture api.Architecture
	}
	mock.lockGetTokenImageFromTokenSeed.RLock()
	calls = mock.calls.GetTokenImageFromTokenSeed
	mock.lockGetTokenImageFromTokenSeed.RUnlock()
	return calls
}

// GetTokenSeedAll calls GetTokenSeedAllFunc.
func (mock *TokenServiceMock) GetTokenSeedAll(ctx context.Context, id uuid.UUID) (provisioning.TokenSeeds, error) {
	if mock.GetTokenSeedAllFunc == nil {
		panic("TokenServiceMock.GetTokenSeedAllFunc: method is nil but TokenService.GetTokenSeedAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTokenSeedAll.Lock()
	mock.calls.GetTokenSeedAll = append(mock.calls.GetTokenSeedAll, callInfo)
	mock.lockGetTokenSeedAll.Unlock()
	return mock.GetTokenSeedAllFunc(ctx, id)
}

// GetTokenSeedAllCalls gets all the calls that were made to GetTokenSeedAll.
// Check the length with:
//
//	len(mockedTokenService.GetTokenSeedAllCalls())
func (mock *TokenServiceMock) GetTokenSeedAllCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetTokenSeedAll.RLock()
	calls = mock.calls.GetTokenSeedAll
	mock.lockGetTokenSeedAll.RUnlock()
	return calls
}

// GetTokenSeedAllNames calls GetTokenSeedAllNamesFunc.
func (mock *TokenServiceMock) GetTokenSeedAllNames(ctx context.Context, id uuid.UUID) ([]string, error) {
	if mock.GetTokenSeedAllNamesFunc == nil {
		panic("TokenServiceMock.GetTokenSeedAllNamesFunc: method is nil but TokenService.GetTokenSeedAllNames was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTokenSeedAllNames.Lock()
	mock.calls.GetTokenSeedAllNames = append(mock.calls.GetTokenSeedAllNames, callInfo)
	mock.lockGetTokenSeedAllNames.Unlock()
	return mock.GetTokenSeedAllNamesFunc(ctx, id)
}

// GetTokenSeedAllNamesCalls gets all the calls that were made to GetTokenSeedAllNames.
// Check the length with:
//
//	len(mockedTokenService.GetTokenSeedAllNamesCalls())
func (mock *TokenServiceMock) GetTokenSeedAllNamesCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetTokenSeedAllNames.RLock()
	calls = mock.calls.GetTokenSeedAllNames
	mock.lockGetTokenSeedAllNames.RUnlock()
	return calls
}

// GetTokenSeedByName calls GetTokenSeedByNameFunc.
func (mock *TokenServiceMock) GetTokenSeedByName(ctx context.Context, id uuid.UUID, name string) (*provisioning.TokenSeed, error) {
	if mock.GetTokenSeedByNameFunc == nil {
		panic("TokenServiceMock.GetTokenSeedByNameFunc: method is nil but TokenService.GetTokenSeedByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
	}{
		Ctx:  ctx,
		ID:   id,
		Name: name,
	}
	mock.lockGetTokenSeedByName.Lock()
	mock.calls.GetTokenSeedByName = append(mock.calls.GetTokenSeedByName, callInfo)
	mock.lockGetTokenSeedByName.Unlock()
	return mock.GetTokenSeedByNameFunc(ctx, id, name)
}

// GetTokenSeedByNameCalls gets all the calls that were made to GetTokenSeedByName.
// Check the length with:
//
//	len(mockedTokenService.GetTokenSeedByNameCalls())
func (mock *TokenServiceMock) GetTokenSeedByNameCalls() []struct {
	Ctx  context.Context
	ID   uuid.UUID
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
	}
	mock.lockGetTokenSeedByName.RLock()
	calls = mock.calls.GetTokenSeedByName
	mock.lockGetTokenSeedByName.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TokenServiceMock) Update(ctx context.Context, token provisioning.Token) error {
	if mock.UpdateFunc == nil {
		panic("TokenServiceMock.UpdateFunc: method is nil but TokenService.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token provisioning.Token
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, token)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedTokenService.UpdateCalls())
func (mock *TokenServiceMock) UpdateCalls() []struct {
	Ctx   context.Context
	Token provisioning.Token
} {
	var calls []struct {
		Ctx   context.Context
		Token provisioning.Token
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateTokenSeed calls UpdateTokenSeedFunc.
func (mock *TokenServiceMock) UpdateTokenSeed(ctx context.Context, tokenSeed provisioning.TokenSeed) error {
	if mock.UpdateTokenSeedFunc == nil {
		panic("TokenServiceMock.UpdateTokenSeedFunc: method is nil but TokenService.UpdateTokenSeed was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		TokenSeed provisioning.TokenSeed
	}{
		Ctx:       ctx,
		TokenSeed: tokenSeed,
	}
	mock.lockUpdateTokenSeed.Lock()
	mock.calls.UpdateTokenSeed = append(mock.calls.UpdateTokenSeed, callInfo)
	mock.lockUpdateTokenSeed.Unlock()
	return mock.UpdateTokenSeedFunc(ctx, tokenSeed)
}

// UpdateTokenSeedCalls gets all the calls that were made to UpdateTokenSeed.
// Check the length with:
//
//	len(mockedTokenService.UpdateTokenSeedCalls())
func (mock *TokenServiceMock) UpdateTokenSeedCalls() []struct {
	Ctx       context.Context
	TokenSeed provisioning.TokenSeed
} {
	var calls []struct {
		Ctx       context.Context
		TokenSeed provisioning.TokenSeed
	}
	mock.lockUpdateTokenSeed.RLock()
	calls = mock.calls.UpdateTokenSeed
	mock.lockUpdateTokenSeed.RUnlock()
	return calls
}
