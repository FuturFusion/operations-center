// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"io"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
	"github.com/google/uuid"
)

// Ensure that TokenServiceMock does implement provisioning.TokenService.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.TokenService = &TokenServiceMock{}

// TokenServiceMock is a mock implementation of provisioning.TokenService.
//
//	func TestSomethingThatUsesTokenService(t *testing.T) {
//
//		// make and configure a mocked provisioning.TokenService
//		mockedTokenService := &TokenServiceMock{
//			ConsumeFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the Consume method")
//			},
//			CreateFunc: func(ctx context.Context, token provisioning.Token) (provisioning.Token, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByUUIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByUUID method")
//			},
//			GetAllFunc: func(ctx context.Context) (provisioning.Tokens, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllUUIDsFunc: func(ctx context.Context) ([]uuid.UUID, error) {
//				panic("mock out the GetAllUUIDs method")
//			},
//			GetByUUIDFunc: func(ctx context.Context, id uuid.UUID) (*provisioning.Token, error) {
//				panic("mock out the GetByUUID method")
//			},
//			GetPreSeedImageFunc: func(ctx context.Context, id uuid.UUID, imageType api.ImageType, seedConfig provisioning.TokenSeeds) (io.ReadCloser, error) {
//				panic("mock out the GetPreSeedImage method")
//			},
//			UpdateFunc: func(ctx context.Context, token provisioning.Token) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedTokenService in code that requires provisioning.TokenService
//		// and then make assertions.
//
//	}
type TokenServiceMock struct {
	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func(ctx context.Context, id uuid.UUID) error

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, token provisioning.Token) (provisioning.Token, error)

	// DeleteByUUIDFunc mocks the DeleteByUUID method.
	DeleteByUUIDFunc func(ctx context.Context, id uuid.UUID) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Tokens, error)

	// GetAllUUIDsFunc mocks the GetAllUUIDs method.
	GetAllUUIDsFunc func(ctx context.Context) ([]uuid.UUID, error)

	// GetByUUIDFunc mocks the GetByUUID method.
	GetByUUIDFunc func(ctx context.Context, id uuid.UUID) (*provisioning.Token, error)

	// GetPreSeedImageFunc mocks the GetPreSeedImage method.
	GetPreSeedImageFunc func(ctx context.Context, id uuid.UUID, imageType api.ImageType, seedConfig provisioning.TokenSeeds) (io.ReadCloser, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, token provisioning.Token) error

	// calls tracks calls to the methods.
	calls struct {
		// Consume holds details about calls to the Consume method.
		Consume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token provisioning.Token
		}
		// DeleteByUUID holds details about calls to the DeleteByUUID method.
		DeleteByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllUUIDs holds details about calls to the GetAllUUIDs method.
		GetAllUUIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByUUID holds details about calls to the GetByUUID method.
		GetByUUID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetPreSeedImage holds details about calls to the GetPreSeedImage method.
		GetPreSeedImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// ImageType is the imageType argument value.
			ImageType api.ImageType
			// SeedConfig is the seedConfig argument value.
			SeedConfig provisioning.TokenSeeds
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token provisioning.Token
		}
	}
	lockConsume         sync.RWMutex
	lockCreate          sync.RWMutex
	lockDeleteByUUID    sync.RWMutex
	lockGetAll          sync.RWMutex
	lockGetAllUUIDs     sync.RWMutex
	lockGetByUUID       sync.RWMutex
	lockGetPreSeedImage sync.RWMutex
	lockUpdate          sync.RWMutex
}

// Consume calls ConsumeFunc.
func (mock *TokenServiceMock) Consume(ctx context.Context, id uuid.UUID) error {
	if mock.ConsumeFunc == nil {
		panic("TokenServiceMock.ConsumeFunc: method is nil but TokenService.Consume was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	mock.lockConsume.Unlock()
	return mock.ConsumeFunc(ctx, id)
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//
//	len(mockedTokenService.ConsumeCalls())
func (mock *TokenServiceMock) ConsumeCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockConsume.RLock()
	calls = mock.calls.Consume
	mock.lockConsume.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *TokenServiceMock) Create(ctx context.Context, token provisioning.Token) (provisioning.Token, error) {
	if mock.CreateFunc == nil {
		panic("TokenServiceMock.CreateFunc: method is nil but TokenService.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token provisioning.Token
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, token)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTokenService.CreateCalls())
func (mock *TokenServiceMock) CreateCalls() []struct {
	Ctx   context.Context
	Token provisioning.Token
} {
	var calls []struct {
		Ctx   context.Context
		Token provisioning.Token
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByUUID calls DeleteByUUIDFunc.
func (mock *TokenServiceMock) DeleteByUUID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByUUIDFunc == nil {
		panic("TokenServiceMock.DeleteByUUIDFunc: method is nil but TokenService.DeleteByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByUUID.Lock()
	mock.calls.DeleteByUUID = append(mock.calls.DeleteByUUID, callInfo)
	mock.lockDeleteByUUID.Unlock()
	return mock.DeleteByUUIDFunc(ctx, id)
}

// DeleteByUUIDCalls gets all the calls that were made to DeleteByUUID.
// Check the length with:
//
//	len(mockedTokenService.DeleteByUUIDCalls())
func (mock *TokenServiceMock) DeleteByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByUUID.RLock()
	calls = mock.calls.DeleteByUUID
	mock.lockDeleteByUUID.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *TokenServiceMock) GetAll(ctx context.Context) (provisioning.Tokens, error) {
	if mock.GetAllFunc == nil {
		panic("TokenServiceMock.GetAllFunc: method is nil but TokenService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedTokenService.GetAllCalls())
func (mock *TokenServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllUUIDs calls GetAllUUIDsFunc.
func (mock *TokenServiceMock) GetAllUUIDs(ctx context.Context) ([]uuid.UUID, error) {
	if mock.GetAllUUIDsFunc == nil {
		panic("TokenServiceMock.GetAllUUIDsFunc: method is nil but TokenService.GetAllUUIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUUIDs.Lock()
	mock.calls.GetAllUUIDs = append(mock.calls.GetAllUUIDs, callInfo)
	mock.lockGetAllUUIDs.Unlock()
	return mock.GetAllUUIDsFunc(ctx)
}

// GetAllUUIDsCalls gets all the calls that were made to GetAllUUIDs.
// Check the length with:
//
//	len(mockedTokenService.GetAllUUIDsCalls())
func (mock *TokenServiceMock) GetAllUUIDsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUUIDs.RLock()
	calls = mock.calls.GetAllUUIDs
	mock.lockGetAllUUIDs.RUnlock()
	return calls
}

// GetByUUID calls GetByUUIDFunc.
func (mock *TokenServiceMock) GetByUUID(ctx context.Context, id uuid.UUID) (*provisioning.Token, error) {
	if mock.GetByUUIDFunc == nil {
		panic("TokenServiceMock.GetByUUIDFunc: method is nil but TokenService.GetByUUID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByUUID.Lock()
	mock.calls.GetByUUID = append(mock.calls.GetByUUID, callInfo)
	mock.lockGetByUUID.Unlock()
	return mock.GetByUUIDFunc(ctx, id)
}

// GetByUUIDCalls gets all the calls that were made to GetByUUID.
// Check the length with:
//
//	len(mockedTokenService.GetByUUIDCalls())
func (mock *TokenServiceMock) GetByUUIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByUUID.RLock()
	calls = mock.calls.GetByUUID
	mock.lockGetByUUID.RUnlock()
	return calls
}

// GetPreSeedImage calls GetPreSeedImageFunc.
func (mock *TokenServiceMock) GetPreSeedImage(ctx context.Context, id uuid.UUID, imageType api.ImageType, seedConfig provisioning.TokenSeeds) (io.ReadCloser, error) {
	if mock.GetPreSeedImageFunc == nil {
		panic("TokenServiceMock.GetPreSeedImageFunc: method is nil but TokenService.GetPreSeedImage was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         uuid.UUID
		ImageType  api.ImageType
		SeedConfig provisioning.TokenSeeds
	}{
		Ctx:        ctx,
		ID:         id,
		ImageType:  imageType,
		SeedConfig: seedConfig,
	}
	mock.lockGetPreSeedImage.Lock()
	mock.calls.GetPreSeedImage = append(mock.calls.GetPreSeedImage, callInfo)
	mock.lockGetPreSeedImage.Unlock()
	return mock.GetPreSeedImageFunc(ctx, id, imageType, seedConfig)
}

// GetPreSeedImageCalls gets all the calls that were made to GetPreSeedImage.
// Check the length with:
//
//	len(mockedTokenService.GetPreSeedImageCalls())
func (mock *TokenServiceMock) GetPreSeedImageCalls() []struct {
	Ctx        context.Context
	ID         uuid.UUID
	ImageType  api.ImageType
	SeedConfig provisioning.TokenSeeds
} {
	var calls []struct {
		Ctx        context.Context
		ID         uuid.UUID
		ImageType  api.ImageType
		SeedConfig provisioning.TokenSeeds
	}
	mock.lockGetPreSeedImage.RLock()
	calls = mock.calls.GetPreSeedImage
	mock.lockGetPreSeedImage.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TokenServiceMock) Update(ctx context.Context, token provisioning.Token) error {
	if mock.UpdateFunc == nil {
		panic("TokenServiceMock.UpdateFunc: method is nil but TokenService.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token provisioning.Token
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, token)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedTokenService.UpdateCalls())
func (mock *TokenServiceMock) UpdateCalls() []struct {
	Ctx   context.Context
	Token provisioning.Token
} {
	var calls []struct {
		Ctx   context.Context
		Token provisioning.Token
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
