// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure that ClusterServiceMock does implement provisioning.ClusterService.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.ClusterService = &ClusterServiceMock{}

// ClusterServiceMock is a mock implementation of provisioning.ClusterService.
//
//	func TestSomethingThatUsesClusterService(t *testing.T) {
//
//		// make and configure a mocked provisioning.ClusterService
//		mockedClusterService := &ClusterServiceMock{
//			CreateFunc: func(ctx context.Context, cluster provisioning.Cluster) (provisioning.Cluster, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the DeleteByName method")
//			},
//			GetAllFunc: func(ctx context.Context) (provisioning.Clusters, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllNamesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllNames method")
//			},
//			GetAllNamesWithFilterFunc: func(ctx context.Context, filter provisioning.ClusterFilter) ([]string, error) {
//				panic("mock out the GetAllNamesWithFilter method")
//			},
//			GetAllWithFilterFunc: func(ctx context.Context, filter provisioning.ClusterFilter) (provisioning.Clusters, error) {
//				panic("mock out the GetAllWithFilter method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (*provisioning.Cluster, error) {
//				panic("mock out the GetByName method")
//			},
//			RenameFunc: func(ctx context.Context, oldName string, newName string) error {
//				panic("mock out the Rename method")
//			},
//			ResyncInventoryByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the ResyncInventoryByName method")
//			},
//			UpdateFunc: func(ctx context.Context, cluster provisioning.Cluster) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedClusterService in code that requires provisioning.ClusterService
//		// and then make assertions.
//
//	}
type ClusterServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, cluster provisioning.Cluster) (provisioning.Cluster, error)

	// DeleteByNameFunc mocks the DeleteByName method.
	DeleteByNameFunc func(ctx context.Context, name string) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Clusters, error)

	// GetAllNamesFunc mocks the GetAllNames method.
	GetAllNamesFunc func(ctx context.Context) ([]string, error)

	// GetAllNamesWithFilterFunc mocks the GetAllNamesWithFilter method.
	GetAllNamesWithFilterFunc func(ctx context.Context, filter provisioning.ClusterFilter) ([]string, error)

	// GetAllWithFilterFunc mocks the GetAllWithFilter method.
	GetAllWithFilterFunc func(ctx context.Context, filter provisioning.ClusterFilter) (provisioning.Clusters, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (*provisioning.Cluster, error)

	// RenameFunc mocks the Rename method.
	RenameFunc func(ctx context.Context, oldName string, newName string) error

	// ResyncInventoryByNameFunc mocks the ResyncInventoryByName method.
	ResyncInventoryByNameFunc func(ctx context.Context, name string) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, cluster provisioning.Cluster) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// DeleteByName holds details about calls to the DeleteByName method.
		DeleteByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllNames holds details about calls to the GetAllNames method.
		GetAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllNamesWithFilter holds details about calls to the GetAllNamesWithFilter method.
		GetAllNamesWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter provisioning.ClusterFilter
		}
		// GetAllWithFilter holds details about calls to the GetAllWithFilter method.
		GetAllWithFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter provisioning.ClusterFilter
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// Rename holds details about calls to the Rename method.
		Rename []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OldName is the oldName argument value.
			OldName string
			// NewName is the newName argument value.
			NewName string
		}
		// ResyncInventoryByName holds details about calls to the ResyncInventoryByName method.
		ResyncInventoryByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
	}
	lockCreate                sync.RWMutex
	lockDeleteByName          sync.RWMutex
	lockGetAll                sync.RWMutex
	lockGetAllNames           sync.RWMutex
	lockGetAllNamesWithFilter sync.RWMutex
	lockGetAllWithFilter      sync.RWMutex
	lockGetByName             sync.RWMutex
	lockRename                sync.RWMutex
	lockResyncInventoryByName sync.RWMutex
	lockUpdate                sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ClusterServiceMock) Create(ctx context.Context, cluster provisioning.Cluster) (provisioning.Cluster, error) {
	if mock.CreateFunc == nil {
		panic("ClusterServiceMock.CreateFunc: method is nil but ClusterService.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, cluster)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedClusterService.CreateCalls())
func (mock *ClusterServiceMock) CreateCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByName calls DeleteByNameFunc.
func (mock *ClusterServiceMock) DeleteByName(ctx context.Context, name string) error {
	if mock.DeleteByNameFunc == nil {
		panic("ClusterServiceMock.DeleteByNameFunc: method is nil but ClusterService.DeleteByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockDeleteByName.Lock()
	mock.calls.DeleteByName = append(mock.calls.DeleteByName, callInfo)
	mock.lockDeleteByName.Unlock()
	return mock.DeleteByNameFunc(ctx, name)
}

// DeleteByNameCalls gets all the calls that were made to DeleteByName.
// Check the length with:
//
//	len(mockedClusterService.DeleteByNameCalls())
func (mock *ClusterServiceMock) DeleteByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockDeleteByName.RLock()
	calls = mock.calls.DeleteByName
	mock.lockDeleteByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *ClusterServiceMock) GetAll(ctx context.Context) (provisioning.Clusters, error) {
	if mock.GetAllFunc == nil {
		panic("ClusterServiceMock.GetAllFunc: method is nil but ClusterService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedClusterService.GetAllCalls())
func (mock *ClusterServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllNames calls GetAllNamesFunc.
func (mock *ClusterServiceMock) GetAllNames(ctx context.Context) ([]string, error) {
	if mock.GetAllNamesFunc == nil {
		panic("ClusterServiceMock.GetAllNamesFunc: method is nil but ClusterService.GetAllNames was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllNames.Lock()
	mock.calls.GetAllNames = append(mock.calls.GetAllNames, callInfo)
	mock.lockGetAllNames.Unlock()
	return mock.GetAllNamesFunc(ctx)
}

// GetAllNamesCalls gets all the calls that were made to GetAllNames.
// Check the length with:
//
//	len(mockedClusterService.GetAllNamesCalls())
func (mock *ClusterServiceMock) GetAllNamesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllNames.RLock()
	calls = mock.calls.GetAllNames
	mock.lockGetAllNames.RUnlock()
	return calls
}

// GetAllNamesWithFilter calls GetAllNamesWithFilterFunc.
func (mock *ClusterServiceMock) GetAllNamesWithFilter(ctx context.Context, filter provisioning.ClusterFilter) ([]string, error) {
	if mock.GetAllNamesWithFilterFunc == nil {
		panic("ClusterServiceMock.GetAllNamesWithFilterFunc: method is nil but ClusterService.GetAllNamesWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter provisioning.ClusterFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllNamesWithFilter.Lock()
	mock.calls.GetAllNamesWithFilter = append(mock.calls.GetAllNamesWithFilter, callInfo)
	mock.lockGetAllNamesWithFilter.Unlock()
	return mock.GetAllNamesWithFilterFunc(ctx, filter)
}

// GetAllNamesWithFilterCalls gets all the calls that were made to GetAllNamesWithFilter.
// Check the length with:
//
//	len(mockedClusterService.GetAllNamesWithFilterCalls())
func (mock *ClusterServiceMock) GetAllNamesWithFilterCalls() []struct {
	Ctx    context.Context
	Filter provisioning.ClusterFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter provisioning.ClusterFilter
	}
	mock.lockGetAllNamesWithFilter.RLock()
	calls = mock.calls.GetAllNamesWithFilter
	mock.lockGetAllNamesWithFilter.RUnlock()
	return calls
}

// GetAllWithFilter calls GetAllWithFilterFunc.
func (mock *ClusterServiceMock) GetAllWithFilter(ctx context.Context, filter provisioning.ClusterFilter) (provisioning.Clusters, error) {
	if mock.GetAllWithFilterFunc == nil {
		panic("ClusterServiceMock.GetAllWithFilterFunc: method is nil but ClusterService.GetAllWithFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter provisioning.ClusterFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllWithFilter.Lock()
	mock.calls.GetAllWithFilter = append(mock.calls.GetAllWithFilter, callInfo)
	mock.lockGetAllWithFilter.Unlock()
	return mock.GetAllWithFilterFunc(ctx, filter)
}

// GetAllWithFilterCalls gets all the calls that were made to GetAllWithFilter.
// Check the length with:
//
//	len(mockedClusterService.GetAllWithFilterCalls())
func (mock *ClusterServiceMock) GetAllWithFilterCalls() []struct {
	Ctx    context.Context
	Filter provisioning.ClusterFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter provisioning.ClusterFilter
	}
	mock.lockGetAllWithFilter.RLock()
	calls = mock.calls.GetAllWithFilter
	mock.lockGetAllWithFilter.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *ClusterServiceMock) GetByName(ctx context.Context, name string) (*provisioning.Cluster, error) {
	if mock.GetByNameFunc == nil {
		panic("ClusterServiceMock.GetByNameFunc: method is nil but ClusterService.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedClusterService.GetByNameCalls())
func (mock *ClusterServiceMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// Rename calls RenameFunc.
func (mock *ClusterServiceMock) Rename(ctx context.Context, oldName string, newName string) error {
	if mock.RenameFunc == nil {
		panic("ClusterServiceMock.RenameFunc: method is nil but ClusterService.Rename was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		OldName string
		NewName string
	}{
		Ctx:     ctx,
		OldName: oldName,
		NewName: newName,
	}
	mock.lockRename.Lock()
	mock.calls.Rename = append(mock.calls.Rename, callInfo)
	mock.lockRename.Unlock()
	return mock.RenameFunc(ctx, oldName, newName)
}

// RenameCalls gets all the calls that were made to Rename.
// Check the length with:
//
//	len(mockedClusterService.RenameCalls())
func (mock *ClusterServiceMock) RenameCalls() []struct {
	Ctx     context.Context
	OldName string
	NewName string
} {
	var calls []struct {
		Ctx     context.Context
		OldName string
		NewName string
	}
	mock.lockRename.RLock()
	calls = mock.calls.Rename
	mock.lockRename.RUnlock()
	return calls
}

// ResyncInventoryByName calls ResyncInventoryByNameFunc.
func (mock *ClusterServiceMock) ResyncInventoryByName(ctx context.Context, name string) error {
	if mock.ResyncInventoryByNameFunc == nil {
		panic("ClusterServiceMock.ResyncInventoryByNameFunc: method is nil but ClusterService.ResyncInventoryByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockResyncInventoryByName.Lock()
	mock.calls.ResyncInventoryByName = append(mock.calls.ResyncInventoryByName, callInfo)
	mock.lockResyncInventoryByName.Unlock()
	return mock.ResyncInventoryByNameFunc(ctx, name)
}

// ResyncInventoryByNameCalls gets all the calls that were made to ResyncInventoryByName.
// Check the length with:
//
//	len(mockedClusterService.ResyncInventoryByNameCalls())
func (mock *ClusterServiceMock) ResyncInventoryByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockResyncInventoryByName.RLock()
	calls = mock.calls.ResyncInventoryByName
	mock.lockResyncInventoryByName.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterServiceMock) Update(ctx context.Context, cluster provisioning.Cluster) error {
	if mock.UpdateFunc == nil {
		panic("ClusterServiceMock.UpdateFunc: method is nil but ClusterService.Update was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, cluster)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedClusterService.UpdateCalls())
func (mock *ClusterServiceMock) UpdateCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
