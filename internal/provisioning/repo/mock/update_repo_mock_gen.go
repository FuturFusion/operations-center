// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mock

import (
	"context"
	"io"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure, that UpdateRepoMock does implement provisioning.UpdateRepo.
// If this is not the case, regenerate this file with moq.
var _ provisioning.UpdateRepo = &UpdateRepoMock{}

// UpdateRepoMock is a mock implementation of provisioning.UpdateRepo.
//
//	func TestSomethingThatUsesUpdateRepo(t *testing.T) {
//
//		// make and configure a mocked provisioning.UpdateRepo
//		mockedUpdateRepo := &UpdateRepoMock{
//			GetAllFunc: func(ctx context.Context) (provisioning.Updates, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllIDsFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllIDs method")
//			},
//			GetByIDFunc: func(ctx context.Context, id string) (provisioning.Update, error) {
//				panic("mock out the GetByID method")
//			},
//			GetUpdateAllFilesFunc: func(ctx context.Context, updateID string) (provisioning.UpdateFiles, error) {
//				panic("mock out the GetUpdateAllFiles method")
//			},
//			GetUpdateFileByFilenameFunc: func(ctx context.Context, updateID string, filename string) (io.ReadCloser, int, error) {
//				panic("mock out the GetUpdateFileByFilename method")
//			},
//		}
//
//		// use mockedUpdateRepo in code that requires provisioning.UpdateRepo
//		// and then make assertions.
//
//	}
type UpdateRepoMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Updates, error)

	// GetAllIDsFunc mocks the GetAllIDs method.
	GetAllIDsFunc func(ctx context.Context) ([]string, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (provisioning.Update, error)

	// GetUpdateAllFilesFunc mocks the GetUpdateAllFiles method.
	GetUpdateAllFilesFunc func(ctx context.Context, updateID string) (provisioning.UpdateFiles, error)

	// GetUpdateFileByFilenameFunc mocks the GetUpdateFileByFilename method.
	GetUpdateFileByFilenameFunc func(ctx context.Context, updateID string, filename string) (io.ReadCloser, int, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllIDs holds details about calls to the GetAllIDs method.
		GetAllIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetUpdateAllFiles holds details about calls to the GetUpdateAllFiles method.
		GetUpdateAllFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UpdateID is the updateID argument value.
			UpdateID string
		}
		// GetUpdateFileByFilename holds details about calls to the GetUpdateFileByFilename method.
		GetUpdateFileByFilename []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UpdateID is the updateID argument value.
			UpdateID string
			// Filename is the filename argument value.
			Filename string
		}
	}
	lockGetAll                  sync.RWMutex
	lockGetAllIDs               sync.RWMutex
	lockGetByID                 sync.RWMutex
	lockGetUpdateAllFiles       sync.RWMutex
	lockGetUpdateFileByFilename sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *UpdateRepoMock) GetAll(ctx context.Context) (provisioning.Updates, error) {
	if mock.GetAllFunc == nil {
		panic("UpdateRepoMock.GetAllFunc: method is nil but UpdateRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedUpdateRepo.GetAllCalls())
func (mock *UpdateRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllIDs calls GetAllIDsFunc.
func (mock *UpdateRepoMock) GetAllIDs(ctx context.Context) ([]string, error) {
	if mock.GetAllIDsFunc == nil {
		panic("UpdateRepoMock.GetAllIDsFunc: method is nil but UpdateRepo.GetAllIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllIDs.Lock()
	mock.calls.GetAllIDs = append(mock.calls.GetAllIDs, callInfo)
	mock.lockGetAllIDs.Unlock()
	return mock.GetAllIDsFunc(ctx)
}

// GetAllIDsCalls gets all the calls that were made to GetAllIDs.
// Check the length with:
//
//	len(mockedUpdateRepo.GetAllIDsCalls())
func (mock *UpdateRepoMock) GetAllIDsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllIDs.RLock()
	calls = mock.calls.GetAllIDs
	mock.lockGetAllIDs.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *UpdateRepoMock) GetByID(ctx context.Context, id string) (provisioning.Update, error) {
	if mock.GetByIDFunc == nil {
		panic("UpdateRepoMock.GetByIDFunc: method is nil but UpdateRepo.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedUpdateRepo.GetByIDCalls())
func (mock *UpdateRepoMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetUpdateAllFiles calls GetUpdateAllFilesFunc.
func (mock *UpdateRepoMock) GetUpdateAllFiles(ctx context.Context, updateID string) (provisioning.UpdateFiles, error) {
	if mock.GetUpdateAllFilesFunc == nil {
		panic("UpdateRepoMock.GetUpdateAllFilesFunc: method is nil but UpdateRepo.GetUpdateAllFiles was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UpdateID string
	}{
		Ctx:      ctx,
		UpdateID: updateID,
	}
	mock.lockGetUpdateAllFiles.Lock()
	mock.calls.GetUpdateAllFiles = append(mock.calls.GetUpdateAllFiles, callInfo)
	mock.lockGetUpdateAllFiles.Unlock()
	return mock.GetUpdateAllFilesFunc(ctx, updateID)
}

// GetUpdateAllFilesCalls gets all the calls that were made to GetUpdateAllFiles.
// Check the length with:
//
//	len(mockedUpdateRepo.GetUpdateAllFilesCalls())
func (mock *UpdateRepoMock) GetUpdateAllFilesCalls() []struct {
	Ctx      context.Context
	UpdateID string
} {
	var calls []struct {
		Ctx      context.Context
		UpdateID string
	}
	mock.lockGetUpdateAllFiles.RLock()
	calls = mock.calls.GetUpdateAllFiles
	mock.lockGetUpdateAllFiles.RUnlock()
	return calls
}

// GetUpdateFileByFilename calls GetUpdateFileByFilenameFunc.
func (mock *UpdateRepoMock) GetUpdateFileByFilename(ctx context.Context, updateID string, filename string) (io.ReadCloser, int, error) {
	if mock.GetUpdateFileByFilenameFunc == nil {
		panic("UpdateRepoMock.GetUpdateFileByFilenameFunc: method is nil but UpdateRepo.GetUpdateFileByFilename was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UpdateID string
		Filename string
	}{
		Ctx:      ctx,
		UpdateID: updateID,
		Filename: filename,
	}
	mock.lockGetUpdateFileByFilename.Lock()
	mock.calls.GetUpdateFileByFilename = append(mock.calls.GetUpdateFileByFilename, callInfo)
	mock.lockGetUpdateFileByFilename.Unlock()
	return mock.GetUpdateFileByFilenameFunc(ctx, updateID, filename)
}

// GetUpdateFileByFilenameCalls gets all the calls that were made to GetUpdateFileByFilename.
// Check the length with:
//
//	len(mockedUpdateRepo.GetUpdateFileByFilenameCalls())
func (mock *UpdateRepoMock) GetUpdateFileByFilenameCalls() []struct {
	Ctx      context.Context
	UpdateID string
	Filename string
} {
	var calls []struct {
		Ctx      context.Context
		UpdateID string
		Filename string
	}
	mock.lockGetUpdateFileByFilename.RLock()
	calls = mock.calls.GetUpdateFileByFilename
	mock.lockGetUpdateFileByFilename.RUnlock()
	return calls
}
