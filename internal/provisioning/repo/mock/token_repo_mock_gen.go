// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// Ensure, that TokenRepoMock does implement provisioning.TokenRepo.
// If this is not the case, regenerate this file with moq.
var _ provisioning.TokenRepo = &TokenRepoMock{}

// TokenRepoMock is a mock implementation of provisioning.TokenRepo.
//
//	func TestSomethingThatUsesTokenRepo(t *testing.T) {
//
//		// make and configure a mocked provisioning.TokenRepo
//		mockedTokenRepo := &TokenRepoMock{
//			CreateFunc: func(ctx context.Context, token provisioning.Token) (provisioning.Token, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByIDFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteByID method")
//			},
//			GetAllFunc: func(ctx context.Context) (provisioning.Tokens, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllIDsFunc: func(ctx context.Context) ([]uuid.UUID, error) {
//				panic("mock out the GetAllIDs method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (provisioning.Token, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateByIDFunc: func(ctx context.Context, token provisioning.Token) (provisioning.Token, error) {
//				panic("mock out the UpdateByID method")
//			},
//		}
//
//		// use mockedTokenRepo in code that requires provisioning.TokenRepo
//		// and then make assertions.
//
//	}
type TokenRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, token provisioning.Token) (provisioning.Token, error)

	// DeleteByIDFunc mocks the DeleteByID method.
	DeleteByIDFunc func(ctx context.Context, id uuid.UUID) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Tokens, error)

	// GetAllIDsFunc mocks the GetAllIDs method.
	GetAllIDsFunc func(ctx context.Context) ([]uuid.UUID, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (provisioning.Token, error)

	// UpdateByIDFunc mocks the UpdateByID method.
	UpdateByIDFunc func(ctx context.Context, token provisioning.Token) (provisioning.Token, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token provisioning.Token
		}
		// DeleteByID holds details about calls to the DeleteByID method.
		DeleteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllIDs holds details about calls to the GetAllIDs method.
		GetAllIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// UpdateByID holds details about calls to the UpdateByID method.
		UpdateByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token provisioning.Token
		}
	}
	lockCreate     sync.RWMutex
	lockDeleteByID sync.RWMutex
	lockGetAll     sync.RWMutex
	lockGetAllIDs  sync.RWMutex
	lockGetByID    sync.RWMutex
	lockUpdateByID sync.RWMutex
}

// Create calls CreateFunc.
func (mock *TokenRepoMock) Create(ctx context.Context, token provisioning.Token) (provisioning.Token, error) {
	if mock.CreateFunc == nil {
		panic("TokenRepoMock.CreateFunc: method is nil but TokenRepo.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token provisioning.Token
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, token)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTokenRepo.CreateCalls())
func (mock *TokenRepoMock) CreateCalls() []struct {
	Ctx   context.Context
	Token provisioning.Token
} {
	var calls []struct {
		Ctx   context.Context
		Token provisioning.Token
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByID calls DeleteByIDFunc.
func (mock *TokenRepoMock) DeleteByID(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteByIDFunc == nil {
		panic("TokenRepoMock.DeleteByIDFunc: method is nil but TokenRepo.DeleteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByID.Lock()
	mock.calls.DeleteByID = append(mock.calls.DeleteByID, callInfo)
	mock.lockDeleteByID.Unlock()
	return mock.DeleteByIDFunc(ctx, id)
}

// DeleteByIDCalls gets all the calls that were made to DeleteByID.
// Check the length with:
//
//	len(mockedTokenRepo.DeleteByIDCalls())
func (mock *TokenRepoMock) DeleteByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteByID.RLock()
	calls = mock.calls.DeleteByID
	mock.lockDeleteByID.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *TokenRepoMock) GetAll(ctx context.Context) (provisioning.Tokens, error) {
	if mock.GetAllFunc == nil {
		panic("TokenRepoMock.GetAllFunc: method is nil but TokenRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedTokenRepo.GetAllCalls())
func (mock *TokenRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllIDs calls GetAllIDsFunc.
func (mock *TokenRepoMock) GetAllIDs(ctx context.Context) ([]uuid.UUID, error) {
	if mock.GetAllIDsFunc == nil {
		panic("TokenRepoMock.GetAllIDsFunc: method is nil but TokenRepo.GetAllIDs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllIDs.Lock()
	mock.calls.GetAllIDs = append(mock.calls.GetAllIDs, callInfo)
	mock.lockGetAllIDs.Unlock()
	return mock.GetAllIDsFunc(ctx)
}

// GetAllIDsCalls gets all the calls that were made to GetAllIDs.
// Check the length with:
//
//	len(mockedTokenRepo.GetAllIDsCalls())
func (mock *TokenRepoMock) GetAllIDsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllIDs.RLock()
	calls = mock.calls.GetAllIDs
	mock.lockGetAllIDs.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *TokenRepoMock) GetByID(ctx context.Context, id uuid.UUID) (provisioning.Token, error) {
	if mock.GetByIDFunc == nil {
		panic("TokenRepoMock.GetByIDFunc: method is nil but TokenRepo.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedTokenRepo.GetByIDCalls())
func (mock *TokenRepoMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// UpdateByID calls UpdateByIDFunc.
func (mock *TokenRepoMock) UpdateByID(ctx context.Context, token provisioning.Token) (provisioning.Token, error) {
	if mock.UpdateByIDFunc == nil {
		panic("TokenRepoMock.UpdateByIDFunc: method is nil but TokenRepo.UpdateByID was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token provisioning.Token
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockUpdateByID.Lock()
	mock.calls.UpdateByID = append(mock.calls.UpdateByID, callInfo)
	mock.lockUpdateByID.Unlock()
	return mock.UpdateByIDFunc(ctx, token)
}

// UpdateByIDCalls gets all the calls that were made to UpdateByID.
// Check the length with:
//
//	len(mockedTokenRepo.UpdateByIDCalls())
func (mock *TokenRepoMock) UpdateByIDCalls() []struct {
	Ctx   context.Context
	Token provisioning.Token
} {
	var calls []struct {
		Ctx   context.Context
		Token provisioning.Token
	}
	mock.lockUpdateByID.RLock()
	calls = mock.calls.UpdateByID
	mock.lockUpdateByID.RUnlock()
	return calls
}
