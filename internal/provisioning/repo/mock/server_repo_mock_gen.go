// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure, that ServerRepoMock does implement provisioning.ServerRepo.
// If this is not the case, regenerate this file with moq.
var _ provisioning.ServerRepo = &ServerRepoMock{}

// ServerRepoMock is a mock implementation of provisioning.ServerRepo.
//
//	func TestSomethingThatUsesServerRepo(t *testing.T) {
//
//		// make and configure a mocked provisioning.ServerRepo
//		mockedServerRepo := &ServerRepoMock{
//			CreateFunc: func(ctx context.Context, server provisioning.Server) (provisioning.Server, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByNameFunc: func(ctx context.Context, name string) error {
//				panic("mock out the DeleteByName method")
//			},
//			GetAllFunc: func(ctx context.Context) (provisioning.Servers, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllByClusterFunc: func(ctx context.Context, cluster string) (provisioning.Servers, error) {
//				panic("mock out the GetAllByCluster method")
//			},
//			GetAllNamesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllNames method")
//			},
//			GetByNameFunc: func(ctx context.Context, name string) (provisioning.Server, error) {
//				panic("mock out the GetByName method")
//			},
//			RenameFunc: func(ctx context.Context, name string, to string) error {
//				panic("mock out the Rename method")
//			},
//			UpdateByNameFunc: func(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error) {
//				panic("mock out the UpdateByName method")
//			},
//		}
//
//		// use mockedServerRepo in code that requires provisioning.ServerRepo
//		// and then make assertions.
//
//	}
type ServerRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, server provisioning.Server) (provisioning.Server, error)

	// DeleteByNameFunc mocks the DeleteByName method.
	DeleteByNameFunc func(ctx context.Context, name string) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Servers, error)

	// GetAllByClusterFunc mocks the GetAllByCluster method.
	GetAllByClusterFunc func(ctx context.Context, cluster string) (provisioning.Servers, error)

	// GetAllNamesFunc mocks the GetAllNames method.
	GetAllNamesFunc func(ctx context.Context) ([]string, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(ctx context.Context, name string) (provisioning.Server, error)

	// RenameFunc mocks the Rename method.
	RenameFunc func(ctx context.Context, name string, to string) error

	// UpdateByNameFunc mocks the UpdateByName method.
	UpdateByNameFunc func(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
		// DeleteByName holds details about calls to the DeleteByName method.
		DeleteByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllByCluster holds details about calls to the GetAllByCluster method.
		GetAllByCluster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster string
		}
		// GetAllNames holds details about calls to the GetAllNames method.
		GetAllNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// Rename holds details about calls to the Rename method.
		Rename []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// To is the to argument value.
			To string
		}
		// UpdateByName holds details about calls to the UpdateByName method.
		UpdateByName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Server is the server argument value.
			Server provisioning.Server
		}
	}
	lockCreate          sync.RWMutex
	lockDeleteByName    sync.RWMutex
	lockGetAll          sync.RWMutex
	lockGetAllByCluster sync.RWMutex
	lockGetAllNames     sync.RWMutex
	lockGetByName       sync.RWMutex
	lockRename          sync.RWMutex
	lockUpdateByName    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ServerRepoMock) Create(ctx context.Context, server provisioning.Server) (provisioning.Server, error) {
	if mock.CreateFunc == nil {
		panic("ServerRepoMock.CreateFunc: method is nil but ServerRepo.Create was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, server)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedServerRepo.CreateCalls())
func (mock *ServerRepoMock) CreateCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByName calls DeleteByNameFunc.
func (mock *ServerRepoMock) DeleteByName(ctx context.Context, name string) error {
	if mock.DeleteByNameFunc == nil {
		panic("ServerRepoMock.DeleteByNameFunc: method is nil but ServerRepo.DeleteByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockDeleteByName.Lock()
	mock.calls.DeleteByName = append(mock.calls.DeleteByName, callInfo)
	mock.lockDeleteByName.Unlock()
	return mock.DeleteByNameFunc(ctx, name)
}

// DeleteByNameCalls gets all the calls that were made to DeleteByName.
// Check the length with:
//
//	len(mockedServerRepo.DeleteByNameCalls())
func (mock *ServerRepoMock) DeleteByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockDeleteByName.RLock()
	calls = mock.calls.DeleteByName
	mock.lockDeleteByName.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *ServerRepoMock) GetAll(ctx context.Context) (provisioning.Servers, error) {
	if mock.GetAllFunc == nil {
		panic("ServerRepoMock.GetAllFunc: method is nil but ServerRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedServerRepo.GetAllCalls())
func (mock *ServerRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllByCluster calls GetAllByClusterFunc.
func (mock *ServerRepoMock) GetAllByCluster(ctx context.Context, cluster string) (provisioning.Servers, error) {
	if mock.GetAllByClusterFunc == nil {
		panic("ServerRepoMock.GetAllByClusterFunc: method is nil but ServerRepo.GetAllByCluster was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster string
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetAllByCluster.Lock()
	mock.calls.GetAllByCluster = append(mock.calls.GetAllByCluster, callInfo)
	mock.lockGetAllByCluster.Unlock()
	return mock.GetAllByClusterFunc(ctx, cluster)
}

// GetAllByClusterCalls gets all the calls that were made to GetAllByCluster.
// Check the length with:
//
//	len(mockedServerRepo.GetAllByClusterCalls())
func (mock *ServerRepoMock) GetAllByClusterCalls() []struct {
	Ctx     context.Context
	Cluster string
} {
	var calls []struct {
		Ctx     context.Context
		Cluster string
	}
	mock.lockGetAllByCluster.RLock()
	calls = mock.calls.GetAllByCluster
	mock.lockGetAllByCluster.RUnlock()
	return calls
}

// GetAllNames calls GetAllNamesFunc.
func (mock *ServerRepoMock) GetAllNames(ctx context.Context) ([]string, error) {
	if mock.GetAllNamesFunc == nil {
		panic("ServerRepoMock.GetAllNamesFunc: method is nil but ServerRepo.GetAllNames was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllNames.Lock()
	mock.calls.GetAllNames = append(mock.calls.GetAllNames, callInfo)
	mock.lockGetAllNames.Unlock()
	return mock.GetAllNamesFunc(ctx)
}

// GetAllNamesCalls gets all the calls that were made to GetAllNames.
// Check the length with:
//
//	len(mockedServerRepo.GetAllNamesCalls())
func (mock *ServerRepoMock) GetAllNamesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllNames.RLock()
	calls = mock.calls.GetAllNames
	mock.lockGetAllNames.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *ServerRepoMock) GetByName(ctx context.Context, name string) (provisioning.Server, error) {
	if mock.GetByNameFunc == nil {
		panic("ServerRepoMock.GetByNameFunc: method is nil but ServerRepo.GetByName was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(ctx, name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedServerRepo.GetByNameCalls())
func (mock *ServerRepoMock) GetByNameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}

// Rename calls RenameFunc.
func (mock *ServerRepoMock) Rename(ctx context.Context, name string, to string) error {
	if mock.RenameFunc == nil {
		panic("ServerRepoMock.RenameFunc: method is nil but ServerRepo.Rename was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		To   string
	}{
		Ctx:  ctx,
		Name: name,
		To:   to,
	}
	mock.lockRename.Lock()
	mock.calls.Rename = append(mock.calls.Rename, callInfo)
	mock.lockRename.Unlock()
	return mock.RenameFunc(ctx, name, to)
}

// RenameCalls gets all the calls that were made to Rename.
// Check the length with:
//
//	len(mockedServerRepo.RenameCalls())
func (mock *ServerRepoMock) RenameCalls() []struct {
	Ctx  context.Context
	Name string
	To   string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		To   string
	}
	mock.lockRename.RLock()
	calls = mock.calls.Rename
	mock.lockRename.RUnlock()
	return calls
}

// UpdateByName calls UpdateByNameFunc.
func (mock *ServerRepoMock) UpdateByName(ctx context.Context, name string, server provisioning.Server) (provisioning.Server, error) {
	if mock.UpdateByNameFunc == nil {
		panic("ServerRepoMock.UpdateByNameFunc: method is nil but ServerRepo.UpdateByName was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Name   string
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Name:   name,
		Server: server,
	}
	mock.lockUpdateByName.Lock()
	mock.calls.UpdateByName = append(mock.calls.UpdateByName, callInfo)
	mock.lockUpdateByName.Unlock()
	return mock.UpdateByNameFunc(ctx, name, server)
}

// UpdateByNameCalls gets all the calls that were made to UpdateByName.
// Check the length with:
//
//	len(mockedServerRepo.UpdateByNameCalls())
func (mock *ServerRepoMock) UpdateByNameCalls() []struct {
	Ctx    context.Context
	Name   string
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Name   string
		Server provisioning.Server
	}
	mock.lockUpdateByName.RLock()
	calls = mock.calls.UpdateByName
	mock.lockUpdateByName.RUnlock()
	return calls
}
