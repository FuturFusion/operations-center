// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure, that ServerRepoMock does implement provisioning.ServerRepo.
// If this is not the case, regenerate this file with moq.
var _ provisioning.ServerRepo = &ServerRepoMock{}

// ServerRepoMock is a mock implementation of provisioning.ServerRepo.
//
//	func TestSomethingThatUsesServerRepo(t *testing.T) {
//
//		// make and configure a mocked provisioning.ServerRepo
//		mockedServerRepo := &ServerRepoMock{
//			CreateFunc: func(ctx context.Context, server provisioning.Server) (provisioning.Server, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByIDFunc: func(ctx context.Context, id int) error {
//				panic("mock out the DeleteByID method")
//			},
//			GetAllFunc: func(ctx context.Context) (provisioning.Servers, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllHostnamesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetAllHostnames method")
//			},
//			GetByHostnameFunc: func(ctx context.Context, name string) (provisioning.Server, error) {
//				panic("mock out the GetByHostname method")
//			},
//			GetByIDFunc: func(ctx context.Context, id int) (provisioning.Server, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateByIDFunc: func(ctx context.Context, server provisioning.Server) (provisioning.Server, error) {
//				panic("mock out the UpdateByID method")
//			},
//		}
//
//		// use mockedServerRepo in code that requires provisioning.ServerRepo
//		// and then make assertions.
//
//	}
type ServerRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, server provisioning.Server) (provisioning.Server, error)

	// DeleteByIDFunc mocks the DeleteByID method.
	DeleteByIDFunc func(ctx context.Context, id int) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (provisioning.Servers, error)

	// GetAllHostnamesFunc mocks the GetAllHostnames method.
	GetAllHostnamesFunc func(ctx context.Context) ([]string, error)

	// GetByHostnameFunc mocks the GetByHostname method.
	GetByHostnameFunc func(ctx context.Context, name string) (provisioning.Server, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int) (provisioning.Server, error)

	// UpdateByIDFunc mocks the UpdateByID method.
	UpdateByIDFunc func(ctx context.Context, server provisioning.Server) (provisioning.Server, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
		// DeleteByID holds details about calls to the DeleteByID method.
		DeleteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllHostnames holds details about calls to the GetAllHostnames method.
		GetAllHostnames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByHostname holds details about calls to the GetByHostname method.
		GetByHostname []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// UpdateByID holds details about calls to the UpdateByID method.
		UpdateByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
	}
	lockCreate          sync.RWMutex
	lockDeleteByID      sync.RWMutex
	lockGetAll          sync.RWMutex
	lockGetAllHostnames sync.RWMutex
	lockGetByHostname   sync.RWMutex
	lockGetByID         sync.RWMutex
	lockUpdateByID      sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ServerRepoMock) Create(ctx context.Context, server provisioning.Server) (provisioning.Server, error) {
	if mock.CreateFunc == nil {
		panic("ServerRepoMock.CreateFunc: method is nil but ServerRepo.Create was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, server)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedServerRepo.CreateCalls())
func (mock *ServerRepoMock) CreateCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByID calls DeleteByIDFunc.
func (mock *ServerRepoMock) DeleteByID(ctx context.Context, id int) error {
	if mock.DeleteByIDFunc == nil {
		panic("ServerRepoMock.DeleteByIDFunc: method is nil but ServerRepo.DeleteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByID.Lock()
	mock.calls.DeleteByID = append(mock.calls.DeleteByID, callInfo)
	mock.lockDeleteByID.Unlock()
	return mock.DeleteByIDFunc(ctx, id)
}

// DeleteByIDCalls gets all the calls that were made to DeleteByID.
// Check the length with:
//
//	len(mockedServerRepo.DeleteByIDCalls())
func (mock *ServerRepoMock) DeleteByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockDeleteByID.RLock()
	calls = mock.calls.DeleteByID
	mock.lockDeleteByID.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *ServerRepoMock) GetAll(ctx context.Context) (provisioning.Servers, error) {
	if mock.GetAllFunc == nil {
		panic("ServerRepoMock.GetAllFunc: method is nil but ServerRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedServerRepo.GetAllCalls())
func (mock *ServerRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllHostnames calls GetAllHostnamesFunc.
func (mock *ServerRepoMock) GetAllHostnames(ctx context.Context) ([]string, error) {
	if mock.GetAllHostnamesFunc == nil {
		panic("ServerRepoMock.GetAllHostnamesFunc: method is nil but ServerRepo.GetAllHostnames was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllHostnames.Lock()
	mock.calls.GetAllHostnames = append(mock.calls.GetAllHostnames, callInfo)
	mock.lockGetAllHostnames.Unlock()
	return mock.GetAllHostnamesFunc(ctx)
}

// GetAllHostnamesCalls gets all the calls that were made to GetAllHostnames.
// Check the length with:
//
//	len(mockedServerRepo.GetAllHostnamesCalls())
func (mock *ServerRepoMock) GetAllHostnamesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllHostnames.RLock()
	calls = mock.calls.GetAllHostnames
	mock.lockGetAllHostnames.RUnlock()
	return calls
}

// GetByHostname calls GetByHostnameFunc.
func (mock *ServerRepoMock) GetByHostname(ctx context.Context, name string) (provisioning.Server, error) {
	if mock.GetByHostnameFunc == nil {
		panic("ServerRepoMock.GetByHostnameFunc: method is nil but ServerRepo.GetByHostname was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetByHostname.Lock()
	mock.calls.GetByHostname = append(mock.calls.GetByHostname, callInfo)
	mock.lockGetByHostname.Unlock()
	return mock.GetByHostnameFunc(ctx, name)
}

// GetByHostnameCalls gets all the calls that were made to GetByHostname.
// Check the length with:
//
//	len(mockedServerRepo.GetByHostnameCalls())
func (mock *ServerRepoMock) GetByHostnameCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetByHostname.RLock()
	calls = mock.calls.GetByHostname
	mock.lockGetByHostname.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *ServerRepoMock) GetByID(ctx context.Context, id int) (provisioning.Server, error) {
	if mock.GetByIDFunc == nil {
		panic("ServerRepoMock.GetByIDFunc: method is nil but ServerRepo.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedServerRepo.GetByIDCalls())
func (mock *ServerRepoMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// UpdateByID calls UpdateByIDFunc.
func (mock *ServerRepoMock) UpdateByID(ctx context.Context, server provisioning.Server) (provisioning.Server, error) {
	if mock.UpdateByIDFunc == nil {
		panic("ServerRepoMock.UpdateByIDFunc: method is nil but ServerRepo.UpdateByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockUpdateByID.Lock()
	mock.calls.UpdateByID = append(mock.calls.UpdateByID, callInfo)
	mock.lockUpdateByID.Unlock()
	return mock.UpdateByIDFunc(ctx, server)
}

// UpdateByIDCalls gets all the calls that were made to UpdateByID.
// Check the length with:
//
//	len(mockedServerRepo.UpdateByIDCalls())
func (mock *ServerRepoMock) UpdateByIDCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockUpdateByID.RLock()
	calls = mock.calls.UpdateByID
	mock.lockUpdateByID.RUnlock()
	return calls
}
