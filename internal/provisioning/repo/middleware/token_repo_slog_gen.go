// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// TokenRepoWithSlog implements provisioning.TokenRepo that is instrumented with slog logger.
type TokenRepoWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.TokenRepo
	_isInformativeErrFunc func(error) bool
}

type TokenRepoWithSlogOption func(s *TokenRepoWithSlog)

func TokenRepoWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) TokenRepoWithSlogOption {
	return func(_base *TokenRepoWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewTokenRepoWithSlog instruments an implementation of the provisioning.TokenRepo with simple logging.
func NewTokenRepoWithSlog(base provisioning.TokenRepo, log *slog.Logger, opts ...TokenRepoWithSlogOption) TokenRepoWithSlog {
	this := TokenRepoWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// Create implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) Create(ctx context.Context, token provisioning.Token) (n int64, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("token", token),
		)
	}
	log.DebugContext(ctx, "=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Int64("n", n),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Create returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Create returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, token)
}

// CreateTokenSeed implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) CreateTokenSeed(ctx context.Context, seedConfig provisioning.TokenSeed) (n int64, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("seedConfig", seedConfig),
		)
	}
	log.DebugContext(ctx, "=> calling CreateTokenSeed")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Int64("n", n),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method CreateTokenSeed returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method CreateTokenSeed returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method CreateTokenSeed finished")
		}
	}()
	return _d._base.CreateTokenSeed(ctx, seedConfig)
}

// DeleteByUUID implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling DeleteByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method DeleteByUUID returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method DeleteByUUID returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method DeleteByUUID finished")
		}
	}()
	return _d._base.DeleteByUUID(ctx, id)
}

// DeleteTokenSeedByName implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) DeleteTokenSeedByName(ctx context.Context, id uuid.UUID, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling DeleteTokenSeedByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method DeleteTokenSeedByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method DeleteTokenSeedByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method DeleteTokenSeedByName finished")
		}
	}()
	return _d._base.DeleteTokenSeedByName(ctx, id, name)
}

// GetAll implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) GetAll(ctx context.Context) (tokens provisioning.Tokens, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("tokens", tokens),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAll returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAll returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllUUIDs implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) GetAllUUIDs(ctx context.Context) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllUUIDs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllUUIDs returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllUUIDs returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllUUIDs finished")
		}
	}()
	return _d._base.GetAllUUIDs(ctx)
}

// GetByUUID implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) GetByUUID(ctx context.Context, id uuid.UUID) (token *provisioning.Token, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling GetByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("token", token),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetByUUID returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetByUUID returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetByUUID finished")
		}
	}()
	return _d._base.GetByUUID(ctx, id)
}

// GetTokenSeedAll implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) GetTokenSeedAll(ctx context.Context, id uuid.UUID) (tokenSeeds provisioning.TokenSeeds, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling GetTokenSeedAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("tokenSeeds", tokenSeeds),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetTokenSeedAll returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetTokenSeedAll returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetTokenSeedAll finished")
		}
	}()
	return _d._base.GetTokenSeedAll(ctx, id)
}

// GetTokenSeedAllNames implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) GetTokenSeedAllNames(ctx context.Context, id uuid.UUID) (strings []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling GetTokenSeedAllNames")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("strings", strings),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetTokenSeedAllNames returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetTokenSeedAllNames returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetTokenSeedAllNames finished")
		}
	}()
	return _d._base.GetTokenSeedAllNames(ctx, id)
}

// GetTokenSeedByName implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) GetTokenSeedByName(ctx context.Context, id uuid.UUID, name string) (tokenSeed *provisioning.TokenSeed, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling GetTokenSeedByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("tokenSeed", tokenSeed),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetTokenSeedByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetTokenSeedByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetTokenSeedByName finished")
		}
	}()
	return _d._base.GetTokenSeedByName(ctx, id, name)
}

// Update implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) Update(ctx context.Context, token provisioning.Token) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("token", token),
		)
	}
	log.DebugContext(ctx, "=> calling Update")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Update returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Update returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Update finished")
		}
	}()
	return _d._base.Update(ctx, token)
}

// UpdateTokenSeed implements provisioning.TokenRepo.
func (_d TokenRepoWithSlog) UpdateTokenSeed(ctx context.Context, tokenSeedConfig provisioning.TokenSeed) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("tokenSeedConfig", tokenSeedConfig),
		)
	}
	log.DebugContext(ctx, "=> calling UpdateTokenSeed")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method UpdateTokenSeed returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method UpdateTokenSeed returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method UpdateTokenSeed finished")
		}
	}()
	return _d._base.UpdateTokenSeed(ctx, tokenSeedConfig)
}
