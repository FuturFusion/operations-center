// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// ClusterRepoWithTransactionEnforcer implements provisioning.ClusterRepo that enforces a transaction.
type ClusterRepoWithTransactionEnforcer struct {
	_base provisioning.ClusterRepo
}

// NewClusterRepoWithTransactionEnforcer instruments an implementation of the provisioning.ClusterRepo with simple logging.
func NewClusterRepoWithTransactionEnforcer(base provisioning.ClusterRepo) ClusterRepoWithTransactionEnforcer {
	return ClusterRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements provisioning.ClusterRepo.
func (_d ClusterRepoWithTransactionEnforcer) Create(ctx context.Context, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		cluster1, err = _d._base.Create(ctx, cluster)
		return err
	})

	return cluster1, err
}

// DeleteByName implements provisioning.ClusterRepo.
func (_d ClusterRepoWithTransactionEnforcer) DeleteByName(ctx context.Context, name string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByName(ctx, name)
		return err
	})

	return err
}

// GetAll implements provisioning.ClusterRepo.
func (_d ClusterRepoWithTransactionEnforcer) GetAll(ctx context.Context) (clusters provisioning.Clusters, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		clusters, err = _d._base.GetAll(ctx)
		return err
	})

	return clusters, err
}

// GetAllNames implements provisioning.ClusterRepo.
func (_d ClusterRepoWithTransactionEnforcer) GetAllNames(ctx context.Context) (strings []string, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		strings, err = _d._base.GetAllNames(ctx)
		return err
	})

	return strings, err
}

// GetByName implements provisioning.ClusterRepo.
func (_d ClusterRepoWithTransactionEnforcer) GetByName(ctx context.Context, name string) (cluster provisioning.Cluster, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		cluster, err = _d._base.GetByName(ctx, name)
		return err
	})

	return cluster, err
}

// UpdateByName implements provisioning.ClusterRepo.
func (_d ClusterRepoWithTransactionEnforcer) UpdateByName(ctx context.Context, name string, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		cluster1, err = _d._base.UpdateByName(ctx, name, cluster)
		return err
	})

	return cluster1, err
}
