// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// UpdateRepoWithPrometheus implements provisioning.UpdateRepo interface with all methods wrapped
// with Prometheus metrics.
type UpdateRepoWithPrometheus struct {
	base         provisioning.UpdateRepo
	instanceName string
}

var updateRepoDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "update_repo_duration_seconds",
		Help:       "updateRepo runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewUpdateRepoWithPrometheus returns an instance of the provisioning.UpdateRepo decorated with prometheus summary metric.
func NewUpdateRepoWithPrometheus(base provisioning.UpdateRepo, instanceName string) UpdateRepoWithPrometheus {
	return UpdateRepoWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// DeleteByUUID implements provisioning.UpdateRepo.
func (_d UpdateRepoWithPrometheus) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByUUID(ctx, id)
}

// GetAll implements provisioning.UpdateRepo.
func (_d UpdateRepoWithPrometheus) GetAll(ctx context.Context) (updates provisioning.Updates, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAll(ctx)
}

// GetAllUUIDs implements provisioning.UpdateRepo.
func (_d UpdateRepoWithPrometheus) GetAllUUIDs(ctx context.Context) (uUIDs []uuid.UUID, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllUUIDs", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllUUIDs(ctx)
}

// GetByUUID implements provisioning.UpdateRepo.
func (_d UpdateRepoWithPrometheus) GetByUUID(ctx context.Context, id uuid.UUID) (update *provisioning.Update, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByUUID(ctx, id)
}

// Upsert implements provisioning.UpdateRepo.
func (_d UpdateRepoWithPrometheus) Upsert(ctx context.Context, update provisioning.Update) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "Upsert", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Upsert(ctx, update)
}
