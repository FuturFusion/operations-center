// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/transaction"
)

// ServerRepoWithTransactionEnforcer implements provisioning.ServerRepo that enforces a transaction.
type ServerRepoWithTransactionEnforcer struct {
	_base provisioning.ServerRepo
}

// NewServerRepoWithTransactionEnforcer instruments an implementation of the provisioning.ServerRepo with simple logging.
func NewServerRepoWithTransactionEnforcer(base provisioning.ServerRepo) ServerRepoWithTransactionEnforcer {
	return ServerRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements provisioning.ServerRepo.
func (_d ServerRepoWithTransactionEnforcer) Create(ctx context.Context, server provisioning.Server) (server1 provisioning.Server, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		server1, err = _d._base.Create(ctx, server)
		return err
	})

	return server1, err
}

// DeleteByName implements provisioning.ServerRepo.
func (_d ServerRepoWithTransactionEnforcer) DeleteByName(ctx context.Context, name string) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByName(ctx, name)
		return err
	})

	return err
}

// GetAll implements provisioning.ServerRepo.
func (_d ServerRepoWithTransactionEnforcer) GetAll(ctx context.Context) (servers provisioning.Servers, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		servers, err = _d._base.GetAll(ctx)
		return err
	})

	return servers, err
}

// GetAllByClusterID implements provisioning.ServerRepo.
func (_d ServerRepoWithTransactionEnforcer) GetAllByClusterID(ctx context.Context, clusterID int) (servers provisioning.Servers, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		servers, err = _d._base.GetAllByClusterID(ctx, clusterID)
		return err
	})

	return servers, err
}

// GetAllNames implements provisioning.ServerRepo.
func (_d ServerRepoWithTransactionEnforcer) GetAllNames(ctx context.Context) (strings []string, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		strings, err = _d._base.GetAllNames(ctx)
		return err
	})

	return strings, err
}

// GetByName implements provisioning.ServerRepo.
func (_d ServerRepoWithTransactionEnforcer) GetByName(ctx context.Context, name string) (server provisioning.Server, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		server, err = _d._base.GetByName(ctx, name)
		return err
	})

	return server, err
}

// UpdateByName implements provisioning.ServerRepo.
func (_d ServerRepoWithTransactionEnforcer) UpdateByName(ctx context.Context, name string, server provisioning.Server) (server1 provisioning.Server, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		server1, err = _d._base.UpdateByName(ctx, name, server)
		return err
	})

	return server1, err
}
