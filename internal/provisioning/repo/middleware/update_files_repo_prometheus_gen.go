// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"archive/tar"
	"context"
	"io"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// UpdateFilesRepoWithPrometheus implements provisioning.UpdateFilesRepo interface with all methods wrapped
// with Prometheus metrics.
type UpdateFilesRepoWithPrometheus struct {
	base         provisioning.UpdateFilesRepo
	instanceName string
}

var updateFilesRepoDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "update_files_repo_duration_seconds",
		Help:       "updateFilesRepo runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewUpdateFilesRepoWithPrometheus returns an instance of the provisioning.UpdateFilesRepo decorated with prometheus summary metric.
func NewUpdateFilesRepoWithPrometheus(base provisioning.UpdateFilesRepo, instanceName string) UpdateFilesRepoWithPrometheus {
	return UpdateFilesRepoWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// CleanupAll implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithPrometheus) CleanupAll(ctx context.Context) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateFilesRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "CleanupAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CleanupAll(ctx)
}

// CreateFromArchive implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithPrometheus) CreateFromArchive(ctx context.Context, tarReader *tar.Reader) (update *provisioning.Update, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateFilesRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "CreateFromArchive", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.CreateFromArchive(ctx, tarReader)
}

// Delete implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithPrometheus) Delete(ctx context.Context, update provisioning.Update) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateFilesRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "Delete", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Delete(ctx, update)
}

// Get implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithPrometheus) Get(ctx context.Context, update provisioning.Update, filename string) (readCloser io.ReadCloser, size int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateFilesRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "Get", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Get(ctx, update, filename)
}

// Put implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithPrometheus) Put(ctx context.Context, update provisioning.Update, filename string, content io.ReadCloser) (commitFunc provisioning.CommitFunc, cancelFunc provisioning.CancelFunc, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateFilesRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "Put", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Put(ctx, update, filename, content)
}

// UsageInformation implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithPrometheus) UsageInformation(ctx context.Context) (usageInformation provisioning.UsageInformation, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateFilesRepoDurationSummaryVec.WithLabelValues(_d.instanceName, "UsageInformation", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UsageInformation(ctx)
}
