// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"archive/tar"
	"context"
	"io"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// UpdateFilesRepoWithSlog implements provisioning.UpdateFilesRepo that is instrumented with slog logger.
type UpdateFilesRepoWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.UpdateFilesRepo
	_isInformativeErrFunc func(error) bool
}

type UpdateFilesRepoWithSlogOption func(s *UpdateFilesRepoWithSlog)

func UpdateFilesRepoWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) UpdateFilesRepoWithSlogOption {
	return func(_base *UpdateFilesRepoWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewUpdateFilesRepoWithSlog instruments an implementation of the provisioning.UpdateFilesRepo with simple logging.
func NewUpdateFilesRepoWithSlog(base provisioning.UpdateFilesRepo, log *slog.Logger, opts ...UpdateFilesRepoWithSlogOption) UpdateFilesRepoWithSlog {
	this := UpdateFilesRepoWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// CreateFromArchive implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithSlog) CreateFromArchive(ctx context.Context, tarReader *tar.Reader) (update *provisioning.Update, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("tarReader", tarReader),
		)
	}
	log.Debug("=> calling CreateFromArchive")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("update", update),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method CreateFromArchive returned an informative error")
			} else {
				log.Error("<= method CreateFromArchive returned an error")
			}
		} else {
			log.Debug("<= method CreateFromArchive finished")
		}
	}()
	return _d._base.CreateFromArchive(ctx, tarReader)
}

// Delete implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithSlog) Delete(ctx context.Context, update provisioning.Update) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("update", update),
		)
	}
	log.Debug("=> calling Delete")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Delete returned an informative error")
			} else {
				log.Error("<= method Delete returned an error")
			}
		} else {
			log.Debug("<= method Delete finished")
		}
	}()
	return _d._base.Delete(ctx, update)
}

// Get implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithSlog) Get(ctx context.Context, update provisioning.Update, filename string) (readCloser io.ReadCloser, size int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("update", update),
			slog.String("filename", filename),
		)
	}
	log.Debug("=> calling Get")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("readCloser", readCloser),
				slog.Int("size", size),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Get returned an informative error")
			} else {
				log.Error("<= method Get returned an error")
			}
		} else {
			log.Debug("<= method Get finished")
		}
	}()
	return _d._base.Get(ctx, update, filename)
}

// Put implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithSlog) Put(ctx context.Context, update provisioning.Update, filename string, content io.ReadCloser) (commitFunc provisioning.CommitFunc, cancelFunc provisioning.CancelFunc, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("update", update),
			slog.String("filename", filename),
			slog.Any("content", content),
		)
	}
	log.Debug("=> calling Put")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("commitFunc", commitFunc),
				slog.Any("cancelFunc", cancelFunc),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Put returned an informative error")
			} else {
				log.Error("<= method Put returned an error")
			}
		} else {
			log.Debug("<= method Put finished")
		}
	}()
	return _d._base.Put(ctx, update, filename, content)
}

// UsageInformation implements provisioning.UpdateFilesRepo.
func (_d UpdateFilesRepoWithSlog) UsageInformation(ctx context.Context) (usageInformation provisioning.UsageInformation, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling UsageInformation")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("usageInformation", usageInformation),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method UsageInformation returned an informative error")
			} else {
				log.Error("<= method UsageInformation returned an error")
			}
		} else {
			log.Debug("<= method UsageInformation finished")
		}
	}()
	return _d._base.UsageInformation(ctx)
}
