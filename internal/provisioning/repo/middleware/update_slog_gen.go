// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"io"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	_sourceProvisioning "github.com/FuturFusion/operations-center/internal/provisioning"
)

// UpdateRepoWithSlog implements _sourceProvisioning.UpdateRepo that is instrumented with slog logger
type UpdateRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceProvisioning.UpdateRepo
}

// NewUpdateRepoWithSlog instruments an implementation of the _sourceProvisioning.UpdateRepo with simple logging
func NewUpdateRepoWithSlog(base _sourceProvisioning.UpdateRepo, log *slog.Logger) UpdateRepoWithSlog {
	return UpdateRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// GetAll implements _sourceProvisioning.UpdateRepo
func (_d UpdateRepoWithSlog) GetAll(ctx context.Context) (u1 _sourceProvisioning.Updates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("UpdateRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("u1", u1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("UpdateRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("UpdateRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllIDs implements _sourceProvisioning.UpdateRepo
func (_d UpdateRepoWithSlog) GetAllIDs(ctx context.Context) (sa1 []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("UpdateRepoWithSlog: calling GetAllIDs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("sa1", sa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("UpdateRepoWithSlog: method GetAllIDs returned an error")
		} else {
			log.Debug("UpdateRepoWithSlog: method GetAllIDs finished")
		}
	}()
	return _d._base.GetAllIDs(ctx)
}

// GetByID implements _sourceProvisioning.UpdateRepo
func (_d UpdateRepoWithSlog) GetByID(ctx context.Context, id string) (u1 _sourceProvisioning.Update, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("id", id),
		)
	}
	log.Debug("UpdateRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("u1", u1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("UpdateRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("UpdateRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// GetUpdateAllFiles implements _sourceProvisioning.UpdateRepo
func (_d UpdateRepoWithSlog) GetUpdateAllFiles(ctx context.Context, updateID string) (u1 _sourceProvisioning.UpdateFiles, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("updateID", updateID),
		)
	}
	log.Debug("UpdateRepoWithSlog: calling GetUpdateAllFiles")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("u1", u1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("UpdateRepoWithSlog: method GetUpdateAllFiles returned an error")
		} else {
			log.Debug("UpdateRepoWithSlog: method GetUpdateAllFiles finished")
		}
	}()
	return _d._base.GetUpdateAllFiles(ctx, updateID)
}

// GetUpdateFileByFilename implements _sourceProvisioning.UpdateRepo
func (_d UpdateRepoWithSlog) GetUpdateFileByFilename(ctx context.Context, updateID string, filename string) (r1 io.ReadCloser, i1 int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("updateID", updateID),
			slog.String("filename", filename),
		)
	}
	log.Debug("UpdateRepoWithSlog: calling GetUpdateFileByFilename")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("r1", r1),
				slog.Int("i1", i1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("UpdateRepoWithSlog: method GetUpdateFileByFilename returned an error")
		} else {
			log.Debug("UpdateRepoWithSlog: method GetUpdateFileByFilename finished")
		}
	}()
	return _d._base.GetUpdateFileByFilename(ctx, updateID, filename)
}
