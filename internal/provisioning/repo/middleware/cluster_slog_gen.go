// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceProvisioning "github.com/FuturFusion/operations-center/internal/provisioning"
)

// ClusterRepoWithSlog implements _sourceProvisioning.ClusterRepo that is instrumented with slog logger
type ClusterRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceProvisioning.ClusterRepo
}

// NewClusterRepoWithSlog instruments an implementation of the _sourceProvisioning.ClusterRepo with simple logging
func NewClusterRepoWithSlog(base _sourceProvisioning.ClusterRepo, log *slog.Logger) ClusterRepoWithSlog {
	return ClusterRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceProvisioning.ClusterRepo
func (_d ClusterRepoWithSlog) Create(ctx context.Context, cluster _sourceProvisioning.Cluster) (c2 _sourceProvisioning.Cluster, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("cluster", cluster),
	).Debug("ClusterRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("c2", c2),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ClusterRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, cluster)
}

// DeleteByID implements _sourceProvisioning.ClusterRepo
func (_d ClusterRepoWithSlog) DeleteByID(ctx context.Context, id int) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("ClusterRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ClusterRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// GetAll implements _sourceProvisioning.ClusterRepo
func (_d ClusterRepoWithSlog) GetAll(ctx context.Context) (c2 _sourceProvisioning.Clusters, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("ClusterRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With(
			slog.Any("c2", c2),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ClusterRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllNames implements _sourceProvisioning.ClusterRepo
func (_d ClusterRepoWithSlog) GetAllNames(ctx context.Context) (sa1 []string, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("ClusterRepoWithSlog: calling GetAllNames")
	defer func() {
		log := _d._log.With(
			slog.Any("sa1", sa1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ClusterRepoWithSlog: method GetAllNames returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method GetAllNames finished")
		}
	}()
	return _d._base.GetAllNames(ctx)
}

// GetByID implements _sourceProvisioning.ClusterRepo
func (_d ClusterRepoWithSlog) GetByID(ctx context.Context, id int) (c2 _sourceProvisioning.Cluster, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("ClusterRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("c2", c2),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ClusterRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// GetByName implements _sourceProvisioning.ClusterRepo
func (_d ClusterRepoWithSlog) GetByName(ctx context.Context, name string) (c2 _sourceProvisioning.Cluster, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("name", name),
	).Debug("ClusterRepoWithSlog: calling GetByName")
	defer func() {
		log := _d._log.With(
			slog.Any("c2", c2),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ClusterRepoWithSlog: method GetByName returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method GetByName finished")
		}
	}()
	return _d._base.GetByName(ctx, name)
}

// UpdateByID implements _sourceProvisioning.ClusterRepo
func (_d ClusterRepoWithSlog) UpdateByID(ctx context.Context, cluster _sourceProvisioning.Cluster) (c2 _sourceProvisioning.Cluster, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("cluster", cluster),
	).Debug("ClusterRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With(
			slog.Any("c2", c2),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ClusterRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, cluster)
}
