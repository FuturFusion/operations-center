// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/transaction/transaction_enforcer.gotmpl

package middleware

import (
	"context"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/internal/transaction"
	"github.com/google/uuid"
)

// TokenRepoWithTransactionEnforcer implements provisioning.TokenRepo that enforces a transaction.
type TokenRepoWithTransactionEnforcer struct {
	_base provisioning.TokenRepo
}

// NewTokenRepoWithTransactionEnforcer instruments an implementation of the provisioning.TokenRepo with simple logging.
func NewTokenRepoWithTransactionEnforcer(base provisioning.TokenRepo) TokenRepoWithTransactionEnforcer {
	return TokenRepoWithTransactionEnforcer{
		_base: base,
	}
}

// Create implements provisioning.TokenRepo.
func (_d TokenRepoWithTransactionEnforcer) Create(ctx context.Context, token provisioning.Token) (token1 provisioning.Token, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		token1, err = _d._base.Create(ctx, token)
		return err
	})

	return token1, err
}

// DeleteByID implements provisioning.TokenRepo.
func (_d TokenRepoWithTransactionEnforcer) DeleteByID(ctx context.Context, id uuid.UUID) (err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		err = _d._base.DeleteByID(ctx, id)
		return err
	})

	return err
}

// GetAll implements provisioning.TokenRepo.
func (_d TokenRepoWithTransactionEnforcer) GetAll(ctx context.Context) (tokens provisioning.Tokens, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		tokens, err = _d._base.GetAll(ctx)
		return err
	})

	return tokens, err
}

// GetAllIDs implements provisioning.TokenRepo.
func (_d TokenRepoWithTransactionEnforcer) GetAllIDs(ctx context.Context) (uUIDs []uuid.UUID, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		uUIDs, err = _d._base.GetAllIDs(ctx)
		return err
	})

	return uUIDs, err
}

// GetByID implements provisioning.TokenRepo.
func (_d TokenRepoWithTransactionEnforcer) GetByID(ctx context.Context, id uuid.UUID) (token provisioning.Token, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		token, err = _d._base.GetByID(ctx, id)
		return err
	})

	return token, err
}

// UpdateByID implements provisioning.TokenRepo.
func (_d TokenRepoWithTransactionEnforcer) UpdateByID(ctx context.Context, token provisioning.Token) (token1 provisioning.Token, err error) {

	err = transaction.Do(ctx, func(ctx context.Context) error {
		token1, err = _d._base.UpdateByID(ctx, token)
		return err
	})

	return token1, err
}
