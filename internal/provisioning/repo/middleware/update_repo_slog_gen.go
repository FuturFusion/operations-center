// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// UpdateRepoWithSlog implements provisioning.UpdateRepo that is instrumented with slog logger.
type UpdateRepoWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.UpdateRepo
	_isInformativeErrFunc func(error) bool
}

type UpdateRepoWithSlogOption func(s *UpdateRepoWithSlog)

func UpdateRepoWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) UpdateRepoWithSlogOption {
	return func(_base *UpdateRepoWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewUpdateRepoWithSlog instruments an implementation of the provisioning.UpdateRepo with simple logging.
func NewUpdateRepoWithSlog(base provisioning.UpdateRepo, log *slog.Logger, opts ...UpdateRepoWithSlogOption) UpdateRepoWithSlog {
	this := UpdateRepoWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// DeleteByUUID implements provisioning.UpdateRepo.
func (_d UpdateRepoWithSlog) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling DeleteByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method DeleteByUUID returned an informative error")
			} else {
				log.Error("<= method DeleteByUUID returned an error")
			}
		} else {
			log.Debug("<= method DeleteByUUID finished")
		}
	}()
	return _d._base.DeleteByUUID(ctx, id)
}

// GetAll implements provisioning.UpdateRepo.
func (_d UpdateRepoWithSlog) GetAll(ctx context.Context) (updates provisioning.Updates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("updates", updates),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetAll returned an informative error")
			} else {
				log.Error("<= method GetAll returned an error")
			}
		} else {
			log.Debug("<= method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllUUIDs implements provisioning.UpdateRepo.
func (_d UpdateRepoWithSlog) GetAllUUIDs(ctx context.Context) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling GetAllUUIDs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetAllUUIDs returned an informative error")
			} else {
				log.Error("<= method GetAllUUIDs returned an error")
			}
		} else {
			log.Debug("<= method GetAllUUIDs finished")
		}
	}()
	return _d._base.GetAllUUIDs(ctx)
}

// GetAllUUIDsWithFilter implements provisioning.UpdateRepo.
func (_d UpdateRepoWithSlog) GetAllUUIDsWithFilter(ctx context.Context, filter provisioning.UpdateFilter) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("=> calling GetAllUUIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetAllUUIDsWithFilter returned an informative error")
			} else {
				log.Error("<= method GetAllUUIDsWithFilter returned an error")
			}
		} else {
			log.Debug("<= method GetAllUUIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements provisioning.UpdateRepo.
func (_d UpdateRepoWithSlog) GetAllWithFilter(ctx context.Context, filter provisioning.UpdateFilter) (updates provisioning.Updates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.Debug("=> calling GetAllWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("updates", updates),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetAllWithFilter returned an informative error")
			} else {
				log.Error("<= method GetAllWithFilter returned an error")
			}
		} else {
			log.Debug("<= method GetAllWithFilter finished")
		}
	}()
	return _d._base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements provisioning.UpdateRepo.
func (_d UpdateRepoWithSlog) GetByUUID(ctx context.Context, id uuid.UUID) (update *provisioning.Update, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling GetByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("update", update),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetByUUID returned an informative error")
			} else {
				log.Error("<= method GetByUUID returned an error")
			}
		} else {
			log.Debug("<= method GetByUUID finished")
		}
	}()
	return _d._base.GetByUUID(ctx, id)
}

// Upsert implements provisioning.UpdateRepo.
func (_d UpdateRepoWithSlog) Upsert(ctx context.Context, update provisioning.Update) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("update", update),
		)
	}
	log.Debug("=> calling Upsert")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Upsert returned an informative error")
			} else {
				log.Error("<= method Upsert returned an error")
			}
		} else {
			log.Debug("<= method Upsert finished")
		}
	}()
	return _d._base.Upsert(ctx, update)
}
