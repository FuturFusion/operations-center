// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceProvisioning "github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// TokenRepoWithSlog implements _sourceProvisioning.TokenRepo that is instrumented with slog logger
type TokenRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceProvisioning.TokenRepo
}

// NewTokenRepoWithSlog instruments an implementation of the _sourceProvisioning.TokenRepo with simple logging
func NewTokenRepoWithSlog(base _sourceProvisioning.TokenRepo, log *slog.Logger) TokenRepoWithSlog {
	return TokenRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceProvisioning.TokenRepo
func (_d TokenRepoWithSlog) Create(ctx context.Context, token _sourceProvisioning.Token) (t1 _sourceProvisioning.Token, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("token", token),
	).Debug("TokenRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("t1", t1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("TokenRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("TokenRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, token)
}

// DeleteByID implements _sourceProvisioning.TokenRepo
func (_d TokenRepoWithSlog) DeleteByID(ctx context.Context, id uuid.UUID) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("TokenRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("TokenRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("TokenRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// GetAll implements _sourceProvisioning.TokenRepo
func (_d TokenRepoWithSlog) GetAll(ctx context.Context) (t1 _sourceProvisioning.Tokens, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("TokenRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With(
			slog.Any("t1", t1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("TokenRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("TokenRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllIDs implements _sourceProvisioning.TokenRepo
func (_d TokenRepoWithSlog) GetAllIDs(ctx context.Context) (ua1 []uuid.UUID, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("TokenRepoWithSlog: calling GetAllIDs")
	defer func() {
		log := _d._log.With(
			slog.Any("ua1", ua1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("TokenRepoWithSlog: method GetAllIDs returned an error")
		} else {
			log.Debug("TokenRepoWithSlog: method GetAllIDs finished")
		}
	}()
	return _d._base.GetAllIDs(ctx)
}

// GetByID implements _sourceProvisioning.TokenRepo
func (_d TokenRepoWithSlog) GetByID(ctx context.Context, id uuid.UUID) (t1 _sourceProvisioning.Token, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("id", id),
	).Debug("TokenRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("t1", t1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("TokenRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("TokenRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements _sourceProvisioning.TokenRepo
func (_d TokenRepoWithSlog) UpdateByID(ctx context.Context, token _sourceProvisioning.Token) (t1 _sourceProvisioning.Token, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("token", token),
	).Debug("TokenRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With(
			slog.Any("t1", t1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("TokenRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("TokenRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, token)
}
