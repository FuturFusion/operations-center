// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// ClusterRepoWithSlog implements provisioning.ClusterRepo that is instrumented with slog logger.
type ClusterRepoWithSlog struct {
	_log  *slog.Logger
	_base provisioning.ClusterRepo
}

// NewClusterRepoWithSlog instruments an implementation of the provisioning.ClusterRepo with simple logging.
func NewClusterRepoWithSlog(base provisioning.ClusterRepo, log *slog.Logger) ClusterRepoWithSlog {
	return ClusterRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements provisioning.ClusterRepo.
func (_d ClusterRepoWithSlog) Create(ctx context.Context, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("ClusterRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster1", cluster1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, cluster)
}

// DeleteByName implements provisioning.ClusterRepo.
func (_d ClusterRepoWithSlog) DeleteByName(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("ClusterRepoWithSlog: calling DeleteByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterRepoWithSlog: method DeleteByName returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method DeleteByName finished")
		}
	}()
	return _d._base.DeleteByName(ctx, name)
}

// GetAll implements provisioning.ClusterRepo.
func (_d ClusterRepoWithSlog) GetAll(ctx context.Context) (clusters provisioning.Clusters, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("ClusterRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusters", clusters),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllNames implements provisioning.ClusterRepo.
func (_d ClusterRepoWithSlog) GetAllNames(ctx context.Context) (strings []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("ClusterRepoWithSlog: calling GetAllNames")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("strings", strings),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterRepoWithSlog: method GetAllNames returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method GetAllNames finished")
		}
	}()
	return _d._base.GetAllNames(ctx)
}

// GetByName implements provisioning.ClusterRepo.
func (_d ClusterRepoWithSlog) GetByName(ctx context.Context, name string) (cluster provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("ClusterRepoWithSlog: calling GetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster", cluster),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterRepoWithSlog: method GetByName returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method GetByName finished")
		}
	}()
	return _d._base.GetByName(ctx, name)
}

// UpdateByName implements provisioning.ClusterRepo.
func (_d ClusterRepoWithSlog) UpdateByName(ctx context.Context, name string, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("ClusterRepoWithSlog: calling UpdateByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster1", cluster1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterRepoWithSlog: method UpdateByName returned an error")
		} else {
			log.Debug("ClusterRepoWithSlog: method UpdateByName finished")
		}
	}()
	return _d._base.UpdateByName(ctx, name, cluster)
}
