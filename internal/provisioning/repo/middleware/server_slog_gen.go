// Code generated by gowrap. DO NOT EDIT.
// template: ../../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	_sourceProvisioning "github.com/FuturFusion/operations-center/internal/provisioning"
)

// ServerRepoWithSlog implements _sourceProvisioning.ServerRepo that is instrumented with slog logger
type ServerRepoWithSlog struct {
	_log  *slog.Logger
	_base _sourceProvisioning.ServerRepo
}

// NewServerRepoWithSlog instruments an implementation of the _sourceProvisioning.ServerRepo with simple logging
func NewServerRepoWithSlog(base _sourceProvisioning.ServerRepo, log *slog.Logger) ServerRepoWithSlog {
	return ServerRepoWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceProvisioning.ServerRepo
func (_d ServerRepoWithSlog) Create(ctx context.Context, server _sourceProvisioning.Server) (s1 _sourceProvisioning.Server, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("server", server),
	).Debug("ServerRepoWithSlog: calling Create")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ServerRepoWithSlog: method Create returned an error")
		} else {
			log.Debug("ServerRepoWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, server)
}

// DeleteByID implements _sourceProvisioning.ServerRepo
func (_d ServerRepoWithSlog) DeleteByID(ctx context.Context, id int) (err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("ServerRepoWithSlog: calling DeleteByID")
	defer func() {
		log := _d._log.With(
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ServerRepoWithSlog: method DeleteByID returned an error")
		} else {
			log.Debug("ServerRepoWithSlog: method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// GetAll implements _sourceProvisioning.ServerRepo
func (_d ServerRepoWithSlog) GetAll(ctx context.Context) (s1 _sourceProvisioning.Servers, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("ServerRepoWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ServerRepoWithSlog: method GetAll returned an error")
		} else {
			log.Debug("ServerRepoWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllHostnames implements _sourceProvisioning.ServerRepo
func (_d ServerRepoWithSlog) GetAllHostnames(ctx context.Context) (sa1 []string, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
	).Debug("ServerRepoWithSlog: calling GetAllHostnames")
	defer func() {
		log := _d._log.With(
			slog.Any("sa1", sa1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ServerRepoWithSlog: method GetAllHostnames returned an error")
		} else {
			log.Debug("ServerRepoWithSlog: method GetAllHostnames finished")
		}
	}()
	return _d._base.GetAllHostnames(ctx)
}

// GetByHostname implements _sourceProvisioning.ServerRepo
func (_d ServerRepoWithSlog) GetByHostname(ctx context.Context, name string) (s1 _sourceProvisioning.Server, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.String("name", name),
	).Debug("ServerRepoWithSlog: calling GetByHostname")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ServerRepoWithSlog: method GetByHostname returned an error")
		} else {
			log.Debug("ServerRepoWithSlog: method GetByHostname finished")
		}
	}()
	return _d._base.GetByHostname(ctx, name)
}

// GetByID implements _sourceProvisioning.ServerRepo
func (_d ServerRepoWithSlog) GetByID(ctx context.Context, id int) (s1 _sourceProvisioning.Server, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Int("id", id),
	).Debug("ServerRepoWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ServerRepoWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ServerRepoWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements _sourceProvisioning.ServerRepo
func (_d ServerRepoWithSlog) UpdateByID(ctx context.Context, server _sourceProvisioning.Server) (s1 _sourceProvisioning.Server, err error) {
	_d._log.With(
		slog.Any("ctx", ctx),
		slog.Any("server", server),
	).Debug("ServerRepoWithSlog: calling UpdateByID")
	defer func() {
		log := _d._log.With(
			slog.Any("s1", s1),
			slog.Any("err", err),
		)
		if err != nil {
			log.Error("ServerRepoWithSlog: method UpdateByID returned an error")
		} else {
			log.Debug("ServerRepoWithSlog: method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, server)
}
