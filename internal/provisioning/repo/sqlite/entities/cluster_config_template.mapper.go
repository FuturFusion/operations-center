// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
)

var clusterTemplateObjects = RegisterStmt(`
SELECT cluster_templates.id, cluster_templates.name, cluster_templates.description, cluster_templates.service_config_template, cluster_templates.application_config_template, cluster_templates.variables, cluster_templates.last_updated
  FROM cluster_templates
  ORDER BY cluster_templates.name
`)

var clusterTemplateObjectsByName = RegisterStmt(`
SELECT cluster_templates.id, cluster_templates.name, cluster_templates.description, cluster_templates.service_config_template, cluster_templates.application_config_template, cluster_templates.variables, cluster_templates.last_updated
  FROM cluster_templates
  WHERE ( cluster_templates.name = ? )
  ORDER BY cluster_templates.name
`)

var clusterTemplateNames = RegisterStmt(`
SELECT cluster_templates.name
  FROM cluster_templates
  ORDER BY cluster_templates.name
`)

var clusterTemplateID = RegisterStmt(`
SELECT cluster_templates.id FROM cluster_templates
  WHERE cluster_templates.name = ?
`)

var clusterTemplateCreate = RegisterStmt(`
INSERT INTO cluster_templates (name, description, service_config_template, application_config_template, variables, last_updated)
  VALUES (?, ?, ?, ?, ?, ?)
`)

var clusterTemplateUpdate = RegisterStmt(`
UPDATE cluster_templates
  SET name = ?, description = ?, service_config_template = ?, application_config_template = ?, variables = ?, last_updated = ?
 WHERE id = ?
`)

var clusterTemplateRename = RegisterStmt(`
UPDATE cluster_templates SET name = ?, last_updated = ? WHERE name = ?
`)

var clusterTemplateDeleteByName = RegisterStmt(`
DELETE FROM cluster_templates WHERE name = ?
`)

// GetClusterTemplateID return the ID of the cluster_template with the given key.
// generator: cluster_template ID
func GetClusterTemplateID(ctx context.Context, db tx, name string) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	stmt, err := Stmt(db, clusterTemplateID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"clusterTemplateID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"cluster_templates\" ID: %w", err)
	}

	return id, nil
}

// ClusterTemplateExists checks if a cluster_template with the given key exists.
// generator: cluster_template Exists
func ClusterTemplateExists(ctx context.Context, db dbtx, name string) (_ bool, _err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	stmt, err := Stmt(db, clusterTemplateID)
	if err != nil {
		return false, fmt.Errorf("Failed to get \"clusterTemplateID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}

	if err != nil {
		return false, fmt.Errorf("Failed to get \"cluster_templates\" ID: %w", err)
	}

	return true, nil
}

// GetClusterTemplate returns the cluster_template with the given key.
// generator: cluster_template GetOne
func GetClusterTemplate(ctx context.Context, db dbtx, name string) (_ *provisioning.ClusterTemplate, _err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	filter := ClusterTemplateFilter{}
	filter.Name = &name

	objects, err := GetClusterTemplates(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_templates\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"cluster_templates\" entry matches")
	}
}

// clusterTemplateColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the ClusterTemplate entity.
func clusterTemplateColumns() string {
	return "cluster_templates.id, cluster_templates.name, cluster_templates.description, cluster_templates.service_config_template, cluster_templates.application_config_template, cluster_templates.variables, cluster_templates.last_updated"
}

// getClusterTemplates can be used to run handwritten sql.Stmts to return a slice of objects.
func getClusterTemplates(ctx context.Context, stmt *sql.Stmt, args ...any) ([]provisioning.ClusterTemplate, error) {
	objects := make([]provisioning.ClusterTemplate, 0)

	dest := func(scan func(dest ...any) error) error {
		c := provisioning.ClusterTemplate{}
		err := scan(&c.ID, &c.Name, &c.Description, &c.ServiceConfigTemplate, &c.ApplicationConfigTemplate, &c.Variables, &c.LastUpdated)
		if err != nil {
			return err
		}

		objects = append(objects, c)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_templates\" table: %w", err)
	}

	return objects, nil
}

// getClusterTemplatesRaw can be used to run handwritten query strings to return a slice of objects.
func getClusterTemplatesRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]provisioning.ClusterTemplate, error) {
	objects := make([]provisioning.ClusterTemplate, 0)

	dest := func(scan func(dest ...any) error) error {
		c := provisioning.ClusterTemplate{}
		err := scan(&c.ID, &c.Name, &c.Description, &c.ServiceConfigTemplate, &c.ApplicationConfigTemplate, &c.Variables, &c.LastUpdated)
		if err != nil {
			return err
		}

		objects = append(objects, c)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_templates\" table: %w", err)
	}

	return objects, nil
}

// GetClusterTemplates returns all available cluster_templates.
// generator: cluster_template GetMany
func GetClusterTemplates(ctx context.Context, db dbtx, filters ...ClusterTemplateFilter) (_ []provisioning.ClusterTemplate, _err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	var err error

	// Result slice.
	objects := make([]provisioning.ClusterTemplate, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, clusterTemplateObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"clusterTemplateObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, clusterTemplateObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"clusterTemplateObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(clusterTemplateObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"clusterTemplateObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name == nil {
			return nil, fmt.Errorf("Cannot filter on empty ClusterTemplateFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getClusterTemplates(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getClusterTemplatesRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_templates\" table: %w", err)
	}

	return objects, nil
}

// GetClusterTemplateNames returns the identifying field of cluster_template.
// generator: cluster_template GetNames
func GetClusterTemplateNames(ctx context.Context, db dbtx, filters ...ClusterTemplateFilter) (_ []string, _err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	var err error

	// Result slice.
	names := make([]string, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, clusterTemplateNames)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"clusterTemplateNames\" prepared statement: %w", err)
		}
	}

	for _, filter := range filters {
		if filter.Name == nil {
			return nil, fmt.Errorf("Cannot filter on empty ClusterTemplateFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	var rows *sql.Rows
	if sqlStmt != nil {
		rows, err = sqlStmt.QueryContext(ctx, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		rows, err = db.QueryContext(ctx, queryStr, args...)
	}

	if err != nil {
		return nil, err
	}

	defer func() { _ = rows.Close() }()
	for rows.Next() {
		var identifier string
		err := rows.Scan(&identifier)
		if err != nil {
			return nil, err
		}

		names = append(names, identifier)
	}

	err = rows.Err()
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"cluster_templates\" table: %w", err)
	}

	return names, nil
}

// CreateClusterTemplate adds a new cluster_template to the database.
// generator: cluster_template Create
func CreateClusterTemplate(ctx context.Context, db dbtx, object provisioning.ClusterTemplate) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	args := make([]any, 6)

	// Populate the statement arguments.
	args[0] = object.Name
	args[1] = object.Description
	args[2] = object.ServiceConfigTemplate
	args[3] = object.ApplicationConfigTemplate
	args[4] = object.Variables
	args[5] = time.Now().UTC().Format(time.RFC3339)

	// Prepared statement to use.
	stmt, err := Stmt(db, clusterTemplateCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"clusterTemplateCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil && strings.HasPrefix(err.Error(), "UNIQUE constraint failed:") {
		return -1, ErrConflict
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"cluster_templates\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"cluster_templates\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateClusterTemplate updates the cluster_template matching the given key parameters.
// generator: cluster_template Update
func UpdateClusterTemplate(ctx context.Context, db tx, name string, object provisioning.ClusterTemplate) (_err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	id, err := GetClusterTemplateID(ctx, db, name)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, clusterTemplateUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"clusterTemplateUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Name, object.Description, object.ServiceConfigTemplate, object.ApplicationConfigTemplate, object.Variables, time.Now().UTC().Format(time.RFC3339), id)
	if err != nil {
		return fmt.Errorf("Update \"cluster_templates\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// RenameClusterTemplate renames the cluster_template matching the given key parameters.
// generator: cluster_template Rename
func RenameClusterTemplate(ctx context.Context, db dbtx, name string, to string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	stmt, err := Stmt(db, clusterTemplateRename)
	if err != nil {
		return fmt.Errorf("Failed to get \"clusterTemplateRename\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(to, time.Now().UTC().Format(time.RFC3339), name)
	if err != nil {
		return fmt.Errorf("Rename ClusterTemplate failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows failed: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query affected %d rows instead of 1", n)
	}

	return nil
}

// DeleteClusterTemplate deletes the cluster_template matching the given key parameters.
// generator: cluster_template DeleteOne-by-Name
func DeleteClusterTemplate(ctx context.Context, db dbtx, name string) (_err error) {
	defer func() {
		_err = mapErr(_err, "Cluster_template")
	}()

	stmt, err := Stmt(db, clusterTemplateDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"clusterTemplateDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"cluster_templates\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d ClusterTemplate rows instead of 1", n)
	}

	return nil
}
