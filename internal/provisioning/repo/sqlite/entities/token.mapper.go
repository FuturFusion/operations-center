// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
	"github.com/mattn/go-sqlite3"
)

var tokenObjects = RegisterStmt(`
SELECT tokens.id, tokens.uuid, tokens.uses_remaining, tokens.expire_at, tokens.description
  FROM tokens
  ORDER BY tokens.uuid
`)

var tokenObjectsByUUID = RegisterStmt(`
SELECT tokens.id, tokens.uuid, tokens.uses_remaining, tokens.expire_at, tokens.description
  FROM tokens
  WHERE ( tokens.uuid = ? )
  ORDER BY tokens.uuid
`)

var tokenNames = RegisterStmt(`
SELECT tokens.uuid
  FROM tokens
  ORDER BY tokens.uuid
`)

var tokenID = RegisterStmt(`
SELECT tokens.id FROM tokens
  WHERE tokens.uuid = ?
`)

var tokenCreate = RegisterStmt(`
INSERT INTO tokens (uuid, uses_remaining, expire_at, description)
  VALUES (?, ?, ?, ?)
`)

var tokenUpdate = RegisterStmt(`
UPDATE tokens
  SET uuid = ?, uses_remaining = ?, expire_at = ?, description = ?
 WHERE id = ?
`)

var tokenDeleteByUUID = RegisterStmt(`
DELETE FROM tokens WHERE uuid = ?
`)

// GetTokenID return the ID of the token with the given key.
// generator: token ID
func GetTokenID(ctx context.Context, db tx, uuid uuid.UUID) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Token")
	}()

	stmt, err := Stmt(db, tokenID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"tokenID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, uuid)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"tokens\" ID: %w", err)
	}

	return id, nil
}

// TokenExists checks if a token with the given key exists.
// generator: token Exists
func TokenExists(ctx context.Context, db dbtx, uuid uuid.UUID) (_ bool, _err error) {
	defer func() {
		_err = mapErr(_err, "Token")
	}()

	stmt, err := Stmt(db, tokenID)
	if err != nil {
		return false, fmt.Errorf("Failed to get \"tokenID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, uuid)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}

	if err != nil {
		return false, fmt.Errorf("Failed to get \"tokens\" ID: %w", err)
	}

	return true, nil
}

// GetToken returns the token with the given key.
// generator: token GetOne
func GetToken(ctx context.Context, db dbtx, uuid uuid.UUID) (_ *provisioning.Token, _err error) {
	defer func() {
		_err = mapErr(_err, "Token")
	}()

	filter := TokenFilter{}
	filter.UUID = &uuid

	objects, err := GetTokens(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"tokens\" entry matches")
	}
}

// tokenColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the Token entity.
func tokenColumns() string {
	return "tokens.id, tokens.uuid, tokens.uses_remaining, tokens.expire_at, tokens.description"
}

// getTokens can be used to run handwritten sql.Stmts to return a slice of objects.
func getTokens(ctx context.Context, stmt *sql.Stmt, args ...any) ([]provisioning.Token, error) {
	objects := make([]provisioning.Token, 0)

	dest := func(scan func(dest ...any) error) error {
		t := provisioning.Token{}
		err := scan(&t.ID, &t.UUID, &t.UsesRemaining, &t.ExpireAt, &t.Description)
		if err != nil {
			return err
		}

		objects = append(objects, t)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens\" table: %w", err)
	}

	return objects, nil
}

// getTokensRaw can be used to run handwritten query strings to return a slice of objects.
func getTokensRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]provisioning.Token, error) {
	objects := make([]provisioning.Token, 0)

	dest := func(scan func(dest ...any) error) error {
		t := provisioning.Token{}
		err := scan(&t.ID, &t.UUID, &t.UsesRemaining, &t.ExpireAt, &t.Description)
		if err != nil {
			return err
		}

		objects = append(objects, t)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens\" table: %w", err)
	}

	return objects, nil
}

// GetTokens returns all available tokens.
// generator: token GetMany
func GetTokens(ctx context.Context, db dbtx, filters ...TokenFilter) (_ []provisioning.Token, _err error) {
	defer func() {
		_err = mapErr(_err, "Token")
	}()

	var err error

	// Result slice.
	objects := make([]provisioning.Token, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, tokenObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"tokenObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.UUID != nil {
			args = append(args, []any{filter.UUID}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, tokenObjectsByUUID)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"tokenObjectsByUUID\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(tokenObjectsByUUID)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"tokenObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.UUID == nil {
			return nil, fmt.Errorf("Cannot filter on empty TokenFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getTokens(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getTokensRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens\" table: %w", err)
	}

	return objects, nil
}

// GetTokenNames returns the identifying field of token.
// generator: token GetNames
func GetTokenNames(ctx context.Context, db dbtx, filters ...TokenFilter) (_ []uuid.UUID, _err error) {
	defer func() {
		_err = mapErr(_err, "Token")
	}()

	var err error

	// Result slice.
	names := make([]uuid.UUID, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, tokenNames)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"tokenNames\" prepared statement: %w", err)
		}
	}

	for _, filter := range filters {
		if filter.UUID == nil {
			return nil, fmt.Errorf("Cannot filter on empty TokenFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	var rows *sql.Rows
	if sqlStmt != nil {
		rows, err = sqlStmt.QueryContext(ctx, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		rows, err = db.QueryContext(ctx, queryStr, args...)
	}

	if err != nil {
		return nil, err
	}

	defer func() { _ = rows.Close() }()
	for rows.Next() {
		var identifier uuid.UUID
		err := rows.Scan(&identifier)
		if err != nil {
			return nil, err
		}

		names = append(names, identifier)
	}

	err = rows.Err()
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens\" table: %w", err)
	}

	return names, nil
}

// CreateToken adds a new token to the database.
// generator: token Create
func CreateToken(ctx context.Context, db dbtx, object provisioning.Token) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Token")
	}()

	args := make([]any, 4)

	// Populate the statement arguments.
	args[0] = object.UUID
	args[1] = object.UsesRemaining
	args[2] = object.ExpireAt
	args[3] = object.Description

	// Prepared statement to use.
	stmt, err := Stmt(db, tokenCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"tokenCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	var sqliteErr sqlite3.Error
	if errors.As(err, &sqliteErr) {
		if sqliteErr.Code == sqlite3.ErrConstraint {
			return -1, ErrConflict
		}
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"tokens\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"tokens\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateToken updates the token matching the given key parameters.
// generator: token Update
func UpdateToken(ctx context.Context, db tx, uuid uuid.UUID, object provisioning.Token) (_err error) {
	defer func() {
		_err = mapErr(_err, "Token")
	}()

	id, err := GetTokenID(ctx, db, uuid)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, tokenUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"tokenUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.UUID, object.UsesRemaining, object.ExpireAt, object.Description, id)
	if err != nil {
		return fmt.Errorf("Update \"tokens\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// DeleteToken deletes the token matching the given key parameters.
// generator: token DeleteOne-by-UUID
func DeleteToken(ctx context.Context, db dbtx, uuid uuid.UUID) (_err error) {
	defer func() {
		_err = mapErr(_err, "Token")
	}()

	stmt, err := Stmt(db, tokenDeleteByUUID)
	if err != nil {
		return fmt.Errorf("Failed to get \"tokenDeleteByUUID\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(uuid)
	if err != nil {
		return fmt.Errorf("Delete \"tokens\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Token rows instead of 1", n)
	}

	return nil
}
