// Code generated by generate-database from the incus project - DO NOT EDIT.

package entities

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

var tokenSeedObjects = RegisterStmt(`
SELECT tokens_seeds.id, tokens.uuid AS token, tokens_seeds.name, tokens_seeds.description, tokens_seeds.public, tokens_seeds.seeds, tokens_seeds.last_updated
  FROM tokens_seeds
  JOIN tokens ON tokens_seeds.token_id = tokens.id
  ORDER BY tokens.id, tokens_seeds.name
`)

var tokenSeedObjectsByToken = RegisterStmt(`
SELECT tokens_seeds.id, tokens.uuid AS token, tokens_seeds.name, tokens_seeds.description, tokens_seeds.public, tokens_seeds.seeds, tokens_seeds.last_updated
  FROM tokens_seeds
  JOIN tokens ON tokens_seeds.token_id = tokens.id
  WHERE ( token = ? )
  ORDER BY tokens.id, tokens_seeds.name
`)

var tokenSeedObjectsByNameAndToken = RegisterStmt(`
SELECT tokens_seeds.id, tokens.uuid AS token, tokens_seeds.name, tokens_seeds.description, tokens_seeds.public, tokens_seeds.seeds, tokens_seeds.last_updated
  FROM tokens_seeds
  JOIN tokens ON tokens_seeds.token_id = tokens.id
  WHERE ( tokens_seeds.name = ? AND token = ? )
  ORDER BY tokens.id, tokens_seeds.name
`)

var tokenSeedID = RegisterStmt(`
SELECT tokens_seeds.id FROM tokens_seeds
  JOIN tokens ON tokens_seeds.token_id = tokens.id
  WHERE tokens.uuid = ? AND tokens_seeds.name = ?
`)

var tokenSeedCreate = RegisterStmt(`
INSERT INTO tokens_seeds (token_id, name, description, public, seeds, last_updated)
  VALUES ((SELECT tokens.id FROM tokens WHERE tokens.uuid = ?), ?, ?, ?, ?, ?)
`)

var tokenSeedUpdate = RegisterStmt(`
UPDATE tokens_seeds
  SET token_id = (SELECT tokens.id FROM tokens WHERE tokens.uuid = ?), name = ?, description = ?, public = ?, seeds = ?, last_updated = ?
 WHERE id = ?
`)

var tokenSeedDeleteByNameAndToken = RegisterStmt(`
DELETE FROM tokens_seeds WHERE name = ? AND token_id = (SELECT tokens.id FROM tokens WHERE tokens.uuid = ?)
`)

// GetTokenSeedID return the ID of the token_seed with the given key.
// generator: token_seed ID
func GetTokenSeedID(ctx context.Context, db tx, token uuid.UUID, name string) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Token_seed")
	}()

	stmt, err := Stmt(db, tokenSeedID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"tokenSeedID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, token, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, ErrNotFound
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"tokens_seeds\" ID: %w", err)
	}

	return id, nil
}

// TokenSeedExists checks if a token_seed with the given key exists.
// generator: token_seed Exists
func TokenSeedExists(ctx context.Context, db dbtx, token uuid.UUID, name string) (_ bool, _err error) {
	defer func() {
		_err = mapErr(_err, "Token_seed")
	}()

	stmt, err := Stmt(db, tokenSeedID)
	if err != nil {
		return false, fmt.Errorf("Failed to get \"tokenSeedID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, token, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return false, nil
	}

	if err != nil {
		return false, fmt.Errorf("Failed to get \"tokens_seeds\" ID: %w", err)
	}

	return true, nil
}

// GetTokenSeed returns the token_seed with the given key.
// generator: token_seed GetOne
func GetTokenSeed(ctx context.Context, db dbtx, token uuid.UUID, name string) (_ *provisioning.TokenSeed, _err error) {
	defer func() {
		_err = mapErr(_err, "Token_seed")
	}()

	filter := TokenSeedFilter{}
	filter.Token = &token
	filter.Name = &name

	objects, err := GetTokenSeeds(ctx, db, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens_seeds\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, ErrNotFound
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"tokens_seeds\" entry matches")
	}
}

// tokenSeedColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the TokenSeed entity.
func tokenSeedColumns() string {
	return "tokens_seeds.id, tokens.uuid AS token, tokens_seeds.name, tokens_seeds.description, tokens_seeds.public, tokens_seeds.seeds, tokens_seeds.last_updated"
}

// getTokenSeeds can be used to run handwritten sql.Stmts to return a slice of objects.
func getTokenSeeds(ctx context.Context, stmt *sql.Stmt, args ...any) ([]provisioning.TokenSeed, error) {
	objects := make([]provisioning.TokenSeed, 0)

	dest := func(scan func(dest ...any) error) error {
		t := provisioning.TokenSeed{}
		err := scan(&t.ID, &t.Token, &t.Name, &t.Description, &t.Public, &t.Seeds, &t.LastUpdated)
		if err != nil {
			return err
		}

		objects = append(objects, t)

		return nil
	}

	err := selectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens_seeds\" table: %w", err)
	}

	return objects, nil
}

// getTokenSeedsRaw can be used to run handwritten query strings to return a slice of objects.
func getTokenSeedsRaw(ctx context.Context, db dbtx, sql string, args ...any) ([]provisioning.TokenSeed, error) {
	objects := make([]provisioning.TokenSeed, 0)

	dest := func(scan func(dest ...any) error) error {
		t := provisioning.TokenSeed{}
		err := scan(&t.ID, &t.Token, &t.Name, &t.Description, &t.Public, &t.Seeds, &t.LastUpdated)
		if err != nil {
			return err
		}

		objects = append(objects, t)

		return nil
	}

	err := scan(ctx, db, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens_seeds\" table: %w", err)
	}

	return objects, nil
}

// GetTokenSeeds returns all available token_seeds.
// generator: token_seed GetMany
func GetTokenSeeds(ctx context.Context, db dbtx, filters ...TokenSeedFilter) (_ []provisioning.TokenSeed, _err error) {
	defer func() {
		_err = mapErr(_err, "Token_seed")
	}()

	var err error

	// Result slice.
	objects := make([]provisioning.TokenSeed, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(db, tokenSeedObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"tokenSeedObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil && filter.Token != nil {
			args = append(args, []any{filter.Name, filter.Token}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, tokenSeedObjectsByNameAndToken)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"tokenSeedObjectsByNameAndToken\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(tokenSeedObjectsByNameAndToken)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"tokenSeedObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Token != nil && filter.Name == nil {
			args = append(args, []any{filter.Token}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(db, tokenSeedObjectsByToken)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"tokenSeedObjectsByToken\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(tokenSeedObjectsByToken)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"tokenSeedObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name == nil && filter.Token == nil {
			return nil, fmt.Errorf("Cannot filter on empty TokenSeedFilter")
		} else {
			return nil, errors.New("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getTokenSeeds(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getTokenSeedsRaw(ctx, db, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"tokens_seeds\" table: %w", err)
	}

	return objects, nil
}

// CreateTokenSeed adds a new token_seed to the database.
// generator: token_seed Create
func CreateTokenSeed(ctx context.Context, db dbtx, object provisioning.TokenSeed) (_ int64, _err error) {
	defer func() {
		_err = mapErr(_err, "Token_seed")
	}()

	args := make([]any, 6)

	// Populate the statement arguments.
	args[0] = object.Token
	args[1] = object.Name
	args[2] = object.Description
	args[3] = object.Public
	args[4] = object.Seeds
	args[5] = time.Now().UTC().Format(time.RFC3339)

	// Prepared statement to use.
	stmt, err := Stmt(db, tokenSeedCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"tokenSeedCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil && strings.HasPrefix(err.Error(), "UNIQUE constraint failed:") {
		return -1, ErrConflict
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to create \"tokens_seeds\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"tokens_seeds\" entry ID: %w", err)
	}

	return id, nil
}

// UpdateTokenSeed updates the token_seed matching the given key parameters.
// generator: token_seed Update
func UpdateTokenSeed(ctx context.Context, db tx, token uuid.UUID, name string, object provisioning.TokenSeed) (_err error) {
	defer func() {
		_err = mapErr(_err, "Token_seed")
	}()

	id, err := GetTokenSeedID(ctx, db, token, name)
	if err != nil {
		return err
	}

	stmt, err := Stmt(db, tokenSeedUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"tokenSeedUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Token, object.Name, object.Description, object.Public, object.Seeds, time.Now().UTC().Format(time.RFC3339), id)
	if err != nil {
		return fmt.Errorf("Update \"tokens_seeds\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}

// DeleteTokenSeed deletes the token_seed matching the given key parameters.
// generator: token_seed DeleteOne-by-Name-and-Token
func DeleteTokenSeed(ctx context.Context, db dbtx, name string, token uuid.UUID) (_err error) {
	defer func() {
		_err = mapErr(_err, "Token_seed")
	}()

	stmt, err := Stmt(db, tokenSeedDeleteByNameAndToken)
	if err != nil {
		return fmt.Errorf("Failed to get \"tokenSeedDeleteByNameAndToken\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name, token)
	if err != nil {
		return fmt.Errorf("Delete \"tokens_seeds\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return ErrNotFound
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d TokenSeed rows instead of 1", n)
	}

	return nil
}
