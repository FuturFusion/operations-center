// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"io"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
	"github.com/google/uuid"
)

// FlasherPortWithSlog implements provisioning.FlasherPort that is instrumented with slog logger.
type FlasherPortWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.FlasherPort
	_isInformativeErrFunc func(error) bool
}

type FlasherPortWithSlogOption func(s *FlasherPortWithSlog)

func FlasherPortWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) FlasherPortWithSlogOption {
	return func(_base *FlasherPortWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewFlasherPortWithSlog instruments an implementation of the provisioning.FlasherPort with simple logging.
func NewFlasherPortWithSlog(base provisioning.FlasherPort, log *slog.Logger, opts ...FlasherPortWithSlogOption) FlasherPortWithSlog {
	this := FlasherPortWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GenerateSeededImage implements provisioning.FlasherPort.
func (_d FlasherPortWithSlog) GenerateSeededImage(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenImageSeedConfigs, rc io.ReadCloser) (readCloser io.ReadCloser, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
			slog.Any("seedConfig", seedConfig),
			slog.Any("rc", rc),
		)
	}
	log.DebugContext(ctx, "=> calling GenerateSeededImage")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("readCloser", readCloser),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GenerateSeededImage returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GenerateSeededImage returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GenerateSeededImage finished")
		}
	}()
	return _d._base.GenerateSeededImage(ctx, id, seedConfig, rc)
}

// GetProviderConfig implements provisioning.FlasherPort.
func (_d FlasherPortWithSlog) GetProviderConfig(ctx context.Context, id uuid.UUID) (tokenProviderConfig *api.TokenProviderConfig, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling GetProviderConfig")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("tokenProviderConfig", tokenProviderConfig),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetProviderConfig returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetProviderConfig returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetProviderConfig finished")
		}
	}()
	return _d._base.GetProviderConfig(ctx, id)
}
