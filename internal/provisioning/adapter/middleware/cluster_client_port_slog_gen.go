// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
)

// ClusterClientPortWithSlog implements provisioning.ClusterClientPort that is instrumented with slog logger.
type ClusterClientPortWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.ClusterClientPort
	_isInformativeErrFunc func(error) bool
}

type ClusterClientPortWithSlogOption func(s *ClusterClientPortWithSlog)

func ClusterClientPortWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ClusterClientPortWithSlogOption {
	return func(_base *ClusterClientPortWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewClusterClientPortWithSlog instruments an implementation of the provisioning.ClusterClientPort with simple logging.
func NewClusterClientPortWithSlog(base provisioning.ClusterClientPort, log *slog.Logger, opts ...ClusterClientPortWithSlogOption) ClusterClientPortWithSlog {
	this := ClusterClientPortWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// CreateProject implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) CreateProject(ctx context.Context, server provisioning.Server, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
			slog.String("name", name),
		)
	}
	log.Debug("=> calling CreateProject")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method CreateProject returned an informative error")
			} else {
				log.Error("<= method CreateProject returned an error")
			}
		} else {
			log.Debug("<= method CreateProject finished")
		}
	}()
	return _d._base.CreateProject(ctx, server, name)
}

// EnableCluster implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) EnableCluster(ctx context.Context, server provisioning.Server) (clusterCertificate string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("=> calling EnableCluster")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.String("clusterCertificate", clusterCertificate),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method EnableCluster returned an informative error")
			} else {
				log.Error("<= method EnableCluster returned an error")
			}
		} else {
			log.Debug("<= method EnableCluster finished")
		}
	}()
	return _d._base.EnableCluster(ctx, server)
}

// EnableOSServiceLVM implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) EnableOSServiceLVM(ctx context.Context, server provisioning.Server) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("=> calling EnableOSServiceLVM")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method EnableOSServiceLVM returned an informative error")
			} else {
				log.Error("<= method EnableOSServiceLVM returned an error")
			}
		} else {
			log.Debug("<= method EnableOSServiceLVM finished")
		}
	}()
	return _d._base.EnableOSServiceLVM(ctx, server)
}

// GetClusterJoinToken implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) GetClusterJoinToken(ctx context.Context, server provisioning.Server, memberName string) (joinToken string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
			slog.String("memberName", memberName),
		)
	}
	log.Debug("=> calling GetClusterJoinToken")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.String("joinToken", joinToken),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetClusterJoinToken returned an informative error")
			} else {
				log.Error("<= method GetClusterJoinToken returned an error")
			}
		} else {
			log.Debug("<= method GetClusterJoinToken finished")
		}
	}()
	return _d._base.GetClusterJoinToken(ctx, server, memberName)
}

// GetClusterNodeNames implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) GetClusterNodeNames(ctx context.Context, server provisioning.Server) (nodeNames []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("=> calling GetClusterNodeNames")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("nodeNames", nodeNames),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetClusterNodeNames returned an informative error")
			} else {
				log.Error("<= method GetClusterNodeNames returned an error")
			}
		} else {
			log.Debug("<= method GetClusterNodeNames finished")
		}
	}()
	return _d._base.GetClusterNodeNames(ctx, server)
}

// GetOSData implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) GetOSData(ctx context.Context, server provisioning.Server) (oSData api.OSData, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("=> calling GetOSData")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("oSData", oSData),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetOSData returned an informative error")
			} else {
				log.Error("<= method GetOSData returned an error")
			}
		} else {
			log.Debug("<= method GetOSData finished")
		}
	}()
	return _d._base.GetOSData(ctx, server)
}

// InitializeDefaultNetworking implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) InitializeDefaultNetworking(ctx context.Context, servers []provisioning.Server) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("servers", servers),
		)
	}
	log.Debug("=> calling InitializeDefaultNetworking")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method InitializeDefaultNetworking returned an informative error")
			} else {
				log.Error("<= method InitializeDefaultNetworking returned an error")
			}
		} else {
			log.Debug("<= method InitializeDefaultNetworking finished")
		}
	}()
	return _d._base.InitializeDefaultNetworking(ctx, servers)
}

// InitializeDefaultStorage implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) InitializeDefaultStorage(ctx context.Context, servers []provisioning.Server) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("servers", servers),
		)
	}
	log.Debug("=> calling InitializeDefaultStorage")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method InitializeDefaultStorage returned an informative error")
			} else {
				log.Error("<= method InitializeDefaultStorage returned an error")
			}
		} else {
			log.Debug("<= method InitializeDefaultStorage finished")
		}
	}()
	return _d._base.InitializeDefaultStorage(ctx, servers)
}

// JoinCluster implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) JoinCluster(ctx context.Context, server provisioning.Server, joinToken string, cluster provisioning.Server) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
			slog.String("joinToken", joinToken),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("=> calling JoinCluster")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method JoinCluster returned an informative error")
			} else {
				log.Error("<= method JoinCluster returned an error")
			}
		} else {
			log.Debug("<= method JoinCluster finished")
		}
	}()
	return _d._base.JoinCluster(ctx, server, joinToken, cluster)
}

// Ping implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) Ping(ctx context.Context, server provisioning.Server) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("=> calling Ping")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Ping returned an informative error")
			} else {
				log.Error("<= method Ping returned an error")
			}
		} else {
			log.Debug("<= method Ping finished")
		}
	}()
	return _d._base.Ping(ctx, server)
}

// SetServerConfig implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithSlog) SetServerConfig(ctx context.Context, server provisioning.Server, config map[string]string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
			slog.Any("config", config),
		)
	}
	log.Debug("=> calling SetServerConfig")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method SetServerConfig returned an informative error")
			} else {
				log.Error("<= method SetServerConfig returned an error")
			}
		} else {
			log.Debug("<= method SetServerConfig finished")
		}
	}()
	return _d._base.SetServerConfig(ctx, server, config)
}
