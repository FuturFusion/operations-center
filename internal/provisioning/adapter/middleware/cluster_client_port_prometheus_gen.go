// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ClusterClientPortWithPrometheus implements provisioning.ClusterClientPort interface with all methods wrapped
// with Prometheus metrics.
type ClusterClientPortWithPrometheus struct {
	base         provisioning.ClusterClientPort
	instanceName string
}

var clusterClientPortDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "cluster_client_port_duration_seconds",
		Help:       "clusterClientPort runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewClusterClientPortWithPrometheus returns an instance of the provisioning.ClusterClientPort decorated with prometheus summary metric.
func NewClusterClientPortWithPrometheus(base provisioning.ClusterClientPort, instanceName string) ClusterClientPortWithPrometheus {
	return ClusterClientPortWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// EnableCluster implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) EnableCluster(ctx context.Context, server provisioning.Server) (clusterCertificate string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "EnableCluster", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.EnableCluster(ctx, server)
}

// EnableOSServiceLVM implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) EnableOSServiceLVM(ctx context.Context, server provisioning.Server) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "EnableOSServiceLVM", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.EnableOSServiceLVM(ctx, server)
}

// GetClusterJoinToken implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) GetClusterJoinToken(ctx context.Context, endpoint provisioning.Endpoint, memberName string) (joinToken string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "GetClusterJoinToken", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetClusterJoinToken(ctx, endpoint, memberName)
}

// GetClusterNodeNames implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) GetClusterNodeNames(ctx context.Context, endpoint provisioning.Endpoint) (nodeNames []string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "GetClusterNodeNames", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetClusterNodeNames(ctx, endpoint)
}

// GetOSData implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) GetOSData(ctx context.Context, endpoint provisioning.Endpoint) (oSData api.OSData, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "GetOSData", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetOSData(ctx, endpoint)
}

// JoinCluster implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) JoinCluster(ctx context.Context, server provisioning.Server, joinToken string, endpoint provisioning.Endpoint) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "JoinCluster", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.JoinCluster(ctx, server, joinToken, endpoint)
}

// Ping implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) Ping(ctx context.Context, endpoint provisioning.Endpoint) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "Ping", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Ping(ctx, endpoint)
}

// SetServerConfig implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) SetServerConfig(ctx context.Context, endpoint provisioning.Endpoint, config map[string]string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "SetServerConfig", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.SetServerConfig(ctx, endpoint, config)
}

// UpdateClusterCertificate implements provisioning.ClusterClientPort.
func (_d ClusterClientPortWithPrometheus) UpdateClusterCertificate(ctx context.Context, endpoint provisioning.Endpoint, certificatePEM string, keyPEM string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateClusterCertificate", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateClusterCertificate(ctx, endpoint, certificatePEM, keyPEM)
}
