// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"archive/tar"
	"context"
	"io"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// UpdateSourceWithAddPortWithSlog implements provisioning.UpdateSourceWithAddPort that is instrumented with slog logger.
type UpdateSourceWithAddPortWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.UpdateSourceWithAddPort
	_isInformativeErrFunc func(error) bool
}

type UpdateSourceWithAddPortWithSlogOption func(s *UpdateSourceWithAddPortWithSlog)

func UpdateSourceWithAddPortWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) UpdateSourceWithAddPortWithSlogOption {
	return func(_base *UpdateSourceWithAddPortWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewUpdateSourceWithAddPortWithSlog instruments an implementation of the provisioning.UpdateSourceWithAddPort with simple logging.
func NewUpdateSourceWithAddPortWithSlog(base provisioning.UpdateSourceWithAddPort, log *slog.Logger, opts ...UpdateSourceWithAddPortWithSlogOption) UpdateSourceWithAddPortWithSlog {
	this := UpdateSourceWithAddPortWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// Add implements provisioning.UpdateSourceWithAddPort.
func (_d UpdateSourceWithAddPortWithSlog) Add(ctx context.Context, tarReader *tar.Reader) (update *provisioning.Update, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("tarReader", tarReader),
		)
	}
	log.Debug("=> calling Add")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("update", update),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Add returned an informative error")
			} else {
				log.Error("<= method Add returned an error")
			}
		} else {
			log.Debug("<= method Add finished")
		}
	}()
	return _d._base.Add(ctx, tarReader)
}

// ForgetUpdate implements provisioning.UpdateSourceWithAddPort.
func (_d UpdateSourceWithAddPortWithSlog) ForgetUpdate(ctx context.Context, update provisioning.Update) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("update", update),
		)
	}
	log.Debug("=> calling ForgetUpdate")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method ForgetUpdate returned an informative error")
			} else {
				log.Error("<= method ForgetUpdate returned an error")
			}
		} else {
			log.Debug("<= method ForgetUpdate finished")
		}
	}()
	return _d._base.ForgetUpdate(ctx, update)
}

// GetLatest implements provisioning.UpdateSourceWithAddPort.
func (_d UpdateSourceWithAddPortWithSlog) GetLatest(ctx context.Context, limit int) (updates provisioning.Updates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Int("limit", limit),
		)
	}
	log.Debug("=> calling GetLatest")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("updates", updates),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetLatest returned an informative error")
			} else {
				log.Error("<= method GetLatest returned an error")
			}
		} else {
			log.Debug("<= method GetLatest finished")
		}
	}()
	return _d._base.GetLatest(ctx, limit)
}

// GetUpdateAllFiles implements provisioning.UpdateSourceWithAddPort.
func (_d UpdateSourceWithAddPortWithSlog) GetUpdateAllFiles(ctx context.Context, update provisioning.Update) (updateFiles provisioning.UpdateFiles, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("update", update),
		)
	}
	log.Debug("=> calling GetUpdateAllFiles")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("updateFiles", updateFiles),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetUpdateAllFiles returned an informative error")
			} else {
				log.Error("<= method GetUpdateAllFiles returned an error")
			}
		} else {
			log.Debug("<= method GetUpdateAllFiles finished")
		}
	}()
	return _d._base.GetUpdateAllFiles(ctx, update)
}

// GetUpdateFileByFilename implements provisioning.UpdateSourceWithAddPort.
func (_d UpdateSourceWithAddPortWithSlog) GetUpdateFileByFilename(ctx context.Context, update provisioning.Update, filename string) (readCloser io.ReadCloser, n int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("update", update),
			slog.String("filename", filename),
		)
	}
	log.Debug("=> calling GetUpdateFileByFilename")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("readCloser", readCloser),
				slog.Int("n", n),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetUpdateFileByFilename returned an informative error")
			} else {
				log.Error("<= method GetUpdateFileByFilename returned an error")
			}
		} else {
			log.Debug("<= method GetUpdateFileByFilename finished")
		}
	}()
	return _d._base.GetUpdateFileByFilename(ctx, update, filename)
}
