// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
)

// ServerClientPortWithSlog implements provisioning.ServerClientPort that is instrumented with slog logger.
type ServerClientPortWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.ServerClientPort
	_isInformativeErrFunc func(error) bool
}

type ServerClientPortWithSlogOption func(s *ServerClientPortWithSlog)

func ServerClientPortWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ServerClientPortWithSlogOption {
	return func(_base *ServerClientPortWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewServerClientPortWithSlog instruments an implementation of the provisioning.ServerClientPort with simple logging.
func NewServerClientPortWithSlog(base provisioning.ServerClientPort, log *slog.Logger, opts ...ServerClientPortWithSlogOption) ServerClientPortWithSlog {
	this := ServerClientPortWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetOSData implements provisioning.ServerClientPort.
func (_d ServerClientPortWithSlog) GetOSData(ctx context.Context, server provisioning.Server) (oSData api.OSData, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("=> calling GetOSData")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("oSData", oSData),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetOSData returned an informative error")
			} else {
				log.Error("<= method GetOSData returned an error")
			}
		} else {
			log.Debug("<= method GetOSData finished")
		}
	}()
	return _d._base.GetOSData(ctx, server)
}

// GetResources implements provisioning.ServerClientPort.
func (_d ServerClientPortWithSlog) GetResources(ctx context.Context, server provisioning.Server) (hardwareData api.HardwareData, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("=> calling GetResources")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("hardwareData", hardwareData),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetResources returned an informative error")
			} else {
				log.Error("<= method GetResources returned an error")
			}
		} else {
			log.Debug("<= method GetResources finished")
		}
	}()
	return _d._base.GetResources(ctx, server)
}

// Ping implements provisioning.ServerClientPort.
func (_d ServerClientPortWithSlog) Ping(ctx context.Context, server provisioning.Server) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("=> calling Ping")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Ping returned an informative error")
			} else {
				log.Error("<= method Ping returned an error")
			}
		} else {
			log.Debug("<= method Ping finished")
		}
	}()
	return _d._base.Ping(ctx, server)
}
