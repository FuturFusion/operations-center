// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ServerClientPortWithPrometheus implements provisioning.ServerClientPort interface with all methods wrapped
// with Prometheus metrics.
type ServerClientPortWithPrometheus struct {
	base         provisioning.ServerClientPort
	instanceName string
}

var serverClientPortDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "server_client_port_duration_seconds",
		Help:       "serverClientPort runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewServerClientPortWithPrometheus returns an instance of the provisioning.ServerClientPort decorated with prometheus summary metric.
func NewServerClientPortWithPrometheus(base provisioning.ServerClientPort, instanceName string) ServerClientPortWithPrometheus {
	return ServerClientPortWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Ping implements provisioning.ServerClientPort.
func (_d ServerClientPortWithPrometheus) Ping(ctx context.Context, server provisioning.Server) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverClientPortDurationSummaryVec.WithLabelValues(_d.instanceName, "Ping", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Ping(ctx, server)
}
