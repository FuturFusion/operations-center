// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"io"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// ClusterProvisioningPortWithSlog implements provisioning.ClusterProvisioningPort that is instrumented with slog logger.
type ClusterProvisioningPortWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.ClusterProvisioningPort
	_isInformativeErrFunc func(error) bool
}

type ClusterProvisioningPortWithSlogOption func(s *ClusterProvisioningPortWithSlog)

func ClusterProvisioningPortWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ClusterProvisioningPortWithSlogOption {
	return func(_base *ClusterProvisioningPortWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewClusterProvisioningPortWithSlog instruments an implementation of the provisioning.ClusterProvisioningPort with simple logging.
func NewClusterProvisioningPortWithSlog(base provisioning.ClusterProvisioningPort, log *slog.Logger, opts ...ClusterProvisioningPortWithSlogOption) ClusterProvisioningPortWithSlog {
	this := ClusterProvisioningPortWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// Apply implements provisioning.ClusterProvisioningPort.
func (_d ClusterProvisioningPortWithSlog) Apply(ctx context.Context, cluster provisioning.Cluster) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
		)
	}
	log.DebugContext(ctx, "=> calling Apply")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Apply returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Apply returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Apply finished")
		}
	}()
	return _d._base.Apply(ctx, cluster)
}

// Cleanup implements provisioning.ClusterProvisioningPort.
func (_d ClusterProvisioningPortWithSlog) Cleanup(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling Cleanup")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Cleanup returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Cleanup returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Cleanup finished")
		}
	}()
	return _d._base.Cleanup(ctx, name)
}

// GetArchive implements provisioning.ClusterProvisioningPort.
func (_d ClusterProvisioningPortWithSlog) GetArchive(ctx context.Context, name string) (readCloser io.ReadCloser, size int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling GetArchive")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("readCloser", readCloser),
				slog.Int("size", size),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetArchive returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetArchive returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetArchive finished")
		}
	}()
	return _d._base.GetArchive(ctx, name)
}

// Init implements provisioning.ClusterProvisioningPort.
func (_d ClusterProvisioningPortWithSlog) Init(ctx context.Context, name string, config provisioning.ClusterProvisioningConfig) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.Any("config", config),
		)
	}
	log.DebugContext(ctx, "=> calling Init")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Init returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Init returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Init finished")
		}
	}()
	return _d._base.Init(ctx, name, config)
}
