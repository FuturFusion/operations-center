// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"io"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ClusterProvisioningPortWithPrometheus implements provisioning.ClusterProvisioningPort interface with all methods wrapped
// with Prometheus metrics.
type ClusterProvisioningPortWithPrometheus struct {
	base         provisioning.ClusterProvisioningPort
	instanceName string
}

var clusterProvisioningPortDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "cluster_provisioning_port_duration_seconds",
		Help:       "clusterProvisioningPort runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewClusterProvisioningPortWithPrometheus returns an instance of the provisioning.ClusterProvisioningPort decorated with prometheus summary metric.
func NewClusterProvisioningPortWithPrometheus(base provisioning.ClusterProvisioningPort, instanceName string) ClusterProvisioningPortWithPrometheus {
	return ClusterProvisioningPortWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Apply implements provisioning.ClusterProvisioningPort.
func (_d ClusterProvisioningPortWithPrometheus) Apply(ctx context.Context, name string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterProvisioningPortDurationSummaryVec.WithLabelValues(_d.instanceName, "Apply", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Apply(ctx, name)
}

// GetArchive implements provisioning.ClusterProvisioningPort.
func (_d ClusterProvisioningPortWithPrometheus) GetArchive(ctx context.Context, name string) (readCloser io.ReadCloser, size int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterProvisioningPortDurationSummaryVec.WithLabelValues(_d.instanceName, "GetArchive", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetArchive(ctx, name)
}

// Init implements provisioning.ClusterProvisioningPort.
func (_d ClusterProvisioningPortWithPrometheus) Init(ctx context.Context, name string, config provisioning.ClusterProvisioningConfig) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterProvisioningPortDurationSummaryVec.WithLabelValues(_d.instanceName, "Init", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Init(ctx, name, config)
}
