// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"io"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
	"github.com/google/uuid"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// FlasherPortWithPrometheus implements provisioning.FlasherPort interface with all methods wrapped
// with Prometheus metrics.
type FlasherPortWithPrometheus struct {
	base         provisioning.FlasherPort
	instanceName string
}

var flasherPortDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "flasher_port_duration_seconds",
		Help:       "flasherPort runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewFlasherPortWithPrometheus returns an instance of the provisioning.FlasherPort decorated with prometheus summary metric.
func NewFlasherPortWithPrometheus(base provisioning.FlasherPort, instanceName string) FlasherPortWithPrometheus {
	return FlasherPortWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GenerateSeededImage implements provisioning.FlasherPort.
func (_d FlasherPortWithPrometheus) GenerateSeededImage(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenImageSeedConfigs, rc io.ReadCloser) (readCloser io.ReadCloser, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		flasherPortDurationSummaryVec.WithLabelValues(_d.instanceName, "GenerateSeededImage", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GenerateSeededImage(ctx, id, seedConfig, rc)
}

// GetProviderConfig implements provisioning.FlasherPort.
func (_d FlasherPortWithPrometheus) GetProviderConfig(ctx context.Context, id uuid.UUID) (tokenProviderConfig *api.TokenProviderConfig, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		flasherPortDurationSummaryVec.WithLabelValues(_d.instanceName, "GetProviderConfig", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetProviderConfig(ctx, id)
}
