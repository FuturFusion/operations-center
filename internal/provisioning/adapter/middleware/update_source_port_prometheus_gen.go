// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"io"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// UpdateSourcePortWithPrometheus implements provisioning.UpdateSourcePort interface with all methods wrapped
// with Prometheus metrics.
type UpdateSourcePortWithPrometheus struct {
	base         provisioning.UpdateSourcePort
	instanceName string
}

var updateSourcePortDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "update_source_port_duration_seconds",
		Help:       "updateSourcePort runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewUpdateSourcePortWithPrometheus returns an instance of the provisioning.UpdateSourcePort decorated with prometheus summary metric.
func NewUpdateSourcePortWithPrometheus(base provisioning.UpdateSourcePort, instanceName string) UpdateSourcePortWithPrometheus {
	return UpdateSourcePortWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetLatest implements provisioning.UpdateSourcePort.
func (_d UpdateSourcePortWithPrometheus) GetLatest(ctx context.Context, limit int) (updates provisioning.Updates, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateSourcePortDurationSummaryVec.WithLabelValues(_d.instanceName, "GetLatest", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetLatest(ctx, limit)
}

// GetUpdateAllFiles implements provisioning.UpdateSourcePort.
func (_d UpdateSourcePortWithPrometheus) GetUpdateAllFiles(ctx context.Context, update provisioning.Update) (updateFiles provisioning.UpdateFiles, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateSourcePortDurationSummaryVec.WithLabelValues(_d.instanceName, "GetUpdateAllFiles", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetUpdateAllFiles(ctx, update)
}

// GetUpdateFileByFilename implements provisioning.UpdateSourcePort.
func (_d UpdateSourcePortWithPrometheus) GetUpdateFileByFilename(ctx context.Context, update provisioning.Update, filename string) (readCloser io.ReadCloser, n int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateSourcePortDurationSummaryVec.WithLabelValues(_d.instanceName, "GetUpdateFileByFilename", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetUpdateFileByFilename(ctx, update, filename)
}
