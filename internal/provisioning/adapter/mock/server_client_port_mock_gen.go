// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
)

// Ensure that ServerClientPortMock does implement provisioning.ServerClientPort.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.ServerClientPort = &ServerClientPortMock{}

// ServerClientPortMock is a mock implementation of provisioning.ServerClientPort.
//
//	func TestSomethingThatUsesServerClientPort(t *testing.T) {
//
//		// make and configure a mocked provisioning.ServerClientPort
//		mockedServerClientPort := &ServerClientPortMock{
//			GetOSDataFunc: func(ctx context.Context, endpoint provisioning.Endpoint) (api.OSData, error) {
//				panic("mock out the GetOSData method")
//			},
//			GetResourcesFunc: func(ctx context.Context, endpoint provisioning.Endpoint) (api.HardwareData, error) {
//				panic("mock out the GetResources method")
//			},
//			GetServerTypeFunc: func(ctx context.Context, endpoint provisioning.Endpoint) (api.ServerType, error) {
//				panic("mock out the GetServerType method")
//			},
//			PingFunc: func(ctx context.Context, endpoint provisioning.Endpoint) error {
//				panic("mock out the Ping method")
//			},
//			UpdateNetworkConfigFunc: func(ctx context.Context, server provisioning.Server) error {
//				panic("mock out the UpdateNetworkConfig method")
//			},
//		}
//
//		// use mockedServerClientPort in code that requires provisioning.ServerClientPort
//		// and then make assertions.
//
//	}
type ServerClientPortMock struct {
	// GetOSDataFunc mocks the GetOSData method.
	GetOSDataFunc func(ctx context.Context, endpoint provisioning.Endpoint) (api.OSData, error)

	// GetResourcesFunc mocks the GetResources method.
	GetResourcesFunc func(ctx context.Context, endpoint provisioning.Endpoint) (api.HardwareData, error)

	// GetServerTypeFunc mocks the GetServerType method.
	GetServerTypeFunc func(ctx context.Context, endpoint provisioning.Endpoint) (api.ServerType, error)

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context, endpoint provisioning.Endpoint) error

	// UpdateNetworkConfigFunc mocks the UpdateNetworkConfig method.
	UpdateNetworkConfigFunc func(ctx context.Context, server provisioning.Server) error

	// calls tracks calls to the methods.
	calls struct {
		// GetOSData holds details about calls to the GetOSData method.
		GetOSData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
		}
		// GetResources holds details about calls to the GetResources method.
		GetResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
		}
		// GetServerType holds details about calls to the GetServerType method.
		GetServerType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint provisioning.Endpoint
		}
		// UpdateNetworkConfig holds details about calls to the UpdateNetworkConfig method.
		UpdateNetworkConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
	}
	lockGetOSData           sync.RWMutex
	lockGetResources        sync.RWMutex
	lockGetServerType       sync.RWMutex
	lockPing                sync.RWMutex
	lockUpdateNetworkConfig sync.RWMutex
}

// GetOSData calls GetOSDataFunc.
func (mock *ServerClientPortMock) GetOSData(ctx context.Context, endpoint provisioning.Endpoint) (api.OSData, error) {
	if mock.GetOSDataFunc == nil {
		panic("ServerClientPortMock.GetOSDataFunc: method is nil but ServerClientPort.GetOSData was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockGetOSData.Lock()
	mock.calls.GetOSData = append(mock.calls.GetOSData, callInfo)
	mock.lockGetOSData.Unlock()
	return mock.GetOSDataFunc(ctx, endpoint)
}

// GetOSDataCalls gets all the calls that were made to GetOSData.
// Check the length with:
//
//	len(mockedServerClientPort.GetOSDataCalls())
func (mock *ServerClientPortMock) GetOSDataCalls() []struct {
	Ctx      context.Context
	Endpoint provisioning.Endpoint
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}
	mock.lockGetOSData.RLock()
	calls = mock.calls.GetOSData
	mock.lockGetOSData.RUnlock()
	return calls
}

// GetResources calls GetResourcesFunc.
func (mock *ServerClientPortMock) GetResources(ctx context.Context, endpoint provisioning.Endpoint) (api.HardwareData, error) {
	if mock.GetResourcesFunc == nil {
		panic("ServerClientPortMock.GetResourcesFunc: method is nil but ServerClientPort.GetResources was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockGetResources.Lock()
	mock.calls.GetResources = append(mock.calls.GetResources, callInfo)
	mock.lockGetResources.Unlock()
	return mock.GetResourcesFunc(ctx, endpoint)
}

// GetResourcesCalls gets all the calls that were made to GetResources.
// Check the length with:
//
//	len(mockedServerClientPort.GetResourcesCalls())
func (mock *ServerClientPortMock) GetResourcesCalls() []struct {
	Ctx      context.Context
	Endpoint provisioning.Endpoint
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}
	mock.lockGetResources.RLock()
	calls = mock.calls.GetResources
	mock.lockGetResources.RUnlock()
	return calls
}

// GetServerType calls GetServerTypeFunc.
func (mock *ServerClientPortMock) GetServerType(ctx context.Context, endpoint provisioning.Endpoint) (api.ServerType, error) {
	if mock.GetServerTypeFunc == nil {
		panic("ServerClientPortMock.GetServerTypeFunc: method is nil but ServerClientPort.GetServerType was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockGetServerType.Lock()
	mock.calls.GetServerType = append(mock.calls.GetServerType, callInfo)
	mock.lockGetServerType.Unlock()
	return mock.GetServerTypeFunc(ctx, endpoint)
}

// GetServerTypeCalls gets all the calls that were made to GetServerType.
// Check the length with:
//
//	len(mockedServerClientPort.GetServerTypeCalls())
func (mock *ServerClientPortMock) GetServerTypeCalls() []struct {
	Ctx      context.Context
	Endpoint provisioning.Endpoint
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}
	mock.lockGetServerType.RLock()
	calls = mock.calls.GetServerType
	mock.lockGetServerType.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *ServerClientPortMock) Ping(ctx context.Context, endpoint provisioning.Endpoint) error {
	if mock.PingFunc == nil {
		panic("ServerClientPortMock.PingFunc: method is nil but ServerClientPort.Ping was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx, endpoint)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedServerClientPort.PingCalls())
func (mock *ServerClientPortMock) PingCalls() []struct {
	Ctx      context.Context
	Endpoint provisioning.Endpoint
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint provisioning.Endpoint
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// UpdateNetworkConfig calls UpdateNetworkConfigFunc.
func (mock *ServerClientPortMock) UpdateNetworkConfig(ctx context.Context, server provisioning.Server) error {
	if mock.UpdateNetworkConfigFunc == nil {
		panic("ServerClientPortMock.UpdateNetworkConfigFunc: method is nil but ServerClientPort.UpdateNetworkConfig was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockUpdateNetworkConfig.Lock()
	mock.calls.UpdateNetworkConfig = append(mock.calls.UpdateNetworkConfig, callInfo)
	mock.lockUpdateNetworkConfig.Unlock()
	return mock.UpdateNetworkConfigFunc(ctx, server)
}

// UpdateNetworkConfigCalls gets all the calls that were made to UpdateNetworkConfig.
// Check the length with:
//
//	len(mockedServerClientPort.UpdateNetworkConfigCalls())
func (mock *ServerClientPortMock) UpdateNetworkConfigCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockUpdateNetworkConfig.RLock()
	calls = mock.calls.UpdateNetworkConfig
	mock.lockUpdateNetworkConfig.RUnlock()
	return calls
}
