// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure that ServerClientPortMock does implement provisioning.ServerClientPort.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.ServerClientPort = &ServerClientPortMock{}

// ServerClientPortMock is a mock implementation of provisioning.ServerClientPort.
//
//	func TestSomethingThatUsesServerClientPort(t *testing.T) {
//
//		// make and configure a mocked provisioning.ServerClientPort
//		mockedServerClientPort := &ServerClientPortMock{
//			PingFunc: func(ctx context.Context, server provisioning.Server) error {
//				panic("mock out the Ping method")
//			},
//		}
//
//		// use mockedServerClientPort in code that requires provisioning.ServerClientPort
//		// and then make assertions.
//
//	}
type ServerClientPortMock struct {
	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context, server provisioning.Server) error

	// calls tracks calls to the methods.
	calls struct {
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
	}
	lockPing sync.RWMutex
}

// Ping calls PingFunc.
func (mock *ServerClientPortMock) Ping(ctx context.Context, server provisioning.Server) error {
	if mock.PingFunc == nil {
		panic("ServerClientPortMock.PingFunc: method is nil but ServerClientPort.Ping was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx, server)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedServerClientPort.PingCalls())
func (mock *ServerClientPortMock) PingCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}
