// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"io"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// Ensure that UpdateSourcePortMock does implement provisioning.UpdateSourcePort.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.UpdateSourcePort = &UpdateSourcePortMock{}

// UpdateSourcePortMock is a mock implementation of provisioning.UpdateSourcePort.
//
//	func TestSomethingThatUsesUpdateSourcePort(t *testing.T) {
//
//		// make and configure a mocked provisioning.UpdateSourcePort
//		mockedUpdateSourcePort := &UpdateSourcePortMock{
//			GetLatestFunc: func(ctx context.Context, limit int) (provisioning.Updates, error) {
//				panic("mock out the GetLatest method")
//			},
//			GetUpdateAllFilesFunc: func(ctx context.Context, update provisioning.Update) (provisioning.UpdateFiles, error) {
//				panic("mock out the GetUpdateAllFiles method")
//			},
//			GetUpdateFileByFilenameUnverifiedFunc: func(ctx context.Context, update provisioning.Update, filename string) (io.ReadCloser, int, error) {
//				panic("mock out the GetUpdateFileByFilenameUnverified method")
//			},
//		}
//
//		// use mockedUpdateSourcePort in code that requires provisioning.UpdateSourcePort
//		// and then make assertions.
//
//	}
type UpdateSourcePortMock struct {
	// GetLatestFunc mocks the GetLatest method.
	GetLatestFunc func(ctx context.Context, limit int) (provisioning.Updates, error)

	// GetUpdateAllFilesFunc mocks the GetUpdateAllFiles method.
	GetUpdateAllFilesFunc func(ctx context.Context, update provisioning.Update) (provisioning.UpdateFiles, error)

	// GetUpdateFileByFilenameUnverifiedFunc mocks the GetUpdateFileByFilenameUnverified method.
	GetUpdateFileByFilenameUnverifiedFunc func(ctx context.Context, update provisioning.Update, filename string) (io.ReadCloser, int, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLatest holds details about calls to the GetLatest method.
		GetLatest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
		}
		// GetUpdateAllFiles holds details about calls to the GetUpdateAllFiles method.
		GetUpdateAllFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Update is the update argument value.
			Update provisioning.Update
		}
		// GetUpdateFileByFilenameUnverified holds details about calls to the GetUpdateFileByFilenameUnverified method.
		GetUpdateFileByFilenameUnverified []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Update is the update argument value.
			Update provisioning.Update
			// Filename is the filename argument value.
			Filename string
		}
	}
	lockGetLatest                         sync.RWMutex
	lockGetUpdateAllFiles                 sync.RWMutex
	lockGetUpdateFileByFilenameUnverified sync.RWMutex
}

// GetLatest calls GetLatestFunc.
func (mock *UpdateSourcePortMock) GetLatest(ctx context.Context, limit int) (provisioning.Updates, error) {
	if mock.GetLatestFunc == nil {
		panic("UpdateSourcePortMock.GetLatestFunc: method is nil but UpdateSourcePort.GetLatest was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Limit int
	}{
		Ctx:   ctx,
		Limit: limit,
	}
	mock.lockGetLatest.Lock()
	mock.calls.GetLatest = append(mock.calls.GetLatest, callInfo)
	mock.lockGetLatest.Unlock()
	return mock.GetLatestFunc(ctx, limit)
}

// GetLatestCalls gets all the calls that were made to GetLatest.
// Check the length with:
//
//	len(mockedUpdateSourcePort.GetLatestCalls())
func (mock *UpdateSourcePortMock) GetLatestCalls() []struct {
	Ctx   context.Context
	Limit int
} {
	var calls []struct {
		Ctx   context.Context
		Limit int
	}
	mock.lockGetLatest.RLock()
	calls = mock.calls.GetLatest
	mock.lockGetLatest.RUnlock()
	return calls
}

// GetUpdateAllFiles calls GetUpdateAllFilesFunc.
func (mock *UpdateSourcePortMock) GetUpdateAllFiles(ctx context.Context, update provisioning.Update) (provisioning.UpdateFiles, error) {
	if mock.GetUpdateAllFilesFunc == nil {
		panic("UpdateSourcePortMock.GetUpdateAllFilesFunc: method is nil but UpdateSourcePort.GetUpdateAllFiles was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Update provisioning.Update
	}{
		Ctx:    ctx,
		Update: update,
	}
	mock.lockGetUpdateAllFiles.Lock()
	mock.calls.GetUpdateAllFiles = append(mock.calls.GetUpdateAllFiles, callInfo)
	mock.lockGetUpdateAllFiles.Unlock()
	return mock.GetUpdateAllFilesFunc(ctx, update)
}

// GetUpdateAllFilesCalls gets all the calls that were made to GetUpdateAllFiles.
// Check the length with:
//
//	len(mockedUpdateSourcePort.GetUpdateAllFilesCalls())
func (mock *UpdateSourcePortMock) GetUpdateAllFilesCalls() []struct {
	Ctx    context.Context
	Update provisioning.Update
} {
	var calls []struct {
		Ctx    context.Context
		Update provisioning.Update
	}
	mock.lockGetUpdateAllFiles.RLock()
	calls = mock.calls.GetUpdateAllFiles
	mock.lockGetUpdateAllFiles.RUnlock()
	return calls
}

// GetUpdateFileByFilenameUnverified calls GetUpdateFileByFilenameUnverifiedFunc.
func (mock *UpdateSourcePortMock) GetUpdateFileByFilenameUnverified(ctx context.Context, update provisioning.Update, filename string) (io.ReadCloser, int, error) {
	if mock.GetUpdateFileByFilenameUnverifiedFunc == nil {
		panic("UpdateSourcePortMock.GetUpdateFileByFilenameUnverifiedFunc: method is nil but UpdateSourcePort.GetUpdateFileByFilenameUnverified was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Update   provisioning.Update
		Filename string
	}{
		Ctx:      ctx,
		Update:   update,
		Filename: filename,
	}
	mock.lockGetUpdateFileByFilenameUnverified.Lock()
	mock.calls.GetUpdateFileByFilenameUnverified = append(mock.calls.GetUpdateFileByFilenameUnverified, callInfo)
	mock.lockGetUpdateFileByFilenameUnverified.Unlock()
	return mock.GetUpdateFileByFilenameUnverifiedFunc(ctx, update, filename)
}

// GetUpdateFileByFilenameUnverifiedCalls gets all the calls that were made to GetUpdateFileByFilenameUnverified.
// Check the length with:
//
//	len(mockedUpdateSourcePort.GetUpdateFileByFilenameUnverifiedCalls())
func (mock *UpdateSourcePortMock) GetUpdateFileByFilenameUnverifiedCalls() []struct {
	Ctx      context.Context
	Update   provisioning.Update
	Filename string
} {
	var calls []struct {
		Ctx      context.Context
		Update   provisioning.Update
		Filename string
	}
	mock.lockGetUpdateFileByFilenameUnverified.RLock()
	calls = mock.calls.GetUpdateFileByFilenameUnverified
	mock.lockGetUpdateFileByFilenameUnverified.RUnlock()
	return calls
}
