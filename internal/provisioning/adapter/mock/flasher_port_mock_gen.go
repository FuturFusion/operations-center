// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"io"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
	"github.com/google/uuid"
)

// Ensure that FlasherPortMock does implement provisioning.FlasherPort.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.FlasherPort = &FlasherPortMock{}

// FlasherPortMock is a mock implementation of provisioning.FlasherPort.
//
//	func TestSomethingThatUsesFlasherPort(t *testing.T) {
//
//		// make and configure a mocked provisioning.FlasherPort
//		mockedFlasherPort := &FlasherPortMock{
//			GenerateSeededImageFunc: func(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenImageSeedConfigs, rc io.ReadCloser) (io.ReadCloser, error) {
//				panic("mock out the GenerateSeededImage method")
//			},
//			GetProviderConfigFunc: func(ctx context.Context, id uuid.UUID) (*api.TokenProviderConfig, error) {
//				panic("mock out the GetProviderConfig method")
//			},
//		}
//
//		// use mockedFlasherPort in code that requires provisioning.FlasherPort
//		// and then make assertions.
//
//	}
type FlasherPortMock struct {
	// GenerateSeededImageFunc mocks the GenerateSeededImage method.
	GenerateSeededImageFunc func(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenImageSeedConfigs, rc io.ReadCloser) (io.ReadCloser, error)

	// GetProviderConfigFunc mocks the GetProviderConfig method.
	GetProviderConfigFunc func(ctx context.Context, id uuid.UUID) (*api.TokenProviderConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateSeededImage holds details about calls to the GenerateSeededImage method.
		GenerateSeededImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// SeedConfig is the seedConfig argument value.
			SeedConfig provisioning.TokenImageSeedConfigs
			// Rc is the rc argument value.
			Rc io.ReadCloser
		}
		// GetProviderConfig holds details about calls to the GetProviderConfig method.
		GetProviderConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
	}
	lockGenerateSeededImage sync.RWMutex
	lockGetProviderConfig   sync.RWMutex
}

// GenerateSeededImage calls GenerateSeededImageFunc.
func (mock *FlasherPortMock) GenerateSeededImage(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenImageSeedConfigs, rc io.ReadCloser) (io.ReadCloser, error) {
	if mock.GenerateSeededImageFunc == nil {
		panic("FlasherPortMock.GenerateSeededImageFunc: method is nil but FlasherPort.GenerateSeededImage was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         uuid.UUID
		SeedConfig provisioning.TokenImageSeedConfigs
		Rc         io.ReadCloser
	}{
		Ctx:        ctx,
		ID:         id,
		SeedConfig: seedConfig,
		Rc:         rc,
	}
	mock.lockGenerateSeededImage.Lock()
	mock.calls.GenerateSeededImage = append(mock.calls.GenerateSeededImage, callInfo)
	mock.lockGenerateSeededImage.Unlock()
	return mock.GenerateSeededImageFunc(ctx, id, seedConfig, rc)
}

// GenerateSeededImageCalls gets all the calls that were made to GenerateSeededImage.
// Check the length with:
//
//	len(mockedFlasherPort.GenerateSeededImageCalls())
func (mock *FlasherPortMock) GenerateSeededImageCalls() []struct {
	Ctx        context.Context
	ID         uuid.UUID
	SeedConfig provisioning.TokenImageSeedConfigs
	Rc         io.ReadCloser
} {
	var calls []struct {
		Ctx        context.Context
		ID         uuid.UUID
		SeedConfig provisioning.TokenImageSeedConfigs
		Rc         io.ReadCloser
	}
	mock.lockGenerateSeededImage.RLock()
	calls = mock.calls.GenerateSeededImage
	mock.lockGenerateSeededImage.RUnlock()
	return calls
}

// GetProviderConfig calls GetProviderConfigFunc.
func (mock *FlasherPortMock) GetProviderConfig(ctx context.Context, id uuid.UUID) (*api.TokenProviderConfig, error) {
	if mock.GetProviderConfigFunc == nil {
		panic("FlasherPortMock.GetProviderConfigFunc: method is nil but FlasherPort.GetProviderConfig was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetProviderConfig.Lock()
	mock.calls.GetProviderConfig = append(mock.calls.GetProviderConfig, callInfo)
	mock.lockGetProviderConfig.Unlock()
	return mock.GetProviderConfigFunc(ctx, id)
}

// GetProviderConfigCalls gets all the calls that were made to GetProviderConfig.
// Check the length with:
//
//	len(mockedFlasherPort.GetProviderConfigCalls())
func (mock *FlasherPortMock) GetProviderConfigCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetProviderConfig.RLock()
	calls = mock.calls.GetProviderConfig
	mock.lockGetProviderConfig.RUnlock()
	return calls
}
