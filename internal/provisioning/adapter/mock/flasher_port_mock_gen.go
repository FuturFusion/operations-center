// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"io"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// Ensure that FlasherPortMock does implement provisioning.FlasherPort.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.FlasherPort = &FlasherPortMock{}

// FlasherPortMock is a mock implementation of provisioning.FlasherPort.
//
//	func TestSomethingThatUsesFlasherPort(t *testing.T) {
//
//		// make and configure a mocked provisioning.FlasherPort
//		mockedFlasherPort := &FlasherPortMock{
//			GenerateSeededISOFunc: func(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenSeedConfig, rc io.ReadCloser) (io.ReadCloser, error) {
//				panic("mock out the GenerateSeededISO method")
//			},
//		}
//
//		// use mockedFlasherPort in code that requires provisioning.FlasherPort
//		// and then make assertions.
//
//	}
type FlasherPortMock struct {
	// GenerateSeededISOFunc mocks the GenerateSeededISO method.
	GenerateSeededISOFunc func(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenSeedConfig, rc io.ReadCloser) (io.ReadCloser, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateSeededISO holds details about calls to the GenerateSeededISO method.
		GenerateSeededISO []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// SeedConfig is the seedConfig argument value.
			SeedConfig provisioning.TokenSeedConfig
			// Rc is the rc argument value.
			Rc io.ReadCloser
		}
	}
	lockGenerateSeededISO sync.RWMutex
}

// GenerateSeededISO calls GenerateSeededISOFunc.
func (mock *FlasherPortMock) GenerateSeededISO(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenSeedConfig, rc io.ReadCloser) (io.ReadCloser, error) {
	if mock.GenerateSeededISOFunc == nil {
		panic("FlasherPortMock.GenerateSeededISOFunc: method is nil but FlasherPort.GenerateSeededISO was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ID         uuid.UUID
		SeedConfig provisioning.TokenSeedConfig
		Rc         io.ReadCloser
	}{
		Ctx:        ctx,
		ID:         id,
		SeedConfig: seedConfig,
		Rc:         rc,
	}
	mock.lockGenerateSeededISO.Lock()
	mock.calls.GenerateSeededISO = append(mock.calls.GenerateSeededISO, callInfo)
	mock.lockGenerateSeededISO.Unlock()
	return mock.GenerateSeededISOFunc(ctx, id, seedConfig, rc)
}

// GenerateSeededISOCalls gets all the calls that were made to GenerateSeededISO.
// Check the length with:
//
//	len(mockedFlasherPort.GenerateSeededISOCalls())
func (mock *FlasherPortMock) GenerateSeededISOCalls() []struct {
	Ctx        context.Context
	ID         uuid.UUID
	SeedConfig provisioning.TokenSeedConfig
	Rc         io.ReadCloser
} {
	var calls []struct {
		Ctx        context.Context
		ID         uuid.UUID
		SeedConfig provisioning.TokenSeedConfig
		Rc         io.ReadCloser
	}
	mock.lockGenerateSeededISO.RLock()
	calls = mock.calls.GenerateSeededISO
	mock.lockGenerateSeededISO.RUnlock()
	return calls
}
