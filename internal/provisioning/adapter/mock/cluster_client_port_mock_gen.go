// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/FuturFusion/operations-center/shared/api"
)

// Ensure that ClusterClientPortMock does implement provisioning.ClusterClientPort.
// If this is not the case, regenerate this file with mockery.
var _ provisioning.ClusterClientPort = &ClusterClientPortMock{}

// ClusterClientPortMock is a mock implementation of provisioning.ClusterClientPort.
//
//	func TestSomethingThatUsesClusterClientPort(t *testing.T) {
//
//		// make and configure a mocked provisioning.ClusterClientPort
//		mockedClusterClientPort := &ClusterClientPortMock{
//			CreateProjectFunc: func(ctx context.Context, cluster provisioning.Cluster, name string) error {
//				panic("mock out the CreateProject method")
//			},
//			EnableClusterFunc: func(ctx context.Context, server provisioning.Server) (string, error) {
//				panic("mock out the EnableCluster method")
//			},
//			EnableOSServiceLVMFunc: func(ctx context.Context, server provisioning.Server) error {
//				panic("mock out the EnableOSServiceLVM method")
//			},
//			GetClusterJoinTokenFunc: func(ctx context.Context, cluster provisioning.Cluster, memberName string) (string, error) {
//				panic("mock out the GetClusterJoinToken method")
//			},
//			GetClusterNodeNamesFunc: func(ctx context.Context, cluster provisioning.Cluster) ([]string, error) {
//				panic("mock out the GetClusterNodeNames method")
//			},
//			GetOSDataFunc: func(ctx context.Context, server provisioning.Server) (api.OSData, error) {
//				panic("mock out the GetOSData method")
//			},
//			InitializeDefaultNetworkingFunc: func(ctx context.Context, servers []provisioning.Server) error {
//				panic("mock out the InitializeDefaultNetworking method")
//			},
//			InitializeDefaultStorageFunc: func(ctx context.Context, servers []provisioning.Server) error {
//				panic("mock out the InitializeDefaultStorage method")
//			},
//			JoinClusterFunc: func(ctx context.Context, server provisioning.Server, joinToken string, cluster provisioning.Cluster) error {
//				panic("mock out the JoinCluster method")
//			},
//			PingFunc: func(ctx context.Context, target provisioning.ServerOrCluster) error {
//				panic("mock out the Ping method")
//			},
//			SetServerConfigFunc: func(ctx context.Context, server provisioning.Server, config map[string]string) error {
//				panic("mock out the SetServerConfig method")
//			},
//			UpdateClusterCertificateFunc: func(ctx context.Context, cluster provisioning.Cluster, certificatePEM string, keyPEM string) error {
//				panic("mock out the UpdateClusterCertificate method")
//			},
//		}
//
//		// use mockedClusterClientPort in code that requires provisioning.ClusterClientPort
//		// and then make assertions.
//
//	}
type ClusterClientPortMock struct {
	// CreateProjectFunc mocks the CreateProject method.
	CreateProjectFunc func(ctx context.Context, cluster provisioning.Cluster, name string) error

	// EnableClusterFunc mocks the EnableCluster method.
	EnableClusterFunc func(ctx context.Context, server provisioning.Server) (string, error)

	// EnableOSServiceLVMFunc mocks the EnableOSServiceLVM method.
	EnableOSServiceLVMFunc func(ctx context.Context, server provisioning.Server) error

	// GetClusterJoinTokenFunc mocks the GetClusterJoinToken method.
	GetClusterJoinTokenFunc func(ctx context.Context, cluster provisioning.Cluster, memberName string) (string, error)

	// GetClusterNodeNamesFunc mocks the GetClusterNodeNames method.
	GetClusterNodeNamesFunc func(ctx context.Context, cluster provisioning.Cluster) ([]string, error)

	// GetOSDataFunc mocks the GetOSData method.
	GetOSDataFunc func(ctx context.Context, server provisioning.Server) (api.OSData, error)

	// InitializeDefaultNetworkingFunc mocks the InitializeDefaultNetworking method.
	InitializeDefaultNetworkingFunc func(ctx context.Context, servers []provisioning.Server) error

	// InitializeDefaultStorageFunc mocks the InitializeDefaultStorage method.
	InitializeDefaultStorageFunc func(ctx context.Context, servers []provisioning.Server) error

	// JoinClusterFunc mocks the JoinCluster method.
	JoinClusterFunc func(ctx context.Context, server provisioning.Server, joinToken string, cluster provisioning.Cluster) error

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context, target provisioning.ServerOrCluster) error

	// SetServerConfigFunc mocks the SetServerConfig method.
	SetServerConfigFunc func(ctx context.Context, server provisioning.Server, config map[string]string) error

	// UpdateClusterCertificateFunc mocks the UpdateClusterCertificate method.
	UpdateClusterCertificateFunc func(ctx context.Context, cluster provisioning.Cluster, certificatePEM string, keyPEM string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProject holds details about calls to the CreateProject method.
		CreateProject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// Name is the name argument value.
			Name string
		}
		// EnableCluster holds details about calls to the EnableCluster method.
		EnableCluster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
		// EnableOSServiceLVM holds details about calls to the EnableOSServiceLVM method.
		EnableOSServiceLVM []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
		// GetClusterJoinToken holds details about calls to the GetClusterJoinToken method.
		GetClusterJoinToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// MemberName is the memberName argument value.
			MemberName string
		}
		// GetClusterNodeNames holds details about calls to the GetClusterNodeNames method.
		GetClusterNodeNames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// GetOSData holds details about calls to the GetOSData method.
		GetOSData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
		}
		// InitializeDefaultNetworking holds details about calls to the InitializeDefaultNetworking method.
		InitializeDefaultNetworking []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Servers is the servers argument value.
			Servers []provisioning.Server
		}
		// InitializeDefaultStorage holds details about calls to the InitializeDefaultStorage method.
		InitializeDefaultStorage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Servers is the servers argument value.
			Servers []provisioning.Server
		}
		// JoinCluster holds details about calls to the JoinCluster method.
		JoinCluster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
			// JoinToken is the joinToken argument value.
			JoinToken string
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Target is the target argument value.
			Target provisioning.ServerOrCluster
		}
		// SetServerConfig holds details about calls to the SetServerConfig method.
		SetServerConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Server is the server argument value.
			Server provisioning.Server
			// Config is the config argument value.
			Config map[string]string
		}
		// UpdateClusterCertificate holds details about calls to the UpdateClusterCertificate method.
		UpdateClusterCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster provisioning.Cluster
			// CertificatePEM is the certificatePEM argument value.
			CertificatePEM string
			// KeyPEM is the keyPEM argument value.
			KeyPEM string
		}
	}
	lockCreateProject               sync.RWMutex
	lockEnableCluster               sync.RWMutex
	lockEnableOSServiceLVM          sync.RWMutex
	lockGetClusterJoinToken         sync.RWMutex
	lockGetClusterNodeNames         sync.RWMutex
	lockGetOSData                   sync.RWMutex
	lockInitializeDefaultNetworking sync.RWMutex
	lockInitializeDefaultStorage    sync.RWMutex
	lockJoinCluster                 sync.RWMutex
	lockPing                        sync.RWMutex
	lockSetServerConfig             sync.RWMutex
	lockUpdateClusterCertificate    sync.RWMutex
}

// CreateProject calls CreateProjectFunc.
func (mock *ClusterClientPortMock) CreateProject(ctx context.Context, cluster provisioning.Cluster, name string) error {
	if mock.CreateProjectFunc == nil {
		panic("ClusterClientPortMock.CreateProjectFunc: method is nil but ClusterClientPort.CreateProject was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
		Name    string
	}{
		Ctx:     ctx,
		Cluster: cluster,
		Name:    name,
	}
	mock.lockCreateProject.Lock()
	mock.calls.CreateProject = append(mock.calls.CreateProject, callInfo)
	mock.lockCreateProject.Unlock()
	return mock.CreateProjectFunc(ctx, cluster, name)
}

// CreateProjectCalls gets all the calls that were made to CreateProject.
// Check the length with:
//
//	len(mockedClusterClientPort.CreateProjectCalls())
func (mock *ClusterClientPortMock) CreateProjectCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
	Name    string
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
		Name    string
	}
	mock.lockCreateProject.RLock()
	calls = mock.calls.CreateProject
	mock.lockCreateProject.RUnlock()
	return calls
}

// EnableCluster calls EnableClusterFunc.
func (mock *ClusterClientPortMock) EnableCluster(ctx context.Context, server provisioning.Server) (string, error) {
	if mock.EnableClusterFunc == nil {
		panic("ClusterClientPortMock.EnableClusterFunc: method is nil but ClusterClientPort.EnableCluster was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockEnableCluster.Lock()
	mock.calls.EnableCluster = append(mock.calls.EnableCluster, callInfo)
	mock.lockEnableCluster.Unlock()
	return mock.EnableClusterFunc(ctx, server)
}

// EnableClusterCalls gets all the calls that were made to EnableCluster.
// Check the length with:
//
//	len(mockedClusterClientPort.EnableClusterCalls())
func (mock *ClusterClientPortMock) EnableClusterCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockEnableCluster.RLock()
	calls = mock.calls.EnableCluster
	mock.lockEnableCluster.RUnlock()
	return calls
}

// EnableOSServiceLVM calls EnableOSServiceLVMFunc.
func (mock *ClusterClientPortMock) EnableOSServiceLVM(ctx context.Context, server provisioning.Server) error {
	if mock.EnableOSServiceLVMFunc == nil {
		panic("ClusterClientPortMock.EnableOSServiceLVMFunc: method is nil but ClusterClientPort.EnableOSServiceLVM was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockEnableOSServiceLVM.Lock()
	mock.calls.EnableOSServiceLVM = append(mock.calls.EnableOSServiceLVM, callInfo)
	mock.lockEnableOSServiceLVM.Unlock()
	return mock.EnableOSServiceLVMFunc(ctx, server)
}

// EnableOSServiceLVMCalls gets all the calls that were made to EnableOSServiceLVM.
// Check the length with:
//
//	len(mockedClusterClientPort.EnableOSServiceLVMCalls())
func (mock *ClusterClientPortMock) EnableOSServiceLVMCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockEnableOSServiceLVM.RLock()
	calls = mock.calls.EnableOSServiceLVM
	mock.lockEnableOSServiceLVM.RUnlock()
	return calls
}

// GetClusterJoinToken calls GetClusterJoinTokenFunc.
func (mock *ClusterClientPortMock) GetClusterJoinToken(ctx context.Context, cluster provisioning.Cluster, memberName string) (string, error) {
	if mock.GetClusterJoinTokenFunc == nil {
		panic("ClusterClientPortMock.GetClusterJoinTokenFunc: method is nil but ClusterClientPort.GetClusterJoinToken was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Cluster    provisioning.Cluster
		MemberName string
	}{
		Ctx:        ctx,
		Cluster:    cluster,
		MemberName: memberName,
	}
	mock.lockGetClusterJoinToken.Lock()
	mock.calls.GetClusterJoinToken = append(mock.calls.GetClusterJoinToken, callInfo)
	mock.lockGetClusterJoinToken.Unlock()
	return mock.GetClusterJoinTokenFunc(ctx, cluster, memberName)
}

// GetClusterJoinTokenCalls gets all the calls that were made to GetClusterJoinToken.
// Check the length with:
//
//	len(mockedClusterClientPort.GetClusterJoinTokenCalls())
func (mock *ClusterClientPortMock) GetClusterJoinTokenCalls() []struct {
	Ctx        context.Context
	Cluster    provisioning.Cluster
	MemberName string
} {
	var calls []struct {
		Ctx        context.Context
		Cluster    provisioning.Cluster
		MemberName string
	}
	mock.lockGetClusterJoinToken.RLock()
	calls = mock.calls.GetClusterJoinToken
	mock.lockGetClusterJoinToken.RUnlock()
	return calls
}

// GetClusterNodeNames calls GetClusterNodeNamesFunc.
func (mock *ClusterClientPortMock) GetClusterNodeNames(ctx context.Context, cluster provisioning.Cluster) ([]string, error) {
	if mock.GetClusterNodeNamesFunc == nil {
		panic("ClusterClientPortMock.GetClusterNodeNamesFunc: method is nil but ClusterClientPort.GetClusterNodeNames was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockGetClusterNodeNames.Lock()
	mock.calls.GetClusterNodeNames = append(mock.calls.GetClusterNodeNames, callInfo)
	mock.lockGetClusterNodeNames.Unlock()
	return mock.GetClusterNodeNamesFunc(ctx, cluster)
}

// GetClusterNodeNamesCalls gets all the calls that were made to GetClusterNodeNames.
// Check the length with:
//
//	len(mockedClusterClientPort.GetClusterNodeNamesCalls())
func (mock *ClusterClientPortMock) GetClusterNodeNamesCalls() []struct {
	Ctx     context.Context
	Cluster provisioning.Cluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster provisioning.Cluster
	}
	mock.lockGetClusterNodeNames.RLock()
	calls = mock.calls.GetClusterNodeNames
	mock.lockGetClusterNodeNames.RUnlock()
	return calls
}

// GetOSData calls GetOSDataFunc.
func (mock *ClusterClientPortMock) GetOSData(ctx context.Context, server provisioning.Server) (api.OSData, error) {
	if mock.GetOSDataFunc == nil {
		panic("ClusterClientPortMock.GetOSDataFunc: method is nil but ClusterClientPort.GetOSData was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
	}{
		Ctx:    ctx,
		Server: server,
	}
	mock.lockGetOSData.Lock()
	mock.calls.GetOSData = append(mock.calls.GetOSData, callInfo)
	mock.lockGetOSData.Unlock()
	return mock.GetOSDataFunc(ctx, server)
}

// GetOSDataCalls gets all the calls that were made to GetOSData.
// Check the length with:
//
//	len(mockedClusterClientPort.GetOSDataCalls())
func (mock *ClusterClientPortMock) GetOSDataCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
	}
	mock.lockGetOSData.RLock()
	calls = mock.calls.GetOSData
	mock.lockGetOSData.RUnlock()
	return calls
}

// InitializeDefaultNetworking calls InitializeDefaultNetworkingFunc.
func (mock *ClusterClientPortMock) InitializeDefaultNetworking(ctx context.Context, servers []provisioning.Server) error {
	if mock.InitializeDefaultNetworkingFunc == nil {
		panic("ClusterClientPortMock.InitializeDefaultNetworkingFunc: method is nil but ClusterClientPort.InitializeDefaultNetworking was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Servers []provisioning.Server
	}{
		Ctx:     ctx,
		Servers: servers,
	}
	mock.lockInitializeDefaultNetworking.Lock()
	mock.calls.InitializeDefaultNetworking = append(mock.calls.InitializeDefaultNetworking, callInfo)
	mock.lockInitializeDefaultNetworking.Unlock()
	return mock.InitializeDefaultNetworkingFunc(ctx, servers)
}

// InitializeDefaultNetworkingCalls gets all the calls that were made to InitializeDefaultNetworking.
// Check the length with:
//
//	len(mockedClusterClientPort.InitializeDefaultNetworkingCalls())
func (mock *ClusterClientPortMock) InitializeDefaultNetworkingCalls() []struct {
	Ctx     context.Context
	Servers []provisioning.Server
} {
	var calls []struct {
		Ctx     context.Context
		Servers []provisioning.Server
	}
	mock.lockInitializeDefaultNetworking.RLock()
	calls = mock.calls.InitializeDefaultNetworking
	mock.lockInitializeDefaultNetworking.RUnlock()
	return calls
}

// InitializeDefaultStorage calls InitializeDefaultStorageFunc.
func (mock *ClusterClientPortMock) InitializeDefaultStorage(ctx context.Context, servers []provisioning.Server) error {
	if mock.InitializeDefaultStorageFunc == nil {
		panic("ClusterClientPortMock.InitializeDefaultStorageFunc: method is nil but ClusterClientPort.InitializeDefaultStorage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Servers []provisioning.Server
	}{
		Ctx:     ctx,
		Servers: servers,
	}
	mock.lockInitializeDefaultStorage.Lock()
	mock.calls.InitializeDefaultStorage = append(mock.calls.InitializeDefaultStorage, callInfo)
	mock.lockInitializeDefaultStorage.Unlock()
	return mock.InitializeDefaultStorageFunc(ctx, servers)
}

// InitializeDefaultStorageCalls gets all the calls that were made to InitializeDefaultStorage.
// Check the length with:
//
//	len(mockedClusterClientPort.InitializeDefaultStorageCalls())
func (mock *ClusterClientPortMock) InitializeDefaultStorageCalls() []struct {
	Ctx     context.Context
	Servers []provisioning.Server
} {
	var calls []struct {
		Ctx     context.Context
		Servers []provisioning.Server
	}
	mock.lockInitializeDefaultStorage.RLock()
	calls = mock.calls.InitializeDefaultStorage
	mock.lockInitializeDefaultStorage.RUnlock()
	return calls
}

// JoinCluster calls JoinClusterFunc.
func (mock *ClusterClientPortMock) JoinCluster(ctx context.Context, server provisioning.Server, joinToken string, cluster provisioning.Cluster) error {
	if mock.JoinClusterFunc == nil {
		panic("ClusterClientPortMock.JoinClusterFunc: method is nil but ClusterClientPort.JoinCluster was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Server    provisioning.Server
		JoinToken string
		Cluster   provisioning.Cluster
	}{
		Ctx:       ctx,
		Server:    server,
		JoinToken: joinToken,
		Cluster:   cluster,
	}
	mock.lockJoinCluster.Lock()
	mock.calls.JoinCluster = append(mock.calls.JoinCluster, callInfo)
	mock.lockJoinCluster.Unlock()
	return mock.JoinClusterFunc(ctx, server, joinToken, cluster)
}

// JoinClusterCalls gets all the calls that were made to JoinCluster.
// Check the length with:
//
//	len(mockedClusterClientPort.JoinClusterCalls())
func (mock *ClusterClientPortMock) JoinClusterCalls() []struct {
	Ctx       context.Context
	Server    provisioning.Server
	JoinToken string
	Cluster   provisioning.Cluster
} {
	var calls []struct {
		Ctx       context.Context
		Server    provisioning.Server
		JoinToken string
		Cluster   provisioning.Cluster
	}
	mock.lockJoinCluster.RLock()
	calls = mock.calls.JoinCluster
	mock.lockJoinCluster.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *ClusterClientPortMock) Ping(ctx context.Context, target provisioning.ServerOrCluster) error {
	if mock.PingFunc == nil {
		panic("ClusterClientPortMock.PingFunc: method is nil but ClusterClientPort.Ping was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Target provisioning.ServerOrCluster
	}{
		Ctx:    ctx,
		Target: target,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx, target)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedClusterClientPort.PingCalls())
func (mock *ClusterClientPortMock) PingCalls() []struct {
	Ctx    context.Context
	Target provisioning.ServerOrCluster
} {
	var calls []struct {
		Ctx    context.Context
		Target provisioning.ServerOrCluster
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// SetServerConfig calls SetServerConfigFunc.
func (mock *ClusterClientPortMock) SetServerConfig(ctx context.Context, server provisioning.Server, config map[string]string) error {
	if mock.SetServerConfigFunc == nil {
		panic("ClusterClientPortMock.SetServerConfigFunc: method is nil but ClusterClientPort.SetServerConfig was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Server provisioning.Server
		Config map[string]string
	}{
		Ctx:    ctx,
		Server: server,
		Config: config,
	}
	mock.lockSetServerConfig.Lock()
	mock.calls.SetServerConfig = append(mock.calls.SetServerConfig, callInfo)
	mock.lockSetServerConfig.Unlock()
	return mock.SetServerConfigFunc(ctx, server, config)
}

// SetServerConfigCalls gets all the calls that were made to SetServerConfig.
// Check the length with:
//
//	len(mockedClusterClientPort.SetServerConfigCalls())
func (mock *ClusterClientPortMock) SetServerConfigCalls() []struct {
	Ctx    context.Context
	Server provisioning.Server
	Config map[string]string
} {
	var calls []struct {
		Ctx    context.Context
		Server provisioning.Server
		Config map[string]string
	}
	mock.lockSetServerConfig.RLock()
	calls = mock.calls.SetServerConfig
	mock.lockSetServerConfig.RUnlock()
	return calls
}

// UpdateClusterCertificate calls UpdateClusterCertificateFunc.
func (mock *ClusterClientPortMock) UpdateClusterCertificate(ctx context.Context, cluster provisioning.Cluster, certificatePEM string, keyPEM string) error {
	if mock.UpdateClusterCertificateFunc == nil {
		panic("ClusterClientPortMock.UpdateClusterCertificateFunc: method is nil but ClusterClientPort.UpdateClusterCertificate was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Cluster        provisioning.Cluster
		CertificatePEM string
		KeyPEM         string
	}{
		Ctx:            ctx,
		Cluster:        cluster,
		CertificatePEM: certificatePEM,
		KeyPEM:         keyPEM,
	}
	mock.lockUpdateClusterCertificate.Lock()
	mock.calls.UpdateClusterCertificate = append(mock.calls.UpdateClusterCertificate, callInfo)
	mock.lockUpdateClusterCertificate.Unlock()
	return mock.UpdateClusterCertificateFunc(ctx, cluster, certificatePEM, keyPEM)
}

// UpdateClusterCertificateCalls gets all the calls that were made to UpdateClusterCertificate.
// Check the length with:
//
//	len(mockedClusterClientPort.UpdateClusterCertificateCalls())
func (mock *ClusterClientPortMock) UpdateClusterCertificateCalls() []struct {
	Ctx            context.Context
	Cluster        provisioning.Cluster
	CertificatePEM string
	KeyPEM         string
} {
	var calls []struct {
		Ctx            context.Context
		Cluster        provisioning.Cluster
		CertificatePEM string
		KeyPEM         string
	}
	mock.lockUpdateClusterCertificate.RLock()
	calls = mock.calls.UpdateClusterCertificate
	mock.lockUpdateClusterCertificate.RUnlock()
	return calls
}
