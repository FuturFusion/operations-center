// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ServerServiceWithPrometheus implements provisioning.ServerService interface with all methods wrapped
// with Prometheus metrics.
type ServerServiceWithPrometheus struct {
	base         provisioning.ServerService
	instanceName string
}

var serverServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "server_service_duration_seconds",
		Help:       "serverService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewServerServiceWithPrometheus returns an instance of the provisioning.ServerService decorated with prometheus summary metric.
func NewServerServiceWithPrometheus(base provisioning.ServerService, instanceName string) ServerServiceWithPrometheus {
	return ServerServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Create implements provisioning.ServerService.
func (_d ServerServiceWithPrometheus) Create(ctx context.Context, server provisioning.Server) (server1 provisioning.Server, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, server)
}

// DeleteByName implements provisioning.ServerService.
func (_d ServerServiceWithPrometheus) DeleteByName(ctx context.Context, name string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByName(ctx, name)
}

// GetAll implements provisioning.ServerService.
func (_d ServerServiceWithPrometheus) GetAll(ctx context.Context) (servers provisioning.Servers, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAll(ctx)
}

// GetAllByCluster implements provisioning.ServerService.
func (_d ServerServiceWithPrometheus) GetAllByCluster(ctx context.Context, cluster string) (servers provisioning.Servers, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllByCluster", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllByCluster(ctx, cluster)
}

// GetAllNames implements provisioning.ServerService.
func (_d ServerServiceWithPrometheus) GetAllNames(ctx context.Context) (strings []string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllNames", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllNames(ctx)
}

// GetByName implements provisioning.ServerService.
func (_d ServerServiceWithPrometheus) GetByName(ctx context.Context, name string) (server provisioning.Server, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByName(ctx, name)
}

// Rename implements provisioning.ServerService.
func (_d ServerServiceWithPrometheus) Rename(ctx context.Context, name string, to string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "Rename", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Rename(ctx, name, to)
}

// UpdateByName implements provisioning.ServerService.
func (_d ServerServiceWithPrometheus) UpdateByName(ctx context.Context, name string, server provisioning.Server) (server1 provisioning.Server, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serverServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateByName(ctx, name, server)
}
