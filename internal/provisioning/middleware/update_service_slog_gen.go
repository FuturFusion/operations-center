// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"archive/tar"
	"context"
	"io"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// UpdateServiceWithSlog implements provisioning.UpdateService that is instrumented with slog logger.
type UpdateServiceWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.UpdateService
	_isInformativeErrFunc func(error) bool
}

type UpdateServiceWithSlogOption func(s *UpdateServiceWithSlog)

func UpdateServiceWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) UpdateServiceWithSlogOption {
	return func(_base *UpdateServiceWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewUpdateServiceWithSlog instruments an implementation of the provisioning.UpdateService with simple logging.
func NewUpdateServiceWithSlog(base provisioning.UpdateService, log *slog.Logger, opts ...UpdateServiceWithSlogOption) UpdateServiceWithSlog {
	this := UpdateServiceWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// CleanupAll implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) CleanupAll(ctx context.Context) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling CleanupAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method CleanupAll returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method CleanupAll returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method CleanupAll finished")
		}
	}()
	return _d._base.CleanupAll(ctx)
}

// CreateFromArchive implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) CreateFromArchive(ctx context.Context, tarReader *tar.Reader) (uUID uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("tarReader", tarReader),
		)
	}
	log.DebugContext(ctx, "=> calling CreateFromArchive")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUID", uUID),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method CreateFromArchive returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method CreateFromArchive returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method CreateFromArchive finished")
		}
	}()
	return _d._base.CreateFromArchive(ctx, tarReader)
}

// GetAll implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) GetAll(ctx context.Context) (updates provisioning.Updates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("updates", updates),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAll returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAll returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllUUIDs implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) GetAllUUIDs(ctx context.Context) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllUUIDs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllUUIDs returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllUUIDs returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllUUIDs finished")
		}
	}()
	return _d._base.GetAllUUIDs(ctx)
}

// GetAllUUIDsWithFilter implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) GetAllUUIDsWithFilter(ctx context.Context, filter provisioning.UpdateFilter) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllUUIDsWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllUUIDsWithFilter returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllUUIDsWithFilter returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllUUIDsWithFilter finished")
		}
	}()
	return _d._base.GetAllUUIDsWithFilter(ctx, filter)
}

// GetAllWithFilter implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) GetAllWithFilter(ctx context.Context, filter provisioning.UpdateFilter) (updates provisioning.Updates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("updates", updates),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllWithFilter returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllWithFilter returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllWithFilter finished")
		}
	}()
	return _d._base.GetAllWithFilter(ctx, filter)
}

// GetByUUID implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) GetByUUID(ctx context.Context, id uuid.UUID) (update *provisioning.Update, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling GetByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("update", update),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetByUUID returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetByUUID returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetByUUID finished")
		}
	}()
	return _d._base.GetByUUID(ctx, id)
}

// GetUpdateAllFiles implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) GetUpdateAllFiles(ctx context.Context, id uuid.UUID) (updateFiles provisioning.UpdateFiles, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.DebugContext(ctx, "=> calling GetUpdateAllFiles")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("updateFiles", updateFiles),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetUpdateAllFiles returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetUpdateAllFiles returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetUpdateAllFiles finished")
		}
	}()
	return _d._base.GetUpdateAllFiles(ctx, id)
}

// GetUpdateFileByFilename implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) GetUpdateFileByFilename(ctx context.Context, id uuid.UUID, filename string) (readCloser io.ReadCloser, n int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
			slog.String("filename", filename),
		)
	}
	log.DebugContext(ctx, "=> calling GetUpdateFileByFilename")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("readCloser", readCloser),
				slog.Int("n", n),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetUpdateFileByFilename returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetUpdateFileByFilename returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetUpdateFileByFilename finished")
		}
	}()
	return _d._base.GetUpdateFileByFilename(ctx, id, filename)
}

// Refresh implements provisioning.UpdateService.
func (_d UpdateServiceWithSlog) Refresh(ctx context.Context) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling Refresh")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Refresh returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Refresh returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Refresh finished")
		}
	}()
	return _d._base.Refresh(ctx)
}
