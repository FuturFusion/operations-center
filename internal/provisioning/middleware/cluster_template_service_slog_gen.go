// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// ClusterTemplateServiceWithSlog implements provisioning.ClusterTemplateService that is instrumented with slog logger.
type ClusterTemplateServiceWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.ClusterTemplateService
	_isInformativeErrFunc func(error) bool
}

type ClusterTemplateServiceWithSlogOption func(s *ClusterTemplateServiceWithSlog)

func ClusterTemplateServiceWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ClusterTemplateServiceWithSlogOption {
	return func(_base *ClusterTemplateServiceWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewClusterTemplateServiceWithSlog instruments an implementation of the provisioning.ClusterTemplateService with simple logging.
func NewClusterTemplateServiceWithSlog(base provisioning.ClusterTemplateService, log *slog.Logger, opts ...ClusterTemplateServiceWithSlogOption) ClusterTemplateServiceWithSlog {
	this := ClusterTemplateServiceWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// Create implements provisioning.ClusterTemplateService.
func (_d ClusterTemplateServiceWithSlog) Create(ctx context.Context, clusterTemplate provisioning.ClusterTemplate) (clusterTemplate1 provisioning.ClusterTemplate, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("clusterTemplate", clusterTemplate),
		)
	}
	log.DebugContext(ctx, "=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusterTemplate1", clusterTemplate1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Create returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Create returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, clusterTemplate)
}

// DeleteByName implements provisioning.ClusterTemplateService.
func (_d ClusterTemplateServiceWithSlog) DeleteByName(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling DeleteByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method DeleteByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method DeleteByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method DeleteByName finished")
		}
	}()
	return _d._base.DeleteByName(ctx, name)
}

// GetAll implements provisioning.ClusterTemplateService.
func (_d ClusterTemplateServiceWithSlog) GetAll(ctx context.Context) (clusterTemplates provisioning.ClusterTemplates, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusterTemplates", clusterTemplates),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAll returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAll returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllNames implements provisioning.ClusterTemplateService.
func (_d ClusterTemplateServiceWithSlog) GetAllNames(ctx context.Context) (strings []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllNames")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("strings", strings),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllNames returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllNames returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllNames finished")
		}
	}()
	return _d._base.GetAllNames(ctx)
}

// GetByName implements provisioning.ClusterTemplateService.
func (_d ClusterTemplateServiceWithSlog) GetByName(ctx context.Context, name string) (clusterTemplate *provisioning.ClusterTemplate, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling GetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusterTemplate", clusterTemplate),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetByName finished")
		}
	}()
	return _d._base.GetByName(ctx, name)
}

// Rename implements provisioning.ClusterTemplateService.
func (_d ClusterTemplateServiceWithSlog) Rename(ctx context.Context, oldName string, newName string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("oldName", oldName),
			slog.String("newName", newName),
		)
	}
	log.DebugContext(ctx, "=> calling Rename")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Rename returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Rename returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Rename finished")
		}
	}()
	return _d._base.Rename(ctx, oldName, newName)
}

// Update implements provisioning.ClusterTemplateService.
func (_d ClusterTemplateServiceWithSlog) Update(ctx context.Context, clusterTemplate provisioning.ClusterTemplate) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("clusterTemplate", clusterTemplate),
		)
	}
	log.DebugContext(ctx, "=> calling Update")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Update returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Update returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Update finished")
		}
	}()
	return _d._base.Update(ctx, clusterTemplate)
}
