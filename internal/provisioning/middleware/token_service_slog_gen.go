// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// TokenServiceWithSlog implements provisioning.TokenService that is instrumented with slog logger.
type TokenServiceWithSlog struct {
	_log  *slog.Logger
	_base provisioning.TokenService
}

// NewTokenServiceWithSlog instruments an implementation of the provisioning.TokenService with simple logging.
func NewTokenServiceWithSlog(base provisioning.TokenService, log *slog.Logger) TokenServiceWithSlog {
	return TokenServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements provisioning.TokenService.
func (_d TokenServiceWithSlog) Create(ctx context.Context, token provisioning.Token) (token1 provisioning.Token, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("token", token),
		)
	}
	log.Debug("=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("token1", token1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method Create returned an error")
		} else {
			log.Debug("<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, token)
}

// DeleteByID implements provisioning.TokenService.
func (_d TokenServiceWithSlog) DeleteByID(ctx context.Context, id uuid.UUID) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling DeleteByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method DeleteByID returned an error")
		} else {
			log.Debug("<= method DeleteByID finished")
		}
	}()
	return _d._base.DeleteByID(ctx, id)
}

// GetAll implements provisioning.TokenService.
func (_d TokenServiceWithSlog) GetAll(ctx context.Context) (tokens provisioning.Tokens, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("tokens", tokens),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAll returned an error")
		} else {
			log.Debug("<= method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllIDs implements provisioning.TokenService.
func (_d TokenServiceWithSlog) GetAllIDs(ctx context.Context) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling GetAllIDs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAllIDs returned an error")
		} else {
			log.Debug("<= method GetAllIDs finished")
		}
	}()
	return _d._base.GetAllIDs(ctx)
}

// GetByID implements provisioning.TokenService.
func (_d TokenServiceWithSlog) GetByID(ctx context.Context, id uuid.UUID) (token provisioning.Token, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("token", token),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetByID returned an error")
		} else {
			log.Debug("<= method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// UpdateByID implements provisioning.TokenService.
func (_d TokenServiceWithSlog) UpdateByID(ctx context.Context, token provisioning.Token) (token1 provisioning.Token, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("token", token),
		)
	}
	log.Debug("=> calling UpdateByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("token1", token1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method UpdateByID returned an error")
		} else {
			log.Debug("<= method UpdateByID finished")
		}
	}()
	return _d._base.UpdateByID(ctx, token)
}
