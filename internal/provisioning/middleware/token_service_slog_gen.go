// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"io"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
)

// TokenServiceWithSlog implements provisioning.TokenService that is instrumented with slog logger.
type TokenServiceWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.TokenService
	_isInformativeErrFunc func(error) bool
}

type TokenServiceWithSlogOption func(s *TokenServiceWithSlog)

func TokenServiceWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) TokenServiceWithSlogOption {
	return func(_base *TokenServiceWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewTokenServiceWithSlog instruments an implementation of the provisioning.TokenService with simple logging.
func NewTokenServiceWithSlog(base provisioning.TokenService, log *slog.Logger, opts ...TokenServiceWithSlogOption) TokenServiceWithSlog {
	this := TokenServiceWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// Consume implements provisioning.TokenService.
func (_d TokenServiceWithSlog) Consume(ctx context.Context, id uuid.UUID) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling Consume")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Consume returned an informative error")
			} else {
				log.Error("<= method Consume returned an error")
			}
		} else {
			log.Debug("<= method Consume finished")
		}
	}()
	return _d._base.Consume(ctx, id)
}

// Create implements provisioning.TokenService.
func (_d TokenServiceWithSlog) Create(ctx context.Context, token provisioning.Token) (token1 provisioning.Token, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("token", token),
		)
	}
	log.Debug("=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("token1", token1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Create returned an informative error")
			} else {
				log.Error("<= method Create returned an error")
			}
		} else {
			log.Debug("<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, token)
}

// DeleteByUUID implements provisioning.TokenService.
func (_d TokenServiceWithSlog) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling DeleteByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method DeleteByUUID returned an informative error")
			} else {
				log.Error("<= method DeleteByUUID returned an error")
			}
		} else {
			log.Debug("<= method DeleteByUUID finished")
		}
	}()
	return _d._base.DeleteByUUID(ctx, id)
}

// GetAll implements provisioning.TokenService.
func (_d TokenServiceWithSlog) GetAll(ctx context.Context) (tokens provisioning.Tokens, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("tokens", tokens),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetAll returned an informative error")
			} else {
				log.Error("<= method GetAll returned an error")
			}
		} else {
			log.Debug("<= method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllUUIDs implements provisioning.TokenService.
func (_d TokenServiceWithSlog) GetAllUUIDs(ctx context.Context) (uUIDs []uuid.UUID, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling GetAllUUIDs")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("uUIDs", uUIDs),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetAllUUIDs returned an informative error")
			} else {
				log.Error("<= method GetAllUUIDs returned an error")
			}
		} else {
			log.Debug("<= method GetAllUUIDs finished")
		}
	}()
	return _d._base.GetAllUUIDs(ctx)
}

// GetByUUID implements provisioning.TokenService.
func (_d TokenServiceWithSlog) GetByUUID(ctx context.Context, id uuid.UUID) (token *provisioning.Token, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
		)
	}
	log.Debug("=> calling GetByUUID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("token", token),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetByUUID returned an informative error")
			} else {
				log.Error("<= method GetByUUID returned an error")
			}
		} else {
			log.Debug("<= method GetByUUID finished")
		}
	}()
	return _d._base.GetByUUID(ctx, id)
}

// GetPreSeedISO implements provisioning.TokenService.
func (_d TokenServiceWithSlog) GetPreSeedISO(ctx context.Context, id uuid.UUID, seedConfig provisioning.TokenSeedConfig) (readCloser io.ReadCloser, n int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("id", id),
			slog.Any("seedConfig", seedConfig),
		)
	}
	log.Debug("=> calling GetPreSeedISO")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("readCloser", readCloser),
				slog.Int("n", n),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method GetPreSeedISO returned an informative error")
			} else {
				log.Error("<= method GetPreSeedISO returned an error")
			}
		} else {
			log.Debug("<= method GetPreSeedISO finished")
		}
	}()
	return _d._base.GetPreSeedISO(ctx, id, seedConfig)
}

// Update implements provisioning.TokenService.
func (_d TokenServiceWithSlog) Update(ctx context.Context, token provisioning.Token) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("token", token),
		)
	}
	log.Debug("=> calling Update")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method Update returned an informative error")
			} else {
				log.Error("<= method Update returned an error")
			}
		} else {
			log.Debug("<= method Update finished")
		}
	}()
	return _d._base.Update(ctx, token)
}
