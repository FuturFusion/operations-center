// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ClusterServiceWithPrometheus implements provisioning.ClusterService interface with all methods wrapped
// with Prometheus metrics.
type ClusterServiceWithPrometheus struct {
	base         provisioning.ClusterService
	instanceName string
}

var clusterServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "cluster_service_duration_seconds",
		Help:       "clusterService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewClusterServiceWithPrometheus returns an instance of the provisioning.ClusterService decorated with prometheus summary metric.
func NewClusterServiceWithPrometheus(base provisioning.ClusterService, instanceName string) ClusterServiceWithPrometheus {
	return ClusterServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Create implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) Create(ctx context.Context, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, cluster)
}

// DeleteByName implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) DeleteByName(ctx context.Context, name string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByName(ctx, name)
}

// GetAll implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) GetAll(ctx context.Context) (clusters provisioning.Clusters, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAll(ctx)
}

// GetAllNames implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) GetAllNames(ctx context.Context) (strings []string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllNames", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllNames(ctx)
}

// GetByID implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) GetByID(ctx context.Context, id int) (cluster provisioning.Cluster, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByID(ctx, id)
}

// GetByName implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) GetByName(ctx context.Context, name string) (cluster provisioning.Cluster, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByName(ctx, name)
}

// RenameByName implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) RenameByName(ctx context.Context, name string, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "RenameByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.RenameByName(ctx, name, cluster)
}

// ResyncInventoryByName implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) ResyncInventoryByName(ctx context.Context, name string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "ResyncInventoryByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.ResyncInventoryByName(ctx, name)
}

// UpdateByName implements provisioning.ClusterService.
func (_d ClusterServiceWithPrometheus) UpdateByName(ctx context.Context, name string, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		clusterServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateByName", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateByName(ctx, name, cluster)
}
