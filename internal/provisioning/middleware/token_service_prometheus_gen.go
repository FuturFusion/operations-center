// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/google/uuid"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// TokenServiceWithPrometheus implements provisioning.TokenService interface with all methods wrapped
// with Prometheus metrics.
type TokenServiceWithPrometheus struct {
	base         provisioning.TokenService
	instanceName string
}

var tokenServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "token_service_duration_seconds",
		Help:       "tokenService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewTokenServiceWithPrometheus returns an instance of the provisioning.TokenService decorated with prometheus summary metric.
func NewTokenServiceWithPrometheus(base provisioning.TokenService, instanceName string) TokenServiceWithPrometheus {
	return TokenServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Consume implements provisioning.TokenService.
func (_d TokenServiceWithPrometheus) Consume(ctx context.Context, id uuid.UUID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tokenServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "Consume", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Consume(ctx, id)
}

// Create implements provisioning.TokenService.
func (_d TokenServiceWithPrometheus) Create(ctx context.Context, token provisioning.Token) (token1 provisioning.Token, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tokenServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "Create", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Create(ctx, token)
}

// DeleteByUUID implements provisioning.TokenService.
func (_d TokenServiceWithPrometheus) DeleteByUUID(ctx context.Context, id uuid.UUID) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tokenServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "DeleteByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.DeleteByUUID(ctx, id)
}

// GetAll implements provisioning.TokenService.
func (_d TokenServiceWithPrometheus) GetAll(ctx context.Context) (tokens provisioning.Tokens, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tokenServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAll(ctx)
}

// GetAllUUIDs implements provisioning.TokenService.
func (_d TokenServiceWithPrometheus) GetAllUUIDs(ctx context.Context) (uUIDs []uuid.UUID, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tokenServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllUUIDs", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllUUIDs(ctx)
}

// GetByUUID implements provisioning.TokenService.
func (_d TokenServiceWithPrometheus) GetByUUID(ctx context.Context, id uuid.UUID) (token *provisioning.Token, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tokenServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByUUID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByUUID(ctx, id)
}

// Update implements provisioning.TokenService.
func (_d TokenServiceWithPrometheus) Update(ctx context.Context, token provisioning.Token) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		tokenServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "Update", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Update(ctx, token)
}
