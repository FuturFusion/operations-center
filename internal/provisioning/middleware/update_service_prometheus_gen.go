// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"io"
	"time"

	"github.com/FuturFusion/operations-center/internal/provisioning"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// UpdateServiceWithPrometheus implements provisioning.UpdateService interface with all methods wrapped
// with Prometheus metrics.
type UpdateServiceWithPrometheus struct {
	base         provisioning.UpdateService
	instanceName string
}

var updateServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "update_service_duration_seconds",
		Help:       "updateService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewUpdateServiceWithPrometheus returns an instance of the provisioning.UpdateService decorated with prometheus summary metric.
func NewUpdateServiceWithPrometheus(base provisioning.UpdateService, instanceName string) UpdateServiceWithPrometheus {
	return UpdateServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetAll implements provisioning.UpdateService.
func (_d UpdateServiceWithPrometheus) GetAll(ctx context.Context) (updates provisioning.Updates, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAll", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAll(ctx)
}

// GetAllIDs implements provisioning.UpdateService.
func (_d UpdateServiceWithPrometheus) GetAllIDs(ctx context.Context) (strings []string, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetAllIDs", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetAllIDs(ctx)
}

// GetByID implements provisioning.UpdateService.
func (_d UpdateServiceWithPrometheus) GetByID(ctx context.Context, id string) (update provisioning.Update, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetByID", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetByID(ctx, id)
}

// GetUpdateAllFiles implements provisioning.UpdateService.
func (_d UpdateServiceWithPrometheus) GetUpdateAllFiles(ctx context.Context, updateID string) (updateFiles provisioning.UpdateFiles, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetUpdateAllFiles", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetUpdateAllFiles(ctx, updateID)
}

// GetUpdateFileByFilename implements provisioning.UpdateService.
func (_d UpdateServiceWithPrometheus) GetUpdateFileByFilename(ctx context.Context, updateID string, filename string) (readCloser io.ReadCloser, n int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		updateServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetUpdateFileByFilename", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetUpdateFileByFilename(ctx, updateID, filename)
}
