// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"io"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// ClusterServiceWithSlog implements provisioning.ClusterService that is instrumented with slog logger.
type ClusterServiceWithSlog struct {
	_log                  *slog.Logger
	_base                 provisioning.ClusterService
	_isInformativeErrFunc func(error) bool
}

type ClusterServiceWithSlogOption func(s *ClusterServiceWithSlog)

func ClusterServiceWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) ClusterServiceWithSlogOption {
	return func(_base *ClusterServiceWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewClusterServiceWithSlog instruments an implementation of the provisioning.ClusterService with simple logging.
func NewClusterServiceWithSlog(base provisioning.ClusterService, log *slog.Logger, opts ...ClusterServiceWithSlogOption) ClusterServiceWithSlog {
	this := ClusterServiceWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// Create implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) Create(ctx context.Context, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
		)
	}
	log.DebugContext(ctx, "=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster1", cluster1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Create returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Create returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, cluster)
}

// DeleteByName implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) DeleteByName(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling DeleteByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method DeleteByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method DeleteByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method DeleteByName finished")
		}
	}()
	return _d._base.DeleteByName(ctx, name)
}

// GetAll implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetAll(ctx context.Context) (clusters provisioning.Clusters, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusters", clusters),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAll returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAll returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllNames implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetAllNames(ctx context.Context) (strings []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllNames")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("strings", strings),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllNames returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllNames returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllNames finished")
		}
	}()
	return _d._base.GetAllNames(ctx)
}

// GetAllNamesWithFilter implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetAllNamesWithFilter(ctx context.Context, filter provisioning.ClusterFilter) (strings []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllNamesWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("strings", strings),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllNamesWithFilter returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllNamesWithFilter returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllNamesWithFilter finished")
		}
	}()
	return _d._base.GetAllNamesWithFilter(ctx, filter)
}

// GetAllWithFilter implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetAllWithFilter(ctx context.Context, filter provisioning.ClusterFilter) (clusters provisioning.Clusters, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("filter", filter),
		)
	}
	log.DebugContext(ctx, "=> calling GetAllWithFilter")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusters", clusters),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetAllWithFilter returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetAllWithFilter returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetAllWithFilter finished")
		}
	}()
	return _d._base.GetAllWithFilter(ctx, filter)
}

// GetByName implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetByName(ctx context.Context, name string) (cluster *provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling GetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster", cluster),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetByName finished")
		}
	}()
	return _d._base.GetByName(ctx, name)
}

// GetEndpoint implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetEndpoint(ctx context.Context, name string) (endpoint provisioning.Endpoint, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling GetEndpoint")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("endpoint", endpoint),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetEndpoint returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetEndpoint returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetEndpoint finished")
		}
	}()
	return _d._base.GetEndpoint(ctx, name)
}

// GetProvisionerConfigurationArchive implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetProvisionerConfigurationArchive(ctx context.Context, name string) (readCloser io.ReadCloser, size int, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling GetProvisionerConfigurationArchive")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("readCloser", readCloser),
				slog.Int("size", size),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method GetProvisionerConfigurationArchive returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method GetProvisionerConfigurationArchive returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method GetProvisionerConfigurationArchive finished")
		}
	}()
	return _d._base.GetProvisionerConfigurationArchive(ctx, name)
}

// Rename implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) Rename(ctx context.Context, oldName string, newName string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("oldName", oldName),
			slog.String("newName", newName),
		)
	}
	log.DebugContext(ctx, "=> calling Rename")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Rename returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Rename returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Rename finished")
		}
	}()
	return _d._base.Rename(ctx, oldName, newName)
}

// ResyncInventory implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) ResyncInventory(ctx context.Context) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling ResyncInventory")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method ResyncInventory returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method ResyncInventory returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method ResyncInventory finished")
		}
	}()
	return _d._base.ResyncInventory(ctx)
}

// ResyncInventoryByName implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) ResyncInventoryByName(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.DebugContext(ctx, "=> calling ResyncInventoryByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method ResyncInventoryByName returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method ResyncInventoryByName returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method ResyncInventoryByName finished")
		}
	}()
	return _d._base.ResyncInventoryByName(ctx, name)
}

// SetInventorySyncers implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) SetInventorySyncers(inventorySyncers []provisioning.InventorySyncer) {
	ctx := context.Background()
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("inventorySyncers", inventorySyncers),
		)
	}
	log.DebugContext(ctx, "=> calling SetInventorySyncers")
	defer func() {
		log := _d._log.With()
		log.DebugContext(ctx, "<= method SetInventorySyncers finished")
	}()
	_d._base.SetInventorySyncers(inventorySyncers)
}

// Update implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) Update(ctx context.Context, cluster provisioning.Cluster) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
		)
	}
	log.DebugContext(ctx, "=> calling Update")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method Update returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method Update returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method Update finished")
		}
	}()
	return _d._base.Update(ctx, cluster)
}

// UpdateCertificate implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) UpdateCertificate(ctx context.Context, name string, certificatePEM string, keyPEM string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.String("certificatePEM", certificatePEM),
			slog.String("keyPEM", keyPEM),
		)
	}
	log.DebugContext(ctx, "=> calling UpdateCertificate")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method UpdateCertificate returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method UpdateCertificate returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method UpdateCertificate finished")
		}
	}()
	return _d._base.UpdateCertificate(ctx, name, certificatePEM, keyPEM)
}
