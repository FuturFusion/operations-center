// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/provisioning"
)

// ClusterServiceWithSlog implements provisioning.ClusterService that is instrumented with slog logger.
type ClusterServiceWithSlog struct {
	_log  *slog.Logger
	_base provisioning.ClusterService
}

// NewClusterServiceWithSlog instruments an implementation of the provisioning.ClusterService with simple logging.
func NewClusterServiceWithSlog(base provisioning.ClusterService, log *slog.Logger) ClusterServiceWithSlog {
	return ClusterServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) Create(ctx context.Context, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("=> calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster1", cluster1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method Create returned an error")
		} else {
			log.Debug("<= method Create finished")
		}
	}()
	return _d._base.Create(ctx, cluster)
}

// DeleteByName implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) DeleteByName(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("=> calling DeleteByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method DeleteByName returned an error")
		} else {
			log.Debug("<= method DeleteByName finished")
		}
	}()
	return _d._base.DeleteByName(ctx, name)
}

// GetAll implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetAll(ctx context.Context) (clusters provisioning.Clusters, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("clusters", clusters),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAll returned an error")
		} else {
			log.Debug("<= method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllNames implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetAllNames(ctx context.Context) (strings []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("=> calling GetAllNames")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("strings", strings),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetAllNames returned an error")
		} else {
			log.Debug("<= method GetAllNames finished")
		}
	}()
	return _d._base.GetAllNames(ctx)
}

// GetByName implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) GetByName(ctx context.Context, name string) (cluster provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("=> calling GetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster", cluster),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method GetByName returned an error")
		} else {
			log.Debug("<= method GetByName finished")
		}
	}()
	return _d._base.GetByName(ctx, name)
}

// RenameByName implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) RenameByName(ctx context.Context, name string, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("=> calling RenameByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster1", cluster1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method RenameByName returned an error")
		} else {
			log.Debug("<= method RenameByName finished")
		}
	}()
	return _d._base.RenameByName(ctx, name, cluster)
}

// ResyncInventoryByName implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) ResyncInventoryByName(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("=> calling ResyncInventoryByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method ResyncInventoryByName returned an error")
		} else {
			log.Debug("<= method ResyncInventoryByName finished")
		}
	}()
	return _d._base.ResyncInventoryByName(ctx, name)
}

// UpdateByName implements provisioning.ClusterService.
func (_d ClusterServiceWithSlog) UpdateByName(ctx context.Context, name string, cluster provisioning.Cluster) (cluster1 provisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("=> calling UpdateByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("cluster1", cluster1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("<= method UpdateByName returned an error")
		} else {
			log.Debug("<= method UpdateByName finished")
		}
	}()
	return _d._base.UpdateByName(ctx, name, cluster)
}
