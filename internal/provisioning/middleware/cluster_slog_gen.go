// Code generated by gowrap. DO NOT EDIT.
// template: ../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	_sourceProvisioning "github.com/FuturFusion/operations-center/internal/provisioning"
)

// ClusterServiceWithSlog implements _sourceProvisioning.ClusterService that is instrumented with slog logger
type ClusterServiceWithSlog struct {
	_log  *slog.Logger
	_base _sourceProvisioning.ClusterService
}

// NewClusterServiceWithSlog instruments an implementation of the _sourceProvisioning.ClusterService with simple logging
func NewClusterServiceWithSlog(base _sourceProvisioning.ClusterService, log *slog.Logger) ClusterServiceWithSlog {
	return ClusterServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) Create(ctx context.Context, cluster _sourceProvisioning.Cluster) (c2 _sourceProvisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("c2", c2),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method Create returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, cluster)
}

// DeleteByName implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) DeleteByName(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling DeleteByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method DeleteByName returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method DeleteByName finished")
		}
	}()
	return _d._base.DeleteByName(ctx, name)
}

// GetAll implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) GetAll(ctx context.Context) (c2 _sourceProvisioning.Clusters, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("c2", c2),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method GetAll returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllNames implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) GetAllNames(ctx context.Context) (sa1 []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling GetAllNames")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("sa1", sa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method GetAllNames returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method GetAllNames finished")
		}
	}()
	return _d._base.GetAllNames(ctx)
}

// GetByID implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) GetByID(ctx context.Context, id int) (c2 _sourceProvisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("c2", c2),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// GetByName implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) GetByName(ctx context.Context, name string) (c2 _sourceProvisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling GetByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("c2", c2),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method GetByName returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method GetByName finished")
		}
	}()
	return _d._base.GetByName(ctx, name)
}

// RenameByName implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) RenameByName(ctx context.Context, name string, cluster _sourceProvisioning.Cluster) (c2 _sourceProvisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling RenameByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("c2", c2),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method RenameByName returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method RenameByName finished")
		}
	}()
	return _d._base.RenameByName(ctx, name, cluster)
}

// ResyncInventoryByName implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) ResyncInventoryByName(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling ResyncInventoryByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method ResyncInventoryByName returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method ResyncInventoryByName finished")
		}
	}()
	return _d._base.ResyncInventoryByName(ctx, name)
}

// UpdateByName implements _sourceProvisioning.ClusterService
func (_d ClusterServiceWithSlog) UpdateByName(ctx context.Context, name string, cluster _sourceProvisioning.Cluster) (c2 _sourceProvisioning.Cluster, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.Any("cluster", cluster),
		)
	}
	log.Debug("ClusterServiceWithSlog: calling UpdateByName")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("c2", c2),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ClusterServiceWithSlog: method UpdateByName returned an error")
		} else {
			log.Debug("ClusterServiceWithSlog: method UpdateByName finished")
		}
	}()
	return _d._base.UpdateByName(ctx, name, cluster)
}
