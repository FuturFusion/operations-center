// Code generated by gowrap. DO NOT EDIT.
// template: ../../logger/slog.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	_sourceProvisioning "github.com/FuturFusion/operations-center/internal/provisioning"
)

// ServerServiceWithSlog implements _sourceProvisioning.ServerService that is instrumented with slog logger
type ServerServiceWithSlog struct {
	_log  *slog.Logger
	_base _sourceProvisioning.ServerService
}

// NewServerServiceWithSlog instruments an implementation of the _sourceProvisioning.ServerService with simple logging
func NewServerServiceWithSlog(base _sourceProvisioning.ServerService, log *slog.Logger) ServerServiceWithSlog {
	return ServerServiceWithSlog{
		_base: base,
		_log:  log,
	}
}

// Create implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) Create(ctx context.Context, server _sourceProvisioning.Server) (s1 _sourceProvisioning.Server, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Any("server", server),
		)
	}
	log.Debug("ServerServiceWithSlog: calling Create")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method Create returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method Create finished")
		}
	}()
	return _d._base.Create(ctx, server)
}

// DeleteByHostname implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) DeleteByHostname(ctx context.Context, name string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("ServerServiceWithSlog: calling DeleteByHostname")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method DeleteByHostname returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method DeleteByHostname finished")
		}
	}()
	return _d._base.DeleteByHostname(ctx, name)
}

// GetAll implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) GetAll(ctx context.Context) (s1 _sourceProvisioning.Servers, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("ServerServiceWithSlog: calling GetAll")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method GetAll returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method GetAll finished")
		}
	}()
	return _d._base.GetAll(ctx)
}

// GetAllByClusterID implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) GetAllByClusterID(ctx context.Context, clusterID int) (s1 _sourceProvisioning.Servers, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("clusterID", clusterID),
		)
	}
	log.Debug("ServerServiceWithSlog: calling GetAllByClusterID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method GetAllByClusterID returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method GetAllByClusterID finished")
		}
	}()
	return _d._base.GetAllByClusterID(ctx, clusterID)
}

// GetAllHostnames implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) GetAllHostnames(ctx context.Context) (sa1 []string, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.Debug("ServerServiceWithSlog: calling GetAllHostnames")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("sa1", sa1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method GetAllHostnames returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method GetAllHostnames finished")
		}
	}()
	return _d._base.GetAllHostnames(ctx)
}

// GetByHostname implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) GetByHostname(ctx context.Context, name string) (s1 _sourceProvisioning.Server, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
		)
	}
	log.Debug("ServerServiceWithSlog: calling GetByHostname")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method GetByHostname returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method GetByHostname finished")
		}
	}()
	return _d._base.GetByHostname(ctx, name)
}

// GetByID implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) GetByID(ctx context.Context, id int) (s1 _sourceProvisioning.Server, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.Int("id", id),
		)
	}
	log.Debug("ServerServiceWithSlog: calling GetByID")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method GetByID returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method GetByID finished")
		}
	}()
	return _d._base.GetByID(ctx, id)
}

// RenameByHostname implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) RenameByHostname(ctx context.Context, name string, server _sourceProvisioning.Server) (s1 _sourceProvisioning.Server, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.Any("server", server),
		)
	}
	log.Debug("ServerServiceWithSlog: calling RenameByHostname")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method RenameByHostname returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method RenameByHostname finished")
		}
	}()
	return _d._base.RenameByHostname(ctx, name, server)
}

// UpdateByHostname implements _sourceProvisioning.ServerService
func (_d ServerServiceWithSlog) UpdateByHostname(ctx context.Context, name string, server _sourceProvisioning.Server) (s1 _sourceProvisioning.Server, err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log.With(
			slog.Any("ctx", ctx),
			slog.String("name", name),
			slog.Any("server", server),
		)
	}
	log.Debug("ServerServiceWithSlog: calling UpdateByHostname")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("s1", s1),
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			log.Error("ServerServiceWithSlog: method UpdateByHostname returned an error")
		} else {
			log.Debug("ServerServiceWithSlog: method UpdateByHostname finished")
		}
	}()
	return _d._base.UpdateByHostname(ctx, name, server)
}
