// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"sync"

	"github.com/FuturFusion/operations-center/internal/environment"
)

// Ensure that EnvironmentMock does implement environment.Environment.
// If this is not the case, regenerate this file with mockery.
var _ environment.Environment = &EnvironmentMock{}

// EnvironmentMock is a mock implementation of environment.Environment.
//
//	func TestSomethingThatUsesEnvironment(t *testing.T) {
//
//		// make and configure a mocked environment.Environment
//		mockedEnvironment := &EnvironmentMock{
//			GetUnixSocketFunc: func() string {
//				panic("mock out the GetUnixSocket method")
//			},
//			IsIncusOSFunc: func() bool {
//				panic("mock out the IsIncusOS method")
//			},
//			LogDirFunc: func() string {
//				panic("mock out the LogDir method")
//			},
//			RunDirFunc: func() string {
//				panic("mock out the RunDir method")
//			},
//			UserConfigDirFunc: func() (string, error) {
//				panic("mock out the UserConfigDir method")
//			},
//			UsrShareDirFunc: func() string {
//				panic("mock out the UsrShareDir method")
//			},
//			VarDirFunc: func() string {
//				panic("mock out the VarDir method")
//			},
//		}
//
//		// use mockedEnvironment in code that requires environment.Environment
//		// and then make assertions.
//
//	}
type EnvironmentMock struct {
	// GetUnixSocketFunc mocks the GetUnixSocket method.
	GetUnixSocketFunc func() string

	// IsIncusOSFunc mocks the IsIncusOS method.
	IsIncusOSFunc func() bool

	// LogDirFunc mocks the LogDir method.
	LogDirFunc func() string

	// RunDirFunc mocks the RunDir method.
	RunDirFunc func() string

	// UserConfigDirFunc mocks the UserConfigDir method.
	UserConfigDirFunc func() (string, error)

	// UsrShareDirFunc mocks the UsrShareDir method.
	UsrShareDirFunc func() string

	// VarDirFunc mocks the VarDir method.
	VarDirFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// GetUnixSocket holds details about calls to the GetUnixSocket method.
		GetUnixSocket []struct {
		}
		// IsIncusOS holds details about calls to the IsIncusOS method.
		IsIncusOS []struct {
		}
		// LogDir holds details about calls to the LogDir method.
		LogDir []struct {
		}
		// RunDir holds details about calls to the RunDir method.
		RunDir []struct {
		}
		// UserConfigDir holds details about calls to the UserConfigDir method.
		UserConfigDir []struct {
		}
		// UsrShareDir holds details about calls to the UsrShareDir method.
		UsrShareDir []struct {
		}
		// VarDir holds details about calls to the VarDir method.
		VarDir []struct {
		}
	}
	lockGetUnixSocket sync.RWMutex
	lockIsIncusOS     sync.RWMutex
	lockLogDir        sync.RWMutex
	lockRunDir        sync.RWMutex
	lockUserConfigDir sync.RWMutex
	lockUsrShareDir   sync.RWMutex
	lockVarDir        sync.RWMutex
}

// GetUnixSocket calls GetUnixSocketFunc.
func (mock *EnvironmentMock) GetUnixSocket() string {
	if mock.GetUnixSocketFunc == nil {
		panic("EnvironmentMock.GetUnixSocketFunc: method is nil but Environment.GetUnixSocket was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUnixSocket.Lock()
	mock.calls.GetUnixSocket = append(mock.calls.GetUnixSocket, callInfo)
	mock.lockGetUnixSocket.Unlock()
	return mock.GetUnixSocketFunc()
}

// GetUnixSocketCalls gets all the calls that were made to GetUnixSocket.
// Check the length with:
//
//	len(mockedEnvironment.GetUnixSocketCalls())
func (mock *EnvironmentMock) GetUnixSocketCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUnixSocket.RLock()
	calls = mock.calls.GetUnixSocket
	mock.lockGetUnixSocket.RUnlock()
	return calls
}

// IsIncusOS calls IsIncusOSFunc.
func (mock *EnvironmentMock) IsIncusOS() bool {
	if mock.IsIncusOSFunc == nil {
		panic("EnvironmentMock.IsIncusOSFunc: method is nil but Environment.IsIncusOS was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsIncusOS.Lock()
	mock.calls.IsIncusOS = append(mock.calls.IsIncusOS, callInfo)
	mock.lockIsIncusOS.Unlock()
	return mock.IsIncusOSFunc()
}

// IsIncusOSCalls gets all the calls that were made to IsIncusOS.
// Check the length with:
//
//	len(mockedEnvironment.IsIncusOSCalls())
func (mock *EnvironmentMock) IsIncusOSCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsIncusOS.RLock()
	calls = mock.calls.IsIncusOS
	mock.lockIsIncusOS.RUnlock()
	return calls
}

// LogDir calls LogDirFunc.
func (mock *EnvironmentMock) LogDir() string {
	if mock.LogDirFunc == nil {
		panic("EnvironmentMock.LogDirFunc: method is nil but Environment.LogDir was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLogDir.Lock()
	mock.calls.LogDir = append(mock.calls.LogDir, callInfo)
	mock.lockLogDir.Unlock()
	return mock.LogDirFunc()
}

// LogDirCalls gets all the calls that were made to LogDir.
// Check the length with:
//
//	len(mockedEnvironment.LogDirCalls())
func (mock *EnvironmentMock) LogDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLogDir.RLock()
	calls = mock.calls.LogDir
	mock.lockLogDir.RUnlock()
	return calls
}

// RunDir calls RunDirFunc.
func (mock *EnvironmentMock) RunDir() string {
	if mock.RunDirFunc == nil {
		panic("EnvironmentMock.RunDirFunc: method is nil but Environment.RunDir was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRunDir.Lock()
	mock.calls.RunDir = append(mock.calls.RunDir, callInfo)
	mock.lockRunDir.Unlock()
	return mock.RunDirFunc()
}

// RunDirCalls gets all the calls that were made to RunDir.
// Check the length with:
//
//	len(mockedEnvironment.RunDirCalls())
func (mock *EnvironmentMock) RunDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRunDir.RLock()
	calls = mock.calls.RunDir
	mock.lockRunDir.RUnlock()
	return calls
}

// UserConfigDir calls UserConfigDirFunc.
func (mock *EnvironmentMock) UserConfigDir() (string, error) {
	if mock.UserConfigDirFunc == nil {
		panic("EnvironmentMock.UserConfigDirFunc: method is nil but Environment.UserConfigDir was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUserConfigDir.Lock()
	mock.calls.UserConfigDir = append(mock.calls.UserConfigDir, callInfo)
	mock.lockUserConfigDir.Unlock()
	return mock.UserConfigDirFunc()
}

// UserConfigDirCalls gets all the calls that were made to UserConfigDir.
// Check the length with:
//
//	len(mockedEnvironment.UserConfigDirCalls())
func (mock *EnvironmentMock) UserConfigDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUserConfigDir.RLock()
	calls = mock.calls.UserConfigDir
	mock.lockUserConfigDir.RUnlock()
	return calls
}

// UsrShareDir calls UsrShareDirFunc.
func (mock *EnvironmentMock) UsrShareDir() string {
	if mock.UsrShareDirFunc == nil {
		panic("EnvironmentMock.UsrShareDirFunc: method is nil but Environment.UsrShareDir was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUsrShareDir.Lock()
	mock.calls.UsrShareDir = append(mock.calls.UsrShareDir, callInfo)
	mock.lockUsrShareDir.Unlock()
	return mock.UsrShareDirFunc()
}

// UsrShareDirCalls gets all the calls that were made to UsrShareDir.
// Check the length with:
//
//	len(mockedEnvironment.UsrShareDirCalls())
func (mock *EnvironmentMock) UsrShareDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUsrShareDir.RLock()
	calls = mock.calls.UsrShareDir
	mock.lockUsrShareDir.RUnlock()
	return calls
}

// VarDir calls VarDirFunc.
func (mock *EnvironmentMock) VarDir() string {
	if mock.VarDirFunc == nil {
		panic("EnvironmentMock.VarDirFunc: method is nil but Environment.VarDir was just called")
	}
	callInfo := struct {
	}{}
	mock.lockVarDir.Lock()
	mock.calls.VarDir = append(mock.calls.VarDir, callInfo)
	mock.lockVarDir.Unlock()
	return mock.VarDirFunc()
}

// VarDirCalls gets all the calls that were made to VarDir.
// Check the length with:
//
//	len(mockedEnvironment.VarDirCalls())
func (mock *EnvironmentMock) VarDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockVarDir.RLock()
	calls = mock.calls.VarDir
	mock.lockVarDir.RUnlock()
	return calls
}
