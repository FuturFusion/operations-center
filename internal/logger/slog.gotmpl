// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package {{ .PkgName }}

{{- $_ := .Registry.AddImport "slog" "log/slog" }}
{{- $_ := .Registry.AddImport "logger" "github.com/FuturFusion/operations-center/internal/logger" }}

import (
{{ range .Imports -}}
	{{ .Alias }} "{{ .Path }}"
{{ end -}}
)


{{ range $i, $wrapper := .Interfaces }}

{{ $decorator := (or .TemplateData.DecoratorName (printf "%sWithSlog" $wrapper.Name)) }}

// {{$decorator}} implements {{ $.SrcPkgQualifier }}{{ $wrapper.Name }} that is instrumented with slog logger.
type {{$decorator}} struct {
	_log  *slog.Logger
	_base {{ $.SrcPkgQualifier }}{{ $wrapper.Name }}
	_isInformativeErrFunc func(error) bool
}

type {{$decorator}}Option func(s *{{$decorator}})

func {{$decorator}}WithInformativeErrFunc(isInformativeErrFunc func(error) bool) {{$decorator}}Option {
	return func(_base *{{$decorator}}) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// New{{$decorator}} instruments an implementation of the {{ $.SrcPkgQualifier }}{{ $wrapper.Name }} with simple logging.
func New{{$decorator}}(base {{ $.SrcPkgQualifier }}{{ $wrapper.Name }}, log *slog.Logger, opts ...{{$decorator}}Option) {{$decorator}} {
	this := {{$decorator}}{
		_base: base,
		_log: log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

{{ range $method := $wrapper.Methods }}

	// {{$method.Name}} implements {{ $.SrcPkgQualifier }}{{ $wrapper.Name }}.
	func (_d {{$decorator}}) {{.Name}}({{.ArgList}}) ({{.ReturnArgList}}) {
		{{- if not $method.AcceptsContext }}
		ctx := context.Background()
		{{- end }}
		log := _d._log.With()
		{{- if gt ($method.Params | len) 0 }}
			if _d._log.Enabled(ctx, logger.LevelTrace) {
				log = log.With(
					{{range $param := $method.Params}}
						{{- if eq $param.TypeString "string" -}}
						slog.String("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "int" -}}
						slog.Int("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "int64" -}}
						slog.Int64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "uint64" -}}
						slog.Uint64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "float64" -}}
						slog.Float64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "bool" -}}
						slog.Bool("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "time.Duration" -}}
						slog.Duration("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "time.Time" -}}
						slog.Time("{{ $param.Name }}", {{ $param.Name }}),
						{{- else -}}
						slog.Any("{{ $param.Name }}", {{ $param.Name }}),
						{{- end}}
					{{end}}
				)
			}
		{{end -}}
		log.Debug("=> calling {{$method.Name}}")
		defer func() {
			log := _d._log.With()
			{{- if gt ($method.Returns | len) 0}}
				if _d._log.Enabled(ctx, logger.LevelTrace) {
					log = _d._log.With(
						{{- range $param := $method.Returns}}
							{{if eq $param.TypeString "string" -}}
							slog.String("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "int" -}}
							slog.Int("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "int64" -}}
							slog.Int64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "uint64" -}}
							slog.Uint64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "float64" -}}
							slog.Float64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "bool" -}}
							slog.Bool("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "time.Duration" -}}
							slog.Duration("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "time.Time" -}}
							slog.Time("{{ $param.Name }}", {{ $param.Name }}),
							{{- else -}}
							slog.Any("{{ $param.Name }}", {{ $param.Name }}),
							{{- end -}}
						{{end}}
					)
				} else {
					{{- if $method.ReturnsError }}
						if err != nil {
							log = _d._log.With("err", err)
						}
					{{- end }}
				}
			{{- end }}

			{{- if $method.ReturnsError }}
				if err != nil {
					if _d._isInformativeErrFunc(err) {
						log.Debug("<= method {{$method.Name}} returned an informative error" )
					} else {
						log.Error("<= method {{$method.Name}} returned an error" )
					}
				} else {
					log.Debug("<= method {{$method.Name}} finished")
				}
			{{else}}
				log.Debug("<= method {{$method.Name}} finished")
			{{end -}}
		}()
		{{ $method.ReturnStatement }} _d._base.{{ $method.Name }}({{ $method.ArgCallList }})
	}
{{ end }}

{{ end }}
