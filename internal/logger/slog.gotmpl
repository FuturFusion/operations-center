// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package {{ .PkgName }}

import (
{{ range .Imports -}}
	{{ .Alias }} "{{ .Path }}"
{{ end -}}
)


{{ range $i, $mock := .Mocks }}

{{ $decorator := (or .TemplateData.DecoratorName (printf "%sWithSlog" $mock.InterfaceName)) }}

// {{$decorator}} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} that is instrumented with slog logger.
type {{$decorator}} struct {
	_log  *slog.Logger
	_base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}
}

// New{{$decorator}} instruments an implementation of the {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }} with simple logging.
func New{{$decorator}}(base {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}, log *slog.Logger) {{$decorator}} {
	return {{$decorator}}{
		_base: base,
		_log: log,
	}
}

{{ range $method := $mock.Methods }}

	// {{$method.Name}} implements {{ $.SrcPkgQualifier }}{{ $mock.InterfaceName }}.
	func (_d {{$decorator}}) {{.Name}}({{.ArgList}}) ({{.ReturnArgList}}) {
		{{- $acceptsContext := false -}}
		{{- if and (gt ($method.Params | len) 0) (eq (index $method.Params 0).TypeString "context.Context") -}}
		{{- $acceptsContext = true -}}
		{{- end -}}
		{{- $returnsError := false -}}
		{{- $lastType := "" -}}
		{{- range $method.Returns -}}
		{{- $lastType = .TypeString }}
		{{- end -}}
		{{- if eq $lastType "error" -}}
		{{- $returnsError = true -}}
		{{- end -}}

		{{- if not $acceptsContext }}
		ctx := context.Background()
		{{- end }}
		log := _d._log.With()
		{{- if gt ($method.Params | len) 0 }}
			if _d._log.Enabled(ctx, logger.LevelTrace) {
				log.With(
					{{range $param := $method.Params}}
						{{- if eq $param.TypeString "string" -}}
						slog.String("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "int" -}}
						slog.Int("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "int64" -}}
						slog.Int64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "uint64" -}}
						slog.Uint64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "float64" -}}
						slog.Float64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "bool" -}}
						slog.Bool("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "time.Duration" -}}
						slog.Duration("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.TypeString "time.Time" -}}
						slog.Time("{{ $param.Name }}", {{ $param.Name }}),
						{{- else -}}
						slog.Any("{{ $param.Name }}", {{ $param.Name }}),
						{{- end}}
					{{end}}
				)
			}
		{{end -}}
		log.Debug("{{$decorator}}: calling {{$method.Name}}")
		defer func() {
			log := _d._log.With()
			{{- if gt ($method.Returns | len) 0}}
				if _d._log.Enabled(ctx, logger.LevelTrace) {
					log = _d._log.With(
						{{- range $param := $method.Returns}}
							{{if eq $param.TypeString "string" -}}
							slog.String("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "int" -}}
							slog.Int("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "int64" -}}
							slog.Int64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "uint64" -}}
							slog.Uint64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "float64" -}}
							slog.Float64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "bool" -}}
							slog.Bool("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "time.Duration" -}}
							slog.Duration("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.TypeString "time.Time" -}}
							slog.Time("{{ $param.Name }}", {{ $param.Name }}),
							{{- else -}}
							slog.Any("{{ $param.Name }}", {{ $param.Name }}),
							{{- end -}}
						{{end}}
					)
				} else {
					if err != nil {
						log = _d._log.With("err", err)
					}
				}
			{{- end }}

			{{- if $returnsError}}
				if err != nil {
					log.Error("{{$decorator}}: method {{$method.Name}} returned an error" )
				} else {
					log.Debug("{{$decorator}}: method {{$method.Name}} finished")
				}
			{{else}}
				log.Debug("{{$decorator}}: method {{$method.Name}} finished")
			{{end -}}
		}()
		{{ if gt ($method.Returns | len) 0 -}}
		return
		{{- end }} _d._base.{{ $method.Name }}({{ $method.ArgCallList }})
	}
{{ end }}

{{ end }}
