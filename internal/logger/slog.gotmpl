import (
	"io"
	"log/slog"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithSlog" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} that is instrumented with slog logger
type {{$decorator}} struct {
	_log  *slog.Logger
	_base {{.Interface.Type}}
}

// New{{$decorator}} instruments an implementation of the {{.Interface.Type}} with simple logging
func New{{$decorator}}(base {{.Interface.Type}}, log *slog.Logger) {{$decorator}} {
	return {{$decorator}}{
		_base: base,
		_log: log,
	}
}

{{range $method := .Interface.Methods}}
	// {{$method.Name}} implements {{$.Interface.Type}}
	func (_d {{$decorator}}) {{$method.Declaration}} {
		{{- if not $method.AcceptsContext }}
		ctx := context.Background()
		{{- end }}
		log := _d._log.With()
		{{- if $method.HasParams}}
			if _d._log.Enabled(ctx, logger.LevelTrace) {
				log.With(
					{{range $param := $method.Params}}
						{{- if eq $param.Type "string" -}}
						slog.String("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.Type "int" -}}
						slog.Int("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.Type "int64" -}}
						slog.Int64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.Type "uint64" -}}
						slog.Uint64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.Type "float64" -}}
						slog.Float64("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.Type "bool" -}}
						slog.Bool("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.Type "time.Duration" -}}
						slog.Duration("{{ $param.Name }}", {{ $param.Name }}),
						{{- else if eq $param.Type "time.Time" -}}
						slog.Time("{{ $param.Name }}", {{ $param.Name }}),
						{{- else -}}
						slog.Any("{{ $param.Name }}", {{ $param.Name }}),
						{{- end}}
					{{end}}
				)
			}
		{{end -}}
		log.Debug("{{$decorator}}: calling {{$method.Name}}")
		defer func() {
			log := _d._log.With()
			{{- if $method.HasResults}}
				if _d._log.Enabled(ctx, logger.LevelTrace) {
					log = _d._log.With(
						{{- range $param := $method.Results}}
							{{if eq $param.Type "string" -}}
							slog.String("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.Type "int" -}}
							slog.Int("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.Type "int64" -}}
							slog.Int64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.Type "uint64" -}}
							slog.Uint64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.Type "float64" -}}
							slog.Float64("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.Type "bool" -}}
							slog.Bool("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.Type "time.Duration" -}}
							slog.Duration("{{ $param.Name }}", {{ $param.Name }}),
							{{- else if eq $param.Type "time.Time" -}}
							slog.Time("{{ $param.Name }}", {{ $param.Name }}),
							{{- else -}}
							slog.Any("{{ $param.Name }}", {{ $param.Name }}),
							{{- end -}}
						{{end}}
					)
				} else {
					if err != nil {
						log = _d._log.With("err", err)
					}
				}
			{{- end }}
			{{- if $method.ReturnsError}}
				if err != nil {
					log.Error("{{$decorator}}: method {{$method.Name}} returned an error" )
				} else {
					log.Debug("{{$decorator}}: method {{$method.Name}} finished")
				}
			{{else}}
				log.Debug("{{$decorator}}: method {{$method.Name}} finished")
			{{end -}}
		}()
		{{ $method.Pass "_d._base." }}
	}
{{end}}
