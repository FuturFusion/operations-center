// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/metrics/prometheus.gotmpl

package middleware

import (
	"context"
	"time"

	system0 "github.com/FuturFusion/operations-center/internal/system"
	"github.com/FuturFusion/operations-center/shared/api/system"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// SystemServiceWithPrometheus implements system0.SystemService interface with all methods wrapped
// with Prometheus metrics.
type SystemServiceWithPrometheus struct {
	base         system0.SystemService
	instanceName string
}

var systemServiceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "system_service_duration_seconds",
		Help:       "systemService runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"},
)

// NewSystemServiceWithPrometheus returns an instance of the system0.SystemService decorated with prometheus summary metric.
func NewSystemServiceWithPrometheus(base system0.SystemService, instanceName string) SystemServiceWithPrometheus {
	return SystemServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// GetNetworkConfig implements system0.SystemService.
func (_d SystemServiceWithPrometheus) GetNetworkConfig(ctx context.Context) (systemNetwork system.SystemNetwork) {
	_since := time.Now()
	defer func() {
		result := "ok"
		systemServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetNetworkConfig", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetNetworkConfig(ctx)
}

// GetSecurityConfig implements system0.SystemService.
func (_d SystemServiceWithPrometheus) GetSecurityConfig(ctx context.Context) (systemSecurity system.SystemSecurity) {
	_since := time.Now()
	defer func() {
		result := "ok"
		systemServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetSecurityConfig", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetSecurityConfig(ctx)
}

// GetUpdatesConfig implements system0.SystemService.
func (_d SystemServiceWithPrometheus) GetUpdatesConfig(ctx context.Context) (systemUpdates system.SystemUpdates) {
	_since := time.Now()
	defer func() {
		result := "ok"
		systemServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "GetUpdatesConfig", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.GetUpdatesConfig(ctx)
}

// UpdateCertificate implements system0.SystemService.
func (_d SystemServiceWithPrometheus) UpdateCertificate(ctx context.Context, certificatePEM string, keyPEM string) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		systemServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateCertificate", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateCertificate(ctx, certificatePEM, keyPEM)
}

// UpdateNetworkConfig implements system0.SystemService.
func (_d SystemServiceWithPrometheus) UpdateNetworkConfig(ctx context.Context, cfg system.SystemNetworkPut) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		systemServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateNetworkConfig", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateNetworkConfig(ctx, cfg)
}

// UpdateSecurityConfig implements system0.SystemService.
func (_d SystemServiceWithPrometheus) UpdateSecurityConfig(ctx context.Context, cfg system.SystemSecurityPut) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		systemServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateSecurityConfig", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateSecurityConfig(ctx, cfg)
}

// UpdateUpdatesConfig implements system0.SystemService.
func (_d SystemServiceWithPrometheus) UpdateUpdatesConfig(ctx context.Context, cfg system.SystemUpdatesPut) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		systemServiceDurationSummaryVec.WithLabelValues(_d.instanceName, "UpdateUpdatesConfig", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.UpdateUpdatesConfig(ctx, cfg)
}
