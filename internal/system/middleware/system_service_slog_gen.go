// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	"github.com/FuturFusion/operations-center/internal/system"
)

// SystemServiceWithSlog implements system.SystemService that is instrumented with slog logger.
type SystemServiceWithSlog struct {
	_log                  *slog.Logger
	_base                 system.SystemService
	_isInformativeErrFunc func(error) bool
}

type SystemServiceWithSlogOption func(s *SystemServiceWithSlog)

func SystemServiceWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) SystemServiceWithSlogOption {
	return func(_base *SystemServiceWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewSystemServiceWithSlog instruments an implementation of the system.SystemService with simple logging.
func NewSystemServiceWithSlog(base system.SystemService, log *slog.Logger, opts ...SystemServiceWithSlogOption) SystemServiceWithSlog {
	this := SystemServiceWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// UpdateCertificate implements system.SystemService.
func (_d SystemServiceWithSlog) UpdateCertificate(ctx context.Context, certificatePEM string, keyPEM string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("certificatePEM", certificatePEM),
			slog.String("keyPEM", keyPEM),
		)
	}
	log.Debug("=> calling UpdateCertificate")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.Debug("<= method UpdateCertificate returned an informative error")
			} else {
				log.Error("<= method UpdateCertificate returned an error")
			}
		} else {
			log.Debug("<= method UpdateCertificate finished")
		}
	}()
	return _d._base.UpdateCertificate(ctx, certificatePEM, keyPEM)
}
