// Code generated by mockery. DO NOT EDIT.
// template: github.com/FuturFusion/operations-center/internal/logger/slog.gotmpl

package middleware

import (
	"context"
	"log/slog"

	"github.com/FuturFusion/operations-center/internal/logger"
	system0 "github.com/FuturFusion/operations-center/internal/system"
	"github.com/FuturFusion/operations-center/shared/api/system"
)

// SystemServiceWithSlog implements system0.SystemService that is instrumented with slog logger.
type SystemServiceWithSlog struct {
	_log                  *slog.Logger
	_base                 system0.SystemService
	_isInformativeErrFunc func(error) bool
}

type SystemServiceWithSlogOption func(s *SystemServiceWithSlog)

func SystemServiceWithSlogWithInformativeErrFunc(isInformativeErrFunc func(error) bool) SystemServiceWithSlogOption {
	return func(_base *SystemServiceWithSlog) {
		_base._isInformativeErrFunc = isInformativeErrFunc
	}
}

// NewSystemServiceWithSlog instruments an implementation of the system0.SystemService with simple logging.
func NewSystemServiceWithSlog(base system0.SystemService, log *slog.Logger, opts ...SystemServiceWithSlogOption) SystemServiceWithSlog {
	this := SystemServiceWithSlog{
		_base:                 base,
		_log:                  log,
		_isInformativeErrFunc: func(error) bool { return false },
	}

	for _, opt := range opts {
		opt(&this)
	}

	return this
}

// GetNetworkConfig implements system0.SystemService.
func (_d SystemServiceWithSlog) GetNetworkConfig(ctx context.Context) (systemNetwork system.SystemNetwork) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetNetworkConfig")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("systemNetwork", systemNetwork),
			)
		} else {
		}
		log.DebugContext(ctx, "<= method GetNetworkConfig finished")
	}()
	return _d._base.GetNetworkConfig(ctx)
}

// GetSecurityConfig implements system0.SystemService.
func (_d SystemServiceWithSlog) GetSecurityConfig(ctx context.Context) (systemSecurity system.SystemSecurity) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetSecurityConfig")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("systemSecurity", systemSecurity),
			)
		} else {
		}
		log.DebugContext(ctx, "<= method GetSecurityConfig finished")
	}()
	return _d._base.GetSecurityConfig(ctx)
}

// GetUpdatesConfig implements system0.SystemService.
func (_d SystemServiceWithSlog) GetUpdatesConfig(ctx context.Context) (systemUpdates system.SystemUpdates) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
		)
	}
	log.DebugContext(ctx, "=> calling GetUpdatesConfig")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("systemUpdates", systemUpdates),
			)
		} else {
		}
		log.DebugContext(ctx, "<= method GetUpdatesConfig finished")
	}()
	return _d._base.GetUpdatesConfig(ctx)
}

// UpdateCertificate implements system0.SystemService.
func (_d SystemServiceWithSlog) UpdateCertificate(ctx context.Context, certificatePEM string, keyPEM string) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.String("certificatePEM", certificatePEM),
			slog.String("keyPEM", keyPEM),
		)
	}
	log.DebugContext(ctx, "=> calling UpdateCertificate")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method UpdateCertificate returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method UpdateCertificate returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method UpdateCertificate finished")
		}
	}()
	return _d._base.UpdateCertificate(ctx, certificatePEM, keyPEM)
}

// UpdateNetworkConfig implements system0.SystemService.
func (_d SystemServiceWithSlog) UpdateNetworkConfig(ctx context.Context, cfg system.SystemNetworkPut) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cfg", cfg),
		)
	}
	log.DebugContext(ctx, "=> calling UpdateNetworkConfig")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method UpdateNetworkConfig returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method UpdateNetworkConfig returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method UpdateNetworkConfig finished")
		}
	}()
	return _d._base.UpdateNetworkConfig(ctx, cfg)
}

// UpdateSecurityConfig implements system0.SystemService.
func (_d SystemServiceWithSlog) UpdateSecurityConfig(ctx context.Context, cfg system.SystemSecurityPut) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cfg", cfg),
		)
	}
	log.DebugContext(ctx, "=> calling UpdateSecurityConfig")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method UpdateSecurityConfig returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method UpdateSecurityConfig returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method UpdateSecurityConfig finished")
		}
	}()
	return _d._base.UpdateSecurityConfig(ctx, cfg)
}

// UpdateUpdatesConfig implements system0.SystemService.
func (_d SystemServiceWithSlog) UpdateUpdatesConfig(ctx context.Context, cfg system.SystemUpdatesPut) (err error) {
	log := _d._log.With()
	if _d._log.Enabled(ctx, logger.LevelTrace) {
		log = log.With(
			slog.Any("ctx", ctx),
			slog.Any("cfg", cfg),
		)
	}
	log.DebugContext(ctx, "=> calling UpdateUpdatesConfig")
	defer func() {
		log := _d._log.With()
		if _d._log.Enabled(ctx, logger.LevelTrace) {
			log = _d._log.With(
				slog.Any("err", err),
			)
		} else {
			if err != nil {
				log = _d._log.With("err", err)
			}
		}
		if err != nil {
			if _d._isInformativeErrFunc(err) {
				log.DebugContext(ctx, "<= method UpdateUpdatesConfig returned an informative error")
			} else {
				log.ErrorContext(ctx, "<= method UpdateUpdatesConfig returned an error")
			}
		} else {
			log.DebugContext(ctx, "<= method UpdateUpdatesConfig finished")
		}
	}()
	return _d._base.UpdateUpdatesConfig(ctx, cfg)
}
