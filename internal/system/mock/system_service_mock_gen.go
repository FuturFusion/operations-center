// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/FuturFusion/operations-center/internal/system"
)

// Ensure that SystemServiceMock does implement system.SystemService.
// If this is not the case, regenerate this file with mockery.
var _ system.SystemService = &SystemServiceMock{}

// SystemServiceMock is a mock implementation of system.SystemService.
//
//	func TestSomethingThatUsesSystemService(t *testing.T) {
//
//		// make and configure a mocked system.SystemService
//		mockedSystemService := &SystemServiceMock{
//			UpdateCertificateFunc: func(ctx context.Context, certificatePEM string, keyPEM string) error {
//				panic("mock out the UpdateCertificate method")
//			},
//		}
//
//		// use mockedSystemService in code that requires system.SystemService
//		// and then make assertions.
//
//	}
type SystemServiceMock struct {
	// UpdateCertificateFunc mocks the UpdateCertificate method.
	UpdateCertificateFunc func(ctx context.Context, certificatePEM string, keyPEM string) error

	// calls tracks calls to the methods.
	calls struct {
		// UpdateCertificate holds details about calls to the UpdateCertificate method.
		UpdateCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CertificatePEM is the certificatePEM argument value.
			CertificatePEM string
			// KeyPEM is the keyPEM argument value.
			KeyPEM string
		}
	}
	lockUpdateCertificate sync.RWMutex
}

// UpdateCertificate calls UpdateCertificateFunc.
func (mock *SystemServiceMock) UpdateCertificate(ctx context.Context, certificatePEM string, keyPEM string) error {
	if mock.UpdateCertificateFunc == nil {
		panic("SystemServiceMock.UpdateCertificateFunc: method is nil but SystemService.UpdateCertificate was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		CertificatePEM string
		KeyPEM         string
	}{
		Ctx:            ctx,
		CertificatePEM: certificatePEM,
		KeyPEM:         keyPEM,
	}
	mock.lockUpdateCertificate.Lock()
	mock.calls.UpdateCertificate = append(mock.calls.UpdateCertificate, callInfo)
	mock.lockUpdateCertificate.Unlock()
	return mock.UpdateCertificateFunc(ctx, certificatePEM, keyPEM)
}

// UpdateCertificateCalls gets all the calls that were made to UpdateCertificate.
// Check the length with:
//
//	len(mockedSystemService.UpdateCertificateCalls())
func (mock *SystemServiceMock) UpdateCertificateCalls() []struct {
	Ctx            context.Context
	CertificatePEM string
	KeyPEM         string
} {
	var calls []struct {
		Ctx            context.Context
		CertificatePEM string
		KeyPEM         string
	}
	mock.lockUpdateCertificate.RLock()
	calls = mock.calls.UpdateCertificate
	mock.lockUpdateCertificate.RUnlock()
	return calls
}
